
build/gdi4.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000200 	.word	0x20000200
 8000004:	08000249 	.word	0x08000249
 8000008:	0800024b 	.word	0x0800024b
 800000c:	0800024b 	.word	0x0800024b
 8000010:	0800024b 	.word	0x0800024b
 8000014:	0800024b 	.word	0x0800024b
 8000018:	0800024b 	.word	0x0800024b
 800001c:	0800024b 	.word	0x0800024b
 8000020:	0800024b 	.word	0x0800024b
 8000024:	0800024b 	.word	0x0800024b
 8000028:	0800024b 	.word	0x0800024b
 800002c:	08004761 	.word	0x08004761
 8000030:	0800024b 	.word	0x0800024b
 8000034:	0800024b 	.word	0x0800024b
 8000038:	0800024b 	.word	0x0800024b
 800003c:	0800024b 	.word	0x0800024b
 8000040:	0800024b 	.word	0x0800024b
 8000044:	0800024b 	.word	0x0800024b
 8000048:	0800024b 	.word	0x0800024b
 800004c:	0800024b 	.word	0x0800024b
 8000050:	0800024b 	.word	0x0800024b
 8000054:	0800024b 	.word	0x0800024b
 8000058:	0800024b 	.word	0x0800024b
 800005c:	0800024b 	.word	0x0800024b
 8000060:	0800024b 	.word	0x0800024b
 8000064:	0800024b 	.word	0x0800024b
 8000068:	0800024b 	.word	0x0800024b
 800006c:	08004c51 	.word	0x08004c51
 8000070:	08004c31 	.word	0x08004c31
 8000074:	08004c11 	.word	0x08004c11
 8000078:	08004bf1 	.word	0x08004bf1
 800007c:	08004bd1 	.word	0x08004bd1
 8000080:	08004bb1 	.word	0x08004bb1
 8000084:	08004b91 	.word	0x08004b91
 8000088:	0800024b 	.word	0x0800024b
 800008c:	08004dc1 	.word	0x08004dc1
 8000090:	08004d51 	.word	0x08004d51
 8000094:	08004ce1 	.word	0x08004ce1
 8000098:	08004c71 	.word	0x08004c71
 800009c:	0800024b 	.word	0x0800024b
 80000a0:	0800024b 	.word	0x0800024b
 80000a4:	0800024b 	.word	0x0800024b
 80000a8:	0800024b 	.word	0x0800024b
 80000ac:	0800024b 	.word	0x0800024b
 80000b0:	08004ae1 	.word	0x08004ae1
 80000b4:	0800024b 	.word	0x0800024b
 80000b8:	0800024b 	.word	0x0800024b
 80000bc:	0800024b 	.word	0x0800024b
 80000c0:	0800024b 	.word	0x0800024b
 80000c4:	0800024b 	.word	0x0800024b
 80000c8:	0800024b 	.word	0x0800024b
 80000cc:	0800024b 	.word	0x0800024b
 80000d0:	0800024b 	.word	0x0800024b
 80000d4:	08004881 	.word	0x08004881
 80000d8:	08004911 	.word	0x08004911
 80000dc:	0800024b 	.word	0x0800024b
 80000e0:	0800024b 	.word	0x0800024b
 80000e4:	0800024b 	.word	0x0800024b
 80000e8:	0800024b 	.word	0x0800024b
 80000ec:	0800024b 	.word	0x0800024b
 80000f0:	0800024b 	.word	0x0800024b
 80000f4:	0800024b 	.word	0x0800024b
 80000f8:	0800024b 	.word	0x0800024b
 80000fc:	0800024b 	.word	0x0800024b
 8000100:	0800024b 	.word	0x0800024b
 8000104:	0800024b 	.word	0x0800024b
 8000108:	0800024b 	.word	0x0800024b
 800010c:	0800024b 	.word	0x0800024b
 8000110:	0800024b 	.word	0x0800024b
 8000114:	0800024b 	.word	0x0800024b
 8000118:	0800024b 	.word	0x0800024b
 800011c:	0800024b 	.word	0x0800024b
 8000120:	0800024b 	.word	0x0800024b
 8000124:	0800024b 	.word	0x0800024b
 8000128:	0800024b 	.word	0x0800024b
 800012c:	0800024b 	.word	0x0800024b
 8000130:	0800024b 	.word	0x0800024b
 8000134:	0800024b 	.word	0x0800024b
 8000138:	0800024b 	.word	0x0800024b
 800013c:	0800024b 	.word	0x0800024b
 8000140:	0800024b 	.word	0x0800024b
 8000144:	0800024b 	.word	0x0800024b
 8000148:	0800024b 	.word	0x0800024b
 800014c:	0800024b 	.word	0x0800024b
 8000150:	0800024b 	.word	0x0800024b
 8000154:	0800024b 	.word	0x0800024b
 8000158:	0800024b 	.word	0x0800024b
 800015c:	0800024b 	.word	0x0800024b

Disassembly of section .text:

08000170 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000170:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000172:	4827      	ldr	r0, [pc, #156]	; (8000210 <endfiniloop+0x4>)
                msr     MSP, r0
 8000174:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000178:	4826      	ldr	r0, [pc, #152]	; (8000214 <endfiniloop+0x8>)
                msr     PSP, r0
 800017a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800017e:	4826      	ldr	r0, [pc, #152]	; (8000218 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000180:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000184:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000188:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800018a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800018c:	f380 8814 	msr	CONTROL, r0
                isb
 8000190:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000194:	f004 fe94 	bl	8004ec0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000198:	f004 fb3a 	bl	8004810 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800019c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001a0:	491e      	ldr	r1, [pc, #120]	; (800021c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001a2:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <endfiniloop+0x4>)

080001a4 <msloop>:
msloop:
                cmp     r1, r2
 80001a4:	4291      	cmp	r1, r2
                itt     lo
 80001a6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001ac:	e7fa      	bcc.n	80001a4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001ae:	491c      	ldr	r1, [pc, #112]	; (8000220 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001b0:	4a18      	ldr	r2, [pc, #96]	; (8000214 <endfiniloop+0x8>)

080001b2 <psloop>:
psloop:
                cmp     r1, r2
 80001b2:	4291      	cmp	r1, r2
                itt     lo
 80001b4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ba:	e7fa      	bcc.n	80001b2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001bc:	4919      	ldr	r1, [pc, #100]	; (8000224 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001be:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001c0:	4b1a      	ldr	r3, [pc, #104]	; (800022c <endfiniloop+0x20>)

080001c2 <dloop>:
dloop:
                cmp     r2, r3
 80001c2:	429a      	cmp	r2, r3
                ittt    lo
 80001c4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001c6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ca:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001ce:	e7f8      	bcc.n	80001c2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001d0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001d2:	4917      	ldr	r1, [pc, #92]	; (8000230 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001d4:	4a17      	ldr	r2, [pc, #92]	; (8000234 <endfiniloop+0x28>)

080001d6 <bloop>:
bloop:
                cmp     r1, r2
 80001d6:	4291      	cmp	r1, r2
                itt     lo
 80001d8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001da:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001de:	e7fa      	bcc.n	80001d6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001e0:	f004 fe26 	bl	8004e30 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001e4:	f004 fe64 	bl	8004eb0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001e8:	4c13      	ldr	r4, [pc, #76]	; (8000238 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001ea:	4d14      	ldr	r5, [pc, #80]	; (800023c <endfiniloop+0x30>)

080001ec <initloop>:
initloop:
                cmp     r4, r5
 80001ec:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001ee:	da03      	bge.n	80001f8 <endinitloop>
                ldr     r1, [r4], #4
 80001f0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f4:	4788      	blx	r1
                b       initloop
 80001f6:	e7f9      	b.n	80001ec <initloop>

080001f8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001f8:	f003 fcba 	bl	8003b70 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001fc:	4c10      	ldr	r4, [pc, #64]	; (8000240 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001fe:	4d11      	ldr	r5, [pc, #68]	; (8000244 <endfiniloop+0x38>)

08000200 <finiloop>:
finiloop:
                cmp     r4, r5
 8000200:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000202:	da03      	bge.n	800020c <endfiniloop>
                ldr     r1, [r4], #4
 8000204:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000208:	4788      	blx	r1
                b       finiloop
 800020a:	e7f9      	b.n	8000200 <finiloop>

0800020c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800020c:	f004 be48 	b.w	8004ea0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000210:	20000200 	.word	0x20000200
                ldr     r0, =__process_stack_end__
 8000214:	20000400 	.word	0x20000400
                ldr     r0, =_vectors
 8000218:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800021c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000220:	20000200 	.word	0x20000200
                ldr     r1, =__textdata_base__
 8000224:	080054a8 	.word	0x080054a8
                ldr     r2, =__data_base__
 8000228:	20000400 	.word	0x20000400
                ldr     r3, =__data_end__
 800022c:	2000078c 	.word	0x2000078c
                ldr     r1, =__bss_base__
 8000230:	20000790 	.word	0x20000790
                ldr     r2, =__bss_end__
 8000234:	20001320 	.word	0x20001320
                ldr     r4, =__init_array_base__
 8000238:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800023c:	08000164 	.word	0x08000164
                ldr     r4, =__fini_array_base__
 8000240:	08000164 	.word	0x08000164
                ldr     r5, =__fini_array_end__
 8000244:	08000164 	.word	0x08000164

08000248 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000248:	e792      	b.n	8000170 <_crt0_entry>

0800024a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800024a:	f000 f800 	bl	800024e <_unhandled_exception>

0800024e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800024e:	e7fe      	b.n	800024e <_unhandled_exception>

08000250 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000254:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000258:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800025a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000260 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000260:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000262:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000266:	4628      	mov	r0, r5
                blx     r4
 8000268:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800026a:	2000      	movs	r0, #0
                bl      chThdExit
 800026c:	f004 fa88 	bl	8004780 <chThdExit>

08000270 <_zombies>:
_zombies:       b       _zombies
 8000270:	e7fe      	b.n	8000270 <_zombies>

08000272 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000272:	f004 faad 	bl	80047d0 <chSchDoReschedule>

08000276 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000276:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000278:	e7fe      	b.n	8000278 <_port_exit_from_isr+0x2>
	...

0800027c <__aeabi_fmul>:
 800027c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000284:	bf1e      	ittt	ne
 8000286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800028a:	ea92 0f0c 	teqne	r2, ip
 800028e:	ea93 0f0c 	teqne	r3, ip
 8000292:	d06f      	beq.n	8000374 <__aeabi_fmul+0xf8>
 8000294:	441a      	add	r2, r3
 8000296:	ea80 0c01 	eor.w	ip, r0, r1
 800029a:	0240      	lsls	r0, r0, #9
 800029c:	bf18      	it	ne
 800029e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002a2:	d01e      	beq.n	80002e2 <__aeabi_fmul+0x66>
 80002a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002b0:	fba0 3101 	umull	r3, r1, r0, r1
 80002b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80002bc:	bf3e      	ittt	cc
 80002be:	0049      	lslcc	r1, r1, #1
 80002c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002c4:	005b      	lslcc	r3, r3, #1
 80002c6:	ea40 0001 	orr.w	r0, r0, r1
 80002ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002ce:	2afd      	cmp	r2, #253	; 0xfd
 80002d0:	d81d      	bhi.n	800030e <__aeabi_fmul+0x92>
 80002d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	4770      	bx	lr
 80002e2:	f090 0f00 	teq	r0, #0
 80002e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ea:	bf08      	it	eq
 80002ec:	0249      	lsleq	r1, r1, #9
 80002ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002f6:	3a7f      	subs	r2, #127	; 0x7f
 80002f8:	bfc2      	ittt	gt
 80002fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000302:	4770      	bxgt	lr
 8000304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	3a01      	subs	r2, #1
 800030e:	dc5d      	bgt.n	80003cc <__aeabi_fmul+0x150>
 8000310:	f112 0f19 	cmn.w	r2, #25
 8000314:	bfdc      	itt	le
 8000316:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800031a:	4770      	bxle	lr
 800031c:	f1c2 0200 	rsb	r2, r2, #0
 8000320:	0041      	lsls	r1, r0, #1
 8000322:	fa21 f102 	lsr.w	r1, r1, r2
 8000326:	f1c2 0220 	rsb	r2, r2, #32
 800032a:	fa00 fc02 	lsl.w	ip, r0, r2
 800032e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000332:	f140 0000 	adc.w	r0, r0, #0
 8000336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800033a:	bf08      	it	eq
 800033c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000340:	4770      	bx	lr
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800034a:	bf02      	ittt	eq
 800034c:	0040      	lsleq	r0, r0, #1
 800034e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000352:	3a01      	subeq	r2, #1
 8000354:	d0f9      	beq.n	800034a <__aeabi_fmul+0xce>
 8000356:	ea40 000c 	orr.w	r0, r0, ip
 800035a:	f093 0f00 	teq	r3, #0
 800035e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000362:	bf02      	ittt	eq
 8000364:	0049      	lsleq	r1, r1, #1
 8000366:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800036a:	3b01      	subeq	r3, #1
 800036c:	d0f9      	beq.n	8000362 <__aeabi_fmul+0xe6>
 800036e:	ea41 010c 	orr.w	r1, r1, ip
 8000372:	e78f      	b.n	8000294 <__aeabi_fmul+0x18>
 8000374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000378:	ea92 0f0c 	teq	r2, ip
 800037c:	bf18      	it	ne
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d00a      	beq.n	800039a <__aeabi_fmul+0x11e>
 8000384:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000388:	bf18      	it	ne
 800038a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800038e:	d1d8      	bne.n	8000342 <__aeabi_fmul+0xc6>
 8000390:	ea80 0001 	eor.w	r0, r0, r1
 8000394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000398:	4770      	bx	lr
 800039a:	f090 0f00 	teq	r0, #0
 800039e:	bf17      	itett	ne
 80003a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80003a4:	4608      	moveq	r0, r1
 80003a6:	f091 0f00 	teqne	r1, #0
 80003aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80003ae:	d014      	beq.n	80003da <__aeabi_fmul+0x15e>
 80003b0:	ea92 0f0c 	teq	r2, ip
 80003b4:	d101      	bne.n	80003ba <__aeabi_fmul+0x13e>
 80003b6:	0242      	lsls	r2, r0, #9
 80003b8:	d10f      	bne.n	80003da <__aeabi_fmul+0x15e>
 80003ba:	ea93 0f0c 	teq	r3, ip
 80003be:	d103      	bne.n	80003c8 <__aeabi_fmul+0x14c>
 80003c0:	024b      	lsls	r3, r1, #9
 80003c2:	bf18      	it	ne
 80003c4:	4608      	movne	r0, r1
 80003c6:	d108      	bne.n	80003da <__aeabi_fmul+0x15e>
 80003c8:	ea80 0001 	eor.w	r0, r0, r1
 80003cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d8:	4770      	bx	lr
 80003da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_frsub>:
 80003e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003e8:	e002      	b.n	80003f0 <__addsf3>
 80003ea:	bf00      	nop

080003ec <__aeabi_fsub>:
 80003ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080003f0 <__addsf3>:
 80003f0:	0042      	lsls	r2, r0, #1
 80003f2:	bf1f      	itttt	ne
 80003f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003f8:	ea92 0f03 	teqne	r2, r3
 80003fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000400:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000404:	d06a      	beq.n	80004dc <__addsf3+0xec>
 8000406:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800040a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800040e:	bfc1      	itttt	gt
 8000410:	18d2      	addgt	r2, r2, r3
 8000412:	4041      	eorgt	r1, r0
 8000414:	4048      	eorgt	r0, r1
 8000416:	4041      	eorgt	r1, r0
 8000418:	bfb8      	it	lt
 800041a:	425b      	neglt	r3, r3
 800041c:	2b19      	cmp	r3, #25
 800041e:	bf88      	it	hi
 8000420:	4770      	bxhi	lr
 8000422:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800042e:	bf18      	it	ne
 8000430:	4240      	negne	r0, r0
 8000432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000436:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800043a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800043e:	bf18      	it	ne
 8000440:	4249      	negne	r1, r1
 8000442:	ea92 0f03 	teq	r2, r3
 8000446:	d03f      	beq.n	80004c8 <__addsf3+0xd8>
 8000448:	f1a2 0201 	sub.w	r2, r2, #1
 800044c:	fa41 fc03 	asr.w	ip, r1, r3
 8000450:	eb10 000c 	adds.w	r0, r0, ip
 8000454:	f1c3 0320 	rsb	r3, r3, #32
 8000458:	fa01 f103 	lsl.w	r1, r1, r3
 800045c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__addsf3+0x78>
 8000462:	4249      	negs	r1, r1
 8000464:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000468:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800046c:	d313      	bcc.n	8000496 <__addsf3+0xa6>
 800046e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000472:	d306      	bcc.n	8000482 <__addsf3+0x92>
 8000474:	0840      	lsrs	r0, r0, #1
 8000476:	ea4f 0131 	mov.w	r1, r1, rrx
 800047a:	f102 0201 	add.w	r2, r2, #1
 800047e:	2afe      	cmp	r2, #254	; 0xfe
 8000480:	d251      	bcs.n	8000526 <__addsf3+0x136>
 8000482:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800048a:	bf08      	it	eq
 800048c:	f020 0001 	biceq.w	r0, r0, #1
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	4770      	bx	lr
 8000496:	0049      	lsls	r1, r1, #1
 8000498:	eb40 0000 	adc.w	r0, r0, r0
 800049c:	3a01      	subs	r2, #1
 800049e:	bf28      	it	cs
 80004a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80004a4:	d2ed      	bcs.n	8000482 <__addsf3+0x92>
 80004a6:	fab0 fc80 	clz	ip, r0
 80004aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80004ae:	ebb2 020c 	subs.w	r2, r2, ip
 80004b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80004b6:	bfaa      	itet	ge
 80004b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80004bc:	4252      	neglt	r2, r2
 80004be:	4318      	orrge	r0, r3
 80004c0:	bfbc      	itt	lt
 80004c2:	40d0      	lsrlt	r0, r2
 80004c4:	4318      	orrlt	r0, r3
 80004c6:	4770      	bx	lr
 80004c8:	f092 0f00 	teq	r2, #0
 80004cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80004d0:	bf06      	itte	eq
 80004d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80004d6:	3201      	addeq	r2, #1
 80004d8:	3b01      	subne	r3, #1
 80004da:	e7b5      	b.n	8000448 <__addsf3+0x58>
 80004dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004e4:	bf18      	it	ne
 80004e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004ea:	d021      	beq.n	8000530 <__addsf3+0x140>
 80004ec:	ea92 0f03 	teq	r2, r3
 80004f0:	d004      	beq.n	80004fc <__addsf3+0x10c>
 80004f2:	f092 0f00 	teq	r2, #0
 80004f6:	bf08      	it	eq
 80004f8:	4608      	moveq	r0, r1
 80004fa:	4770      	bx	lr
 80004fc:	ea90 0f01 	teq	r0, r1
 8000500:	bf1c      	itt	ne
 8000502:	2000      	movne	r0, #0
 8000504:	4770      	bxne	lr
 8000506:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800050a:	d104      	bne.n	8000516 <__addsf3+0x126>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	bf28      	it	cs
 8000510:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800051a:	bf3c      	itt	cc
 800051c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000520:	4770      	bxcc	lr
 8000522:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000526:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800052a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800052e:	4770      	bx	lr
 8000530:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000534:	bf16      	itet	ne
 8000536:	4608      	movne	r0, r1
 8000538:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800053c:	4601      	movne	r1, r0
 800053e:	0242      	lsls	r2, r0, #9
 8000540:	bf06      	itte	eq
 8000542:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000546:	ea90 0f01 	teqeq	r0, r1
 800054a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800054e:	4770      	bx	lr

08000550 <__aeabi_ui2f>:
 8000550:	f04f 0300 	mov.w	r3, #0
 8000554:	e004      	b.n	8000560 <__aeabi_i2f+0x8>
 8000556:	bf00      	nop

08000558 <__aeabi_i2f>:
 8000558:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	ea5f 0c00 	movs.w	ip, r0
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800056c:	4601      	mov	r1, r0
 800056e:	f04f 0000 	mov.w	r0, #0
 8000572:	e01c      	b.n	80005ae <__aeabi_l2f+0x2a>

08000574 <__aeabi_ul2f>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	f04f 0300 	mov.w	r3, #0
 8000580:	e00a      	b.n	8000598 <__aeabi_l2f+0x14>
 8000582:	bf00      	nop

08000584 <__aeabi_l2f>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000590:	d502      	bpl.n	8000598 <__aeabi_l2f+0x14>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	ea5f 0c01 	movs.w	ip, r1
 800059c:	bf02      	ittt	eq
 800059e:	4684      	moveq	ip, r0
 80005a0:	4601      	moveq	r1, r0
 80005a2:	2000      	moveq	r0, #0
 80005a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80005a8:	bf08      	it	eq
 80005aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80005ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80005b2:	fabc f28c 	clz	r2, ip
 80005b6:	3a08      	subs	r2, #8
 80005b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80005bc:	db10      	blt.n	80005e0 <__aeabi_l2f+0x5c>
 80005be:	fa01 fc02 	lsl.w	ip, r1, r2
 80005c2:	4463      	add	r3, ip
 80005c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80005c8:	f1c2 0220 	rsb	r2, r2, #32
 80005cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005d0:	fa20 f202 	lsr.w	r2, r0, r2
 80005d4:	eb43 0002 	adc.w	r0, r3, r2
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f102 0220 	add.w	r2, r2, #32
 80005e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80005e8:	f1c2 0220 	rsb	r2, r2, #32
 80005ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80005f0:	fa21 f202 	lsr.w	r2, r1, r2
 80005f4:	eb43 0002 	adc.w	r0, r3, r2
 80005f8:	bf08      	it	eq
 80005fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005fe:	4770      	bx	lr

08000600 <__gesf2>:
 8000600:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000604:	e006      	b.n	8000614 <__cmpsf2+0x4>
 8000606:	bf00      	nop

08000608 <__lesf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	e002      	b.n	8000614 <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__cmpsf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000620:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000624:	bf18      	it	ne
 8000626:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800062a:	d011      	beq.n	8000650 <__cmpsf2+0x40>
 800062c:	b001      	add	sp, #4
 800062e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000632:	bf18      	it	ne
 8000634:	ea90 0f01 	teqne	r0, r1
 8000638:	bf58      	it	pl
 800063a:	ebb2 0003 	subspl.w	r0, r2, r3
 800063e:	bf88      	it	hi
 8000640:	17c8      	asrhi	r0, r1, #31
 8000642:	bf38      	it	cc
 8000644:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000648:	bf18      	it	ne
 800064a:	f040 0001 	orrne.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	d102      	bne.n	800065c <__cmpsf2+0x4c>
 8000656:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800065a:	d105      	bne.n	8000668 <__cmpsf2+0x58>
 800065c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000660:	d1e4      	bne.n	800062c <__cmpsf2+0x1c>
 8000662:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000666:	d0e1      	beq.n	800062c <__cmpsf2+0x1c>
 8000668:	f85d 0b04 	ldr.w	r0, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <__aeabi_cfrcmple>:
 8000670:	4684      	mov	ip, r0
 8000672:	4608      	mov	r0, r1
 8000674:	4661      	mov	r1, ip
 8000676:	e7ff      	b.n	8000678 <__aeabi_cfcmpeq>

08000678 <__aeabi_cfcmpeq>:
 8000678:	b50f      	push	{r0, r1, r2, r3, lr}
 800067a:	f7ff ffc9 	bl	8000610 <__cmpsf2>
 800067e:	2800      	cmp	r0, #0
 8000680:	bf48      	it	mi
 8000682:	f110 0f00 	cmnmi.w	r0, #0
 8000686:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000688 <__aeabi_fcmpeq>:
 8000688:	f84d ed08 	str.w	lr, [sp, #-8]!
 800068c:	f7ff fff4 	bl	8000678 <__aeabi_cfcmpeq>
 8000690:	bf0c      	ite	eq
 8000692:	2001      	moveq	r0, #1
 8000694:	2000      	movne	r0, #0
 8000696:	f85d fb08 	ldr.w	pc, [sp], #8
 800069a:	bf00      	nop

0800069c <__aeabi_fcmplt>:
 800069c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a0:	f7ff ffea 	bl	8000678 <__aeabi_cfcmpeq>
 80006a4:	bf34      	ite	cc
 80006a6:	2001      	movcc	r0, #1
 80006a8:	2000      	movcs	r0, #0
 80006aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ae:	bf00      	nop

080006b0 <__aeabi_fcmple>:
 80006b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b4:	f7ff ffe0 	bl	8000678 <__aeabi_cfcmpeq>
 80006b8:	bf94      	ite	ls
 80006ba:	2001      	movls	r0, #1
 80006bc:	2000      	movhi	r0, #0
 80006be:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c2:	bf00      	nop

080006c4 <__aeabi_fcmpge>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff ffd2 	bl	8000670 <__aeabi_cfrcmple>
 80006cc:	bf94      	ite	ls
 80006ce:	2001      	movls	r0, #1
 80006d0:	2000      	movhi	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_fcmpgt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffc8 	bl	8000670 <__aeabi_cfrcmple>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_f2iz>:
 80006ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006f4:	d30f      	bcc.n	8000716 <__aeabi_f2iz+0x2a>
 80006f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006fe:	d90d      	bls.n	800071c <__aeabi_f2iz+0x30>
 8000700:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000708:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800070c:	fa23 f002 	lsr.w	r0, r3, r2
 8000710:	bf18      	it	ne
 8000712:	4240      	negne	r0, r0
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2iz+0x3a>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d105      	bne.n	8000732 <__aeabi_f2iz+0x46>
 8000726:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800072a:	bf08      	it	eq
 800072c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr

08000738 <__aeabi_f2uiz>:
 8000738:	0042      	lsls	r2, r0, #1
 800073a:	d20e      	bcs.n	800075a <__aeabi_f2uiz+0x22>
 800073c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000740:	d30b      	bcc.n	800075a <__aeabi_f2uiz+0x22>
 8000742:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000746:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074a:	d409      	bmi.n	8000760 <__aeabi_f2uiz+0x28>
 800074c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	4770      	bx	lr
 800075a:	f04f 0000 	mov.w	r0, #0
 800075e:	4770      	bx	lr
 8000760:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000764:	d101      	bne.n	800076a <__aeabi_f2uiz+0x32>
 8000766:	0242      	lsls	r2, r0, #9
 8000768:	d102      	bne.n	8000770 <__aeabi_f2uiz+0x38>
 800076a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076e:	4770      	bx	lr
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <__aeabi_uldivmod>:
 8000778:	b953      	cbnz	r3, 8000790 <__aeabi_uldivmod+0x18>
 800077a:	b94a      	cbnz	r2, 8000790 <__aeabi_uldivmod+0x18>
 800077c:	2900      	cmp	r1, #0
 800077e:	bf08      	it	eq
 8000780:	2800      	cmpeq	r0, #0
 8000782:	bf1c      	itt	ne
 8000784:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000788:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800078c:	f000 b96e 	b.w	8000a6c <__aeabi_idiv0>
 8000790:	f1ad 0c08 	sub.w	ip, sp, #8
 8000794:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000798:	f000 f806 	bl	80007a8 <__udivmoddi4>
 800079c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a4:	b004      	add	sp, #16
 80007a6:	4770      	bx	lr

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	460d      	mov	r5, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	468e      	mov	lr, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f040 8083 	bne.w	80008c0 <__udivmoddi4+0x118>
 80007ba:	428a      	cmp	r2, r1
 80007bc:	4617      	mov	r7, r2
 80007be:	d947      	bls.n	8000850 <__udivmoddi4+0xa8>
 80007c0:	fab2 f382 	clz	r3, r2
 80007c4:	b14b      	cbz	r3, 80007da <__udivmoddi4+0x32>
 80007c6:	f1c3 0120 	rsb	r1, r3, #32
 80007ca:	fa05 fe03 	lsl.w	lr, r5, r3
 80007ce:	fa20 f101 	lsr.w	r1, r0, r1
 80007d2:	409f      	lsls	r7, r3
 80007d4:	ea41 0e0e 	orr.w	lr, r1, lr
 80007d8:	409c      	lsls	r4, r3
 80007da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007de:	fbbe fcf8 	udiv	ip, lr, r8
 80007e2:	fa1f f987 	uxth.w	r9, r7
 80007e6:	fb08 e21c 	mls	r2, r8, ip, lr
 80007ea:	fb0c f009 	mul.w	r0, ip, r9
 80007ee:	0c21      	lsrs	r1, r4, #16
 80007f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80007f4:	4290      	cmp	r0, r2
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x66>
 80007f8:	18ba      	adds	r2, r7, r2
 80007fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80007fe:	f080 8118 	bcs.w	8000a32 <__udivmoddi4+0x28a>
 8000802:	4290      	cmp	r0, r2
 8000804:	f240 8115 	bls.w	8000a32 <__udivmoddi4+0x28a>
 8000808:	f1ac 0c02 	sub.w	ip, ip, #2
 800080c:	443a      	add	r2, r7
 800080e:	1a12      	subs	r2, r2, r0
 8000810:	fbb2 f0f8 	udiv	r0, r2, r8
 8000814:	fb08 2210 	mls	r2, r8, r0, r2
 8000818:	fb00 f109 	mul.w	r1, r0, r9
 800081c:	b2a4      	uxth	r4, r4
 800081e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000822:	42a1      	cmp	r1, r4
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x92>
 8000826:	193c      	adds	r4, r7, r4
 8000828:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800082c:	f080 8103 	bcs.w	8000a36 <__udivmoddi4+0x28e>
 8000830:	42a1      	cmp	r1, r4
 8000832:	f240 8100 	bls.w	8000a36 <__udivmoddi4+0x28e>
 8000836:	3802      	subs	r0, #2
 8000838:	443c      	add	r4, r7
 800083a:	1a64      	subs	r4, r4, r1
 800083c:	2100      	movs	r1, #0
 800083e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000842:	b11e      	cbz	r6, 800084c <__udivmoddi4+0xa4>
 8000844:	2200      	movs	r2, #0
 8000846:	40dc      	lsrs	r4, r3
 8000848:	e9c6 4200 	strd	r4, r2, [r6]
 800084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000850:	b902      	cbnz	r2, 8000854 <__udivmoddi4+0xac>
 8000852:	deff      	udf	#255	; 0xff
 8000854:	fab2 f382 	clz	r3, r2
 8000858:	2b00      	cmp	r3, #0
 800085a:	d14f      	bne.n	80008fc <__udivmoddi4+0x154>
 800085c:	1a8d      	subs	r5, r1, r2
 800085e:	2101      	movs	r1, #1
 8000860:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000864:	fa1f f882 	uxth.w	r8, r2
 8000868:	fbb5 fcfe 	udiv	ip, r5, lr
 800086c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000870:	fb08 f00c 	mul.w	r0, r8, ip
 8000874:	0c22      	lsrs	r2, r4, #16
 8000876:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800087a:	42a8      	cmp	r0, r5
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0xe6>
 800087e:	197d      	adds	r5, r7, r5
 8000880:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0xe4>
 8000886:	42a8      	cmp	r0, r5
 8000888:	f200 80e9 	bhi.w	8000a5e <__udivmoddi4+0x2b6>
 800088c:	4694      	mov	ip, r2
 800088e:	1a2d      	subs	r5, r5, r0
 8000890:	fbb5 f0fe 	udiv	r0, r5, lr
 8000894:	fb0e 5510 	mls	r5, lr, r0, r5
 8000898:	fb08 f800 	mul.w	r8, r8, r0
 800089c:	b2a4      	uxth	r4, r4
 800089e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008a2:	45a0      	cmp	r8, r4
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x10e>
 80008a6:	193c      	adds	r4, r7, r4
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008ac:	d202      	bcs.n	80008b4 <__udivmoddi4+0x10c>
 80008ae:	45a0      	cmp	r8, r4
 80008b0:	f200 80d9 	bhi.w	8000a66 <__udivmoddi4+0x2be>
 80008b4:	4610      	mov	r0, r2
 80008b6:	eba4 0408 	sub.w	r4, r4, r8
 80008ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008be:	e7c0      	b.n	8000842 <__udivmoddi4+0x9a>
 80008c0:	428b      	cmp	r3, r1
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	f000 80b1 	beq.w	8000a2c <__udivmoddi4+0x284>
 80008ca:	2100      	movs	r1, #0
 80008cc:	e9c6 0500 	strd	r0, r5, [r6]
 80008d0:	4608      	mov	r0, r1
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f183 	clz	r1, r3
 80008da:	2900      	cmp	r1, #0
 80008dc:	d14b      	bne.n	8000976 <__udivmoddi4+0x1ce>
 80008de:	42ab      	cmp	r3, r5
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b9 	bhi.w	8000a5a <__udivmoddi4+0x2b2>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb65 0303 	sbc.w	r3, r5, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	469e      	mov	lr, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d0aa      	beq.n	800084c <__udivmoddi4+0xa4>
 80008f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80008fa:	e7a7      	b.n	800084c <__udivmoddi4+0xa4>
 80008fc:	409f      	lsls	r7, r3
 80008fe:	f1c3 0220 	rsb	r2, r3, #32
 8000902:	40d1      	lsrs	r1, r2
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	fbb1 f0fe 	udiv	r0, r1, lr
 800090c:	fa1f f887 	uxth.w	r8, r7
 8000910:	fb0e 1110 	mls	r1, lr, r0, r1
 8000914:	fa24 f202 	lsr.w	r2, r4, r2
 8000918:	409d      	lsls	r5, r3
 800091a:	fb00 fc08 	mul.w	ip, r0, r8
 800091e:	432a      	orrs	r2, r5
 8000920:	0c15      	lsrs	r5, r2, #16
 8000922:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000926:	45ac      	cmp	ip, r5
 8000928:	fa04 f403 	lsl.w	r4, r4, r3
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x19a>
 800092e:	197d      	adds	r5, r7, r5
 8000930:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000934:	f080 808f 	bcs.w	8000a56 <__udivmoddi4+0x2ae>
 8000938:	45ac      	cmp	ip, r5
 800093a:	f240 808c 	bls.w	8000a56 <__udivmoddi4+0x2ae>
 800093e:	3802      	subs	r0, #2
 8000940:	443d      	add	r5, r7
 8000942:	eba5 050c 	sub.w	r5, r5, ip
 8000946:	fbb5 f1fe 	udiv	r1, r5, lr
 800094a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800094e:	fb01 f908 	mul.w	r9, r1, r8
 8000952:	b295      	uxth	r5, r2
 8000954:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000958:	45a9      	cmp	r9, r5
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	197d      	adds	r5, r7, r5
 800095e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000962:	d274      	bcs.n	8000a4e <__udivmoddi4+0x2a6>
 8000964:	45a9      	cmp	r9, r5
 8000966:	d972      	bls.n	8000a4e <__udivmoddi4+0x2a6>
 8000968:	3902      	subs	r1, #2
 800096a:	443d      	add	r5, r7
 800096c:	eba5 0509 	sub.w	r5, r5, r9
 8000970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000974:	e778      	b.n	8000868 <__udivmoddi4+0xc0>
 8000976:	f1c1 0720 	rsb	r7, r1, #32
 800097a:	408b      	lsls	r3, r1
 800097c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000980:	ea4c 0c03 	orr.w	ip, ip, r3
 8000984:	fa25 f407 	lsr.w	r4, r5, r7
 8000988:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800098c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000990:	fa1f f88c 	uxth.w	r8, ip
 8000994:	fb0e 4419 	mls	r4, lr, r9, r4
 8000998:	fa20 f307 	lsr.w	r3, r0, r7
 800099c:	fb09 fa08 	mul.w	sl, r9, r8
 80009a0:	408d      	lsls	r5, r1
 80009a2:	431d      	orrs	r5, r3
 80009a4:	0c2b      	lsrs	r3, r5, #16
 80009a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80009aa:	45a2      	cmp	sl, r4
 80009ac:	fa02 f201 	lsl.w	r2, r2, r1
 80009b0:	fa00 f301 	lsl.w	r3, r0, r1
 80009b4:	d909      	bls.n	80009ca <__udivmoddi4+0x222>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009be:	d248      	bcs.n	8000a52 <__udivmoddi4+0x2aa>
 80009c0:	45a2      	cmp	sl, r4
 80009c2:	d946      	bls.n	8000a52 <__udivmoddi4+0x2aa>
 80009c4:	f1a9 0902 	sub.w	r9, r9, #2
 80009c8:	4464      	add	r4, ip
 80009ca:	eba4 040a 	sub.w	r4, r4, sl
 80009ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80009d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80009d6:	fb00 fa08 	mul.w	sl, r0, r8
 80009da:	b2ad      	uxth	r5, r5
 80009dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009e0:	45a2      	cmp	sl, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x24e>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009ec:	d22d      	bcs.n	8000a4a <__udivmoddi4+0x2a2>
 80009ee:	45a2      	cmp	sl, r4
 80009f0:	d92b      	bls.n	8000a4a <__udivmoddi4+0x2a2>
 80009f2:	3802      	subs	r0, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	eba4 040a 	sub.w	r4, r4, sl
 8000a02:	454c      	cmp	r4, r9
 8000a04:	46c6      	mov	lr, r8
 8000a06:	464d      	mov	r5, r9
 8000a08:	d319      	bcc.n	8000a3e <__udivmoddi4+0x296>
 8000a0a:	d016      	beq.n	8000a3a <__udivmoddi4+0x292>
 8000a0c:	b15e      	cbz	r6, 8000a26 <__udivmoddi4+0x27e>
 8000a0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000a12:	eb64 0405 	sbc.w	r4, r4, r5
 8000a16:	fa04 f707 	lsl.w	r7, r4, r7
 8000a1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a1e:	431f      	orrs	r7, r3
 8000a20:	40cc      	lsrs	r4, r1
 8000a22:	e9c6 7400 	strd	r7, r4, [r6]
 8000a26:	2100      	movs	r1, #0
 8000a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2c:	4631      	mov	r1, r6
 8000a2e:	4630      	mov	r0, r6
 8000a30:	e70c      	b.n	800084c <__udivmoddi4+0xa4>
 8000a32:	468c      	mov	ip, r1
 8000a34:	e6eb      	b.n	800080e <__udivmoddi4+0x66>
 8000a36:	4610      	mov	r0, r2
 8000a38:	e6ff      	b.n	800083a <__udivmoddi4+0x92>
 8000a3a:	4543      	cmp	r3, r8
 8000a3c:	d2e6      	bcs.n	8000a0c <__udivmoddi4+0x264>
 8000a3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a42:	eb69 050c 	sbc.w	r5, r9, ip
 8000a46:	3801      	subs	r0, #1
 8000a48:	e7e0      	b.n	8000a0c <__udivmoddi4+0x264>
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	e7d3      	b.n	80009f6 <__udivmoddi4+0x24e>
 8000a4e:	4611      	mov	r1, r2
 8000a50:	e78c      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a52:	4681      	mov	r9, r0
 8000a54:	e7b9      	b.n	80009ca <__udivmoddi4+0x222>
 8000a56:	4608      	mov	r0, r1
 8000a58:	e773      	b.n	8000942 <__udivmoddi4+0x19a>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e749      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a62:	443d      	add	r5, r7
 8000a64:	e713      	b.n	800088e <__udivmoddi4+0xe6>
 8000a66:	3802      	subs	r0, #2
 8000a68:	443c      	add	r4, r7
 8000a6a:	e724      	b.n	80008b6 <__udivmoddi4+0x10e>

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <memcpy>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	ea41 0300 	orr.w	r3, r1, r0
 8000a76:	f013 0303 	ands.w	r3, r3, #3
 8000a7a:	d149      	bne.n	8000b10 <memcpy+0xa0>
 8000a7c:	3a40      	subs	r2, #64	; 0x40
 8000a7e:	d323      	bcc.n	8000ac8 <memcpy+0x58>
 8000a80:	680b      	ldr	r3, [r1, #0]
 8000a82:	6003      	str	r3, [r0, #0]
 8000a84:	684b      	ldr	r3, [r1, #4]
 8000a86:	6043      	str	r3, [r0, #4]
 8000a88:	688b      	ldr	r3, [r1, #8]
 8000a8a:	6083      	str	r3, [r0, #8]
 8000a8c:	68cb      	ldr	r3, [r1, #12]
 8000a8e:	60c3      	str	r3, [r0, #12]
 8000a90:	690b      	ldr	r3, [r1, #16]
 8000a92:	6103      	str	r3, [r0, #16]
 8000a94:	694b      	ldr	r3, [r1, #20]
 8000a96:	6143      	str	r3, [r0, #20]
 8000a98:	698b      	ldr	r3, [r1, #24]
 8000a9a:	6183      	str	r3, [r0, #24]
 8000a9c:	69cb      	ldr	r3, [r1, #28]
 8000a9e:	61c3      	str	r3, [r0, #28]
 8000aa0:	6a0b      	ldr	r3, [r1, #32]
 8000aa2:	6203      	str	r3, [r0, #32]
 8000aa4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000aa6:	6243      	str	r3, [r0, #36]	; 0x24
 8000aa8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000aaa:	6283      	str	r3, [r0, #40]	; 0x28
 8000aac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000aae:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000ab0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ab2:	6303      	str	r3, [r0, #48]	; 0x30
 8000ab4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000ab6:	6343      	str	r3, [r0, #52]	; 0x34
 8000ab8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000aba:	6383      	str	r3, [r0, #56]	; 0x38
 8000abc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000abe:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000ac0:	3040      	adds	r0, #64	; 0x40
 8000ac2:	3140      	adds	r1, #64	; 0x40
 8000ac4:	3a40      	subs	r2, #64	; 0x40
 8000ac6:	d2db      	bcs.n	8000a80 <memcpy+0x10>
 8000ac8:	3230      	adds	r2, #48	; 0x30
 8000aca:	d30b      	bcc.n	8000ae4 <memcpy+0x74>
 8000acc:	680b      	ldr	r3, [r1, #0]
 8000ace:	6003      	str	r3, [r0, #0]
 8000ad0:	684b      	ldr	r3, [r1, #4]
 8000ad2:	6043      	str	r3, [r0, #4]
 8000ad4:	688b      	ldr	r3, [r1, #8]
 8000ad6:	6083      	str	r3, [r0, #8]
 8000ad8:	68cb      	ldr	r3, [r1, #12]
 8000ada:	60c3      	str	r3, [r0, #12]
 8000adc:	3010      	adds	r0, #16
 8000ade:	3110      	adds	r1, #16
 8000ae0:	3a10      	subs	r2, #16
 8000ae2:	d2f3      	bcs.n	8000acc <memcpy+0x5c>
 8000ae4:	320c      	adds	r2, #12
 8000ae6:	d305      	bcc.n	8000af4 <memcpy+0x84>
 8000ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000aec:	f840 3b04 	str.w	r3, [r0], #4
 8000af0:	3a04      	subs	r2, #4
 8000af2:	d2f9      	bcs.n	8000ae8 <memcpy+0x78>
 8000af4:	3204      	adds	r2, #4
 8000af6:	d008      	beq.n	8000b0a <memcpy+0x9a>
 8000af8:	07d2      	lsls	r2, r2, #31
 8000afa:	bf1c      	itt	ne
 8000afc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b00:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b04:	d301      	bcc.n	8000b0a <memcpy+0x9a>
 8000b06:	880b      	ldrh	r3, [r1, #0]
 8000b08:	8003      	strh	r3, [r0, #0]
 8000b0a:	4660      	mov	r0, ip
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2a08      	cmp	r2, #8
 8000b12:	d313      	bcc.n	8000b3c <memcpy+0xcc>
 8000b14:	078b      	lsls	r3, r1, #30
 8000b16:	d0b1      	beq.n	8000a7c <memcpy+0xc>
 8000b18:	f010 0303 	ands.w	r3, r0, #3
 8000b1c:	d0ae      	beq.n	8000a7c <memcpy+0xc>
 8000b1e:	f1c3 0304 	rsb	r3, r3, #4
 8000b22:	1ad2      	subs	r2, r2, r3
 8000b24:	07db      	lsls	r3, r3, #31
 8000b26:	bf1c      	itt	ne
 8000b28:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b2c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b30:	d3a4      	bcc.n	8000a7c <memcpy+0xc>
 8000b32:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000b36:	f820 3b02 	strh.w	r3, [r0], #2
 8000b3a:	e79f      	b.n	8000a7c <memcpy+0xc>
 8000b3c:	3a04      	subs	r2, #4
 8000b3e:	d3d9      	bcc.n	8000af4 <memcpy+0x84>
 8000b40:	3a01      	subs	r2, #1
 8000b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b46:	f800 3b01 	strb.w	r3, [r0], #1
 8000b4a:	d2f9      	bcs.n	8000b40 <memcpy+0xd0>
 8000b4c:	780b      	ldrb	r3, [r1, #0]
 8000b4e:	7003      	strb	r3, [r0, #0]
 8000b50:	784b      	ldrb	r3, [r1, #1]
 8000b52:	7043      	strb	r3, [r0, #1]
 8000b54:	788b      	ldrb	r3, [r1, #2]
 8000b56:	7083      	strb	r3, [r0, #2]
 8000b58:	4660      	mov	r0, ip
 8000b5a:	4770      	bx	lr
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <mfs_bank_check_header.constprop.0>:
 * @notapi
 */
static mfs_bank_state_t mfs_bank_check_header(MFSDriver *mfsp) {
  uint16_t crc;

  if ((mfsp->buffer.bhdr.hdr32[0] == mfsp->config->erased) &&
 8000b60:	4920      	ldr	r1, [pc, #128]	; (8000be4 <mfs_bank_check_header.constprop.0+0x84>)
 8000b62:	684b      	ldr	r3, [r1, #4]
 8000b64:	f8d1 21e4 	ldr.w	r2, [r1, #484]	; 0x1e4
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d02c      	beq.n	8000bc8 <mfs_bank_check_header.constprop.0+0x68>
      (mfsp->buffer.bhdr.hdr32[3] == mfsp->config->erased)) {
    return MFS_BANK_ERASED;
  }

  /* Checking header fields integrity.*/
  if ((mfsp->buffer.bhdr.fields.magic1 != MFS_BANK_MAGIC_1) ||
 8000b6e:	481e      	ldr	r0, [pc, #120]	; (8000be8 <mfs_bank_check_header.constprop.0+0x88>)
 8000b70:	4282      	cmp	r2, r0
 8000b72:	d127      	bne.n	8000bc4 <mfs_bank_check_header.constprop.0+0x64>
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <mfs_bank_check_header.constprop.0+0x8c>)
 8000b76:	f8d1 01e8 	ldr.w	r0, [r1, #488]	; 0x1e8
 8000b7a:	4290      	cmp	r0, r2
 8000b7c:	d122      	bne.n	8000bc4 <mfs_bank_check_header.constprop.0+0x64>
      (mfsp->buffer.bhdr.fields.magic2 != MFS_BANK_MAGIC_2) ||
 8000b7e:	f8d1 21ec 	ldr.w	r2, [r1, #492]	; 0x1ec
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d01e      	beq.n	8000bc4 <mfs_bank_check_header.constprop.0+0x64>
      (mfsp->buffer.bhdr.fields.counter == mfsp->config->erased) ||
 8000b86:	f8b1 21f0 	ldrh.w	r2, [r1, #496]	; 0x1f0
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d119      	bne.n	8000bc4 <mfs_bank_check_header.constprop.0+0x64>
 8000b90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <mfs_bank_check_header.constprop.0+0x90>)
static mfs_bank_state_t mfs_bank_check_header(MFSDriver *mfsp) {
 8000b96:	b430      	push	{r4, r5}
 8000b98:	4d16      	ldr	r5, [pc, #88]	; (8000bf4 <mfs_bank_check_header.constprop.0+0x94>)
 8000b9a:	f102 040e 	add.w	r4, r2, #14
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8000b9e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000ba2:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
 8000ba6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
  while (n > 0U) {
 8000baa:	42a2      	cmp	r2, r4
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8000bac:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
 8000bb0:	b280      	uxth	r0, r0
  while (n > 0U) {
 8000bb2:	d1f4      	bne.n	8000b9e <mfs_bank_check_header.constprop.0+0x3e>
  if (crc != mfsp->buffer.bhdr.fields.crc) {
    return MFS_BANK_GARBAGE;
  }

  return MFS_BANK_OK;
}
 8000bb4:	bc30      	pop	{r4, r5}
  if (crc != mfsp->buffer.bhdr.fields.crc) {
 8000bb6:	f8b1 31f2 	ldrh.w	r3, [r1, #498]	; 0x1f2
  return MFS_BANK_OK;
 8000bba:	4283      	cmp	r3, r0
 8000bbc:	bf14      	ite	ne
 8000bbe:	2002      	movne	r0, #2
 8000bc0:	2001      	moveq	r0, #1
}
 8000bc2:	4770      	bx	lr
    return MFS_BANK_GARBAGE;
 8000bc4:	2002      	movs	r0, #2
}
 8000bc6:	4770      	bx	lr
  if ((mfsp->buffer.bhdr.hdr32[0] == mfsp->config->erased) &&
 8000bc8:	f8d1 01e8 	ldr.w	r0, [r1, #488]	; 0x1e8
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	d1ce      	bne.n	8000b6e <mfs_bank_check_header.constprop.0+0xe>
      (mfsp->buffer.bhdr.hdr32[1] == mfsp->config->erased) &&
 8000bd0:	f8d1 01ec 	ldr.w	r0, [r1, #492]	; 0x1ec
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	d1ca      	bne.n	8000b6e <mfs_bank_check_header.constprop.0+0xe>
      (mfsp->buffer.bhdr.hdr32[2] == mfsp->config->erased) &&
 8000bd8:	f8d1 01f0 	ldr.w	r0, [r1, #496]	; 0x1f0
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	d1c6      	bne.n	8000b6e <mfs_bank_check_header.constprop.0+0xe>
    return MFS_BANK_ERASED;
 8000be0:	2000      	movs	r0, #0
 8000be2:	4770      	bx	lr
 8000be4:	20000ec0 	.word	0x20000ec0
 8000be8:	ec705ade 	.word	0xec705ade
 8000bec:	f0339cc5 	.word	0xf0339cc5
 8000bf0:	200010a4 	.word	0x200010a4
 8000bf4:	080051a8 	.word	0x080051a8
	...

08000c00 <_ZN6Pt20018deselectEv>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c00:	2320      	movs	r3, #32
	void select() override {
		spiSelect(driver);
	}

	void deselect() override {
		spiUnselect(driver);
 8000c02:	6902      	ldr	r2, [r0, #16]
 8000c04:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8000c08:	2301      	movs	r3, #1
 8000c0a:	6852      	ldr	r2, [r2, #4]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	68d0      	ldr	r0, [r2, #12]
 8000c10:	6892      	ldr	r2, [r2, #8]
 8000c12:	4083      	lsls	r3, r0
 8000c14:	6113      	str	r3, [r2, #16]
 8000c16:	f381 8811 	msr	BASEPRI, r1
	}
 8000c1a:	4770      	bx	lr
 8000c1c:	0000      	movs	r0, r0
	...

08000c20 <_ZN6Pt20018sendRecvEt>:
 * @param[in] frame     the data frame to send over the SPI bus
 * @return              The received data frame from the SPI bus.
 */
uint16_t spi_lld_polled_exchange(SPIDriver *spip, uint16_t frame) {

  spip->spi->DR = frame;
 8000c20:	6903      	ldr	r3, [r0, #16]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	07d2      	lsls	r2, r2, #31
 8000c2a:	d5fc      	bpl.n	8000c26 <_ZN6Pt20018sendRecvEt+0x6>
    ;
  return spip->spi->DR;
 8000c2c:	68d8      	ldr	r0, [r3, #12]

	uint16_t sendRecv(uint16_t tx) override {
		return spiPolledExchange(driver, tx);
	}
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
	...

08000c40 <_ZN6Pt20016selectEv>:
 8000c40:	2320      	movs	r3, #32
		spiSelect(driver);
 8000c42:	6902      	ldr	r2, [r0, #16]
 8000c44:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	6852      	ldr	r2, [r2, #4]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	68d0      	ldr	r0, [r2, #12]
 8000c50:	6892      	ldr	r2, [r2, #8]
 8000c52:	4083      	lsls	r3, r0
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	f381 8811 	msr	BASEPRI, r1
	}
 8000c5a:	4770      	bx	lr
 8000c5c:	0000      	movs	r0, r0
	...

08000c60 <_ZN10Pt2001Base8setupSpiEv.constprop.0>:

static bool validateChipId(uint16_t id) {
	return (id >> 8) == 0x9D;
}

void Pt2001Base::setupSpi() {
 8000c60:	b410      	push	{r4}
 8000c62:	2320      	movs	r3, #32
		spiSelect(driver);
 8000c64:	6902      	ldr	r2, [r0, #16]
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	68d4      	ldr	r4, [r2, #12]
 8000c72:	6892      	ldr	r2, [r2, #8]
 8000c74:	40a3      	lsls	r3, r4
 8000c76:	6153      	str	r3, [r2, #20]
 8000c78:	f381 8811 	msr	BASEPRI, r1
  spip->spi->DR = frame;
 8000c7c:	f647 71e1 	movw	r1, #32737	; 0x7fe1
		return spiPolledExchange(driver, tx);
 8000c80:	6902      	ldr	r2, [r0, #16]
 8000c82:	69d3      	ldr	r3, [r2, #28]
 8000c84:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000c86:	6899      	ldr	r1, [r3, #8]
 8000c88:	07c9      	lsls	r1, r1, #31
 8000c8a:	d5fc      	bpl.n	8000c86 <_ZN10Pt2001Base8setupSpiEv.constprop.0+0x26>
  spip->spi->DR = frame;
 8000c8c:	2104      	movs	r1, #4
  return spip->spi->DR;
 8000c8e:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8000c90:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000c92:	6899      	ldr	r1, [r3, #8]
 8000c94:	07cc      	lsls	r4, r1, #31
 8000c96:	d5fc      	bpl.n	8000c92 <_ZN10Pt2001Base8setupSpiEv.constprop.0+0x32>
  spip->spi->DR = frame;
 8000c98:	f643 1101 	movw	r1, #14593	; 0x3901
  return spip->spi->DR;
 8000c9c:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8000c9e:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000ca0:	6899      	ldr	r1, [r3, #8]
 8000ca2:	07c8      	lsls	r0, r1, #31
 8000ca4:	d5fc      	bpl.n	8000ca0 <_ZN10Pt2001Base8setupSpiEv.constprop.0+0x40>
  spip->spi->DR = frame;
 8000ca6:	219f      	movs	r1, #159	; 0x9f
  return spip->spi->DR;
 8000ca8:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8000caa:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	07c9      	lsls	r1, r1, #31
 8000cb0:	d5fc      	bpl.n	8000cac <_ZN10Pt2001Base8setupSpiEv.constprop.0+0x4c>
  return spip->spi->DR;
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000cba:	2301      	movs	r3, #1
 8000cbc:	6852      	ldr	r2, [r2, #4]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	68d0      	ldr	r0, [r2, #12]
 8000cc2:	6892      	ldr	r2, [r2, #8]
 8000cc4:	4083      	lsls	r3, r0
 8000cc6:	6113      	str	r3, [r2, #16]
 8000cc8:	f381 8811 	msr	BASEPRI, r1
	send(0x3901);
	// Mode A + Watchdog timer full
	//send(0x001F);
	send(0x009F); // + fast slew rate on miso
	deselect();
}
 8000ccc:	bc10      	pop	{r4}
 8000cce:	4770      	bx	lr

08000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>:
	deselect();
	return readValue;
}

// Update a single word in Data RAM
void Pt2001Base::writeDram(MC33816Mem addr, uint16_t data) {
 8000cd0:	b470      	push	{r4, r5, r6}
	uint16_t addrInt = static_cast<uint16_t>(addr);
 8000cd2:	b289      	uxth	r1, r1
		spiSelect(driver);
 8000cd4:	6904      	ldr	r4, [r0, #16]
 8000cd6:	2320      	movs	r3, #32
 8000cd8:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000cdc:	2301      	movs	r3, #1
 8000cde:	6864      	ldr	r4, [r4, #4]
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	68e6      	ldr	r6, [r4, #12]
 8000ce4:	68a4      	ldr	r4, [r4, #8]
 8000ce6:	40b3      	lsls	r3, r6
 8000ce8:	6163      	str	r3, [r4, #20]
 8000cea:	f385 8811 	msr	BASEPRI, r5
  spip->spi->DR = frame;
 8000cee:	f647 74e1 	movw	r4, #32737	; 0x7fe1
		return spiPolledExchange(driver, tx);
 8000cf2:	6900      	ldr	r0, [r0, #16]
 8000cf4:	69c3      	ldr	r3, [r0, #28]
 8000cf6:	60dc      	str	r4, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000cf8:	689c      	ldr	r4, [r3, #8]
 8000cfa:	07e5      	lsls	r5, r4, #31
 8000cfc:	d5fc      	bpl.n	8000cf8 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0+0x28>
  spip->spi->DR = frame;
 8000cfe:	2404      	movs	r4, #4
  return spip->spi->DR;
 8000d00:	68dd      	ldr	r5, [r3, #12]
  spip->spi->DR = frame;
 8000d02:	60dc      	str	r4, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000d04:	689c      	ldr	r4, [r3, #8]
 8000d06:	07e4      	lsls	r4, r4, #31
 8000d08:	d5fc      	bpl.n	8000d04 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0+0x34>
	select();
	// Select Channel command, Common Page
	send(0x7FE1);
	send(0x0004);
	// write (MSB=0) at data ram x9 (SCV_I_Hold), and 1 word
	send((addrInt << 5) + 1);
 8000d0a:	0149      	lsls	r1, r1, #5
 8000d0c:	3101      	adds	r1, #1
  spip->spi->DR = frame;
 8000d0e:	b289      	uxth	r1, r1
  return spip->spi->DR;
 8000d10:	68dc      	ldr	r4, [r3, #12]
  spip->spi->DR = frame;
 8000d12:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000d14:	6899      	ldr	r1, [r3, #8]
 8000d16:	07c9      	lsls	r1, r1, #31
 8000d18:	d5fc      	bpl.n	8000d14 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0+0x44>
  return spip->spi->DR;
 8000d1a:	68d9      	ldr	r1, [r3, #12]
  spip->spi->DR = frame;
 8000d1c:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	07d2      	lsls	r2, r2, #31
 8000d22:	d5fc      	bpl.n	8000d1e <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0+0x4e>
  return spip->spi->DR;
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2320      	movs	r3, #32
 8000d28:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	6842      	ldr	r2, [r0, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	68d0      	ldr	r0, [r2, #12]
 8000d34:	6892      	ldr	r2, [r2, #8]
 8000d36:	4083      	lsls	r3, r0
 8000d38:	6113      	str	r3, [r2, #16]
 8000d3a:	f381 8811 	msr	BASEPRI, r1
	send(data);

	deselect();
}
 8000d3e:	bc70      	pop	{r4, r5, r6}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
	...

08000d50 <_ZN10Pt2001Base17clearDriverStatusEv.constprop.0>:

	deselect();
	return true;
}

void Pt2001Base::clearDriverStatus(){
 8000d50:	b510      	push	{r4, lr}
 8000d52:	4604      	mov	r4, r0
	// Note: There is a config at 0x1CE & 1 that can reset this status config register on read
	// otherwise the reload/recheck occurs with this write
	// resetting it is necessary to clear default reset behavoir, as well as if an issue has been resolved
	setupSpi(); // ensure on common page?
 8000d54:	f7ff ff84 	bl	8000c60 <_ZN10Pt2001Base8setupSpiEv.constprop.0>
		spiSelect(driver);
 8000d58:	6922      	ldr	r2, [r4, #16]
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000d60:	2301      	movs	r3, #1
 8000d62:	6852      	ldr	r2, [r2, #4]
 8000d64:	2100      	movs	r1, #0
 8000d66:	68d0      	ldr	r0, [r2, #12]
 8000d68:	6892      	ldr	r2, [r2, #8]
 8000d6a:	4083      	lsls	r3, r0
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	f381 8811 	msr	BASEPRI, r1
  spip->spi->DR = frame;
 8000d72:	f643 2141 	movw	r1, #14913	; 0x3a41
		return spiPolledExchange(driver, tx);
 8000d76:	6922      	ldr	r2, [r4, #16]
 8000d78:	69d3      	ldr	r3, [r2, #28]
 8000d7a:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000d7c:	6899      	ldr	r1, [r3, #8]
 8000d7e:	07c8      	lsls	r0, r1, #31
 8000d80:	d5fc      	bpl.n	8000d7c <_ZN10Pt2001Base17clearDriverStatusEv.constprop.0+0x2c>
  spip->spi->DR = frame;
 8000d82:	2100      	movs	r1, #0
  return spip->spi->DR;
 8000d84:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8000d86:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000d88:	6899      	ldr	r1, [r3, #8]
 8000d8a:	07c9      	lsls	r1, r1, #31
 8000d8c:	d5fc      	bpl.n	8000d88 <_ZN10Pt2001Base17clearDriverStatusEv.constprop.0+0x38>
  return spip->spi->DR;
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2320      	movs	r3, #32
 8000d92:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000d96:	2301      	movs	r3, #1
 8000d98:	6852      	ldr	r2, [r2, #4]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	68d0      	ldr	r0, [r2, #12]
 8000d9e:	6892      	ldr	r2, [r2, #8]
 8000da0:	4083      	lsls	r3, r0
 8000da2:	6113      	str	r3, [r2, #16]
 8000da4:	f381 8811 	msr	BASEPRI, r1
	select();
	send((0x0000 | 0x1D2 << 5) + 1); // write, location, one word
	send(0x0000); // anything to clear
	deselect();
}
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	bf00      	nop
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>:

uint16_t Pt2001Base::readStatus(int reg) {
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4604      	mov	r4, r0
 8000db4:	460d      	mov	r5, r1
	setupSpi(); // ensure on common page?
 8000db6:	f7ff ff53 	bl	8000c60 <_ZN10Pt2001Base8setupSpiEv.constprop.0>
		spiSelect(driver);
 8000dba:	6922      	ldr	r2, [r4, #16]
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6852      	ldr	r2, [r2, #4]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	68d0      	ldr	r0, [r2, #12]
 8000dca:	6892      	ldr	r2, [r2, #8]
 8000dcc:	4083      	lsls	r3, r0
 8000dce:	6153      	str	r3, [r2, #20]
 8000dd0:	f381 8811 	msr	BASEPRI, r1
	select();
	send((0x8000 | reg << 5) + 1);
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_ZN10Pt2001Base10readStatusEi.constprop.0+0x68>)
		return spiPolledExchange(driver, tx);
 8000dd6:	6921      	ldr	r1, [r4, #16]
 8000dd8:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
  spip->spi->DR = frame;
 8000ddc:	69ca      	ldr	r2, [r1, #28]
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	60d3      	str	r3, [r2, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000de4:	6893      	ldr	r3, [r2, #8]
 8000de6:	07d8      	lsls	r0, r3, #31
 8000de8:	d5fc      	bpl.n	8000de4 <_ZN10Pt2001Base10readStatusEi.constprop.0+0x34>
  spip->spi->DR = frame;
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  return spip->spi->DR;
 8000dee:	68d0      	ldr	r0, [r2, #12]
  spip->spi->DR = frame;
 8000df0:	60d3      	str	r3, [r2, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8000df2:	6893      	ldr	r3, [r2, #8]
 8000df4:	07db      	lsls	r3, r3, #31
 8000df6:	d5fc      	bpl.n	8000df2 <_ZN10Pt2001Base10readStatusEi.constprop.0+0x42>
  return spip->spi->DR;
 8000df8:	68d0      	ldr	r0, [r2, #12]
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000e00:	2301      	movs	r3, #1
 8000e02:	684a      	ldr	r2, [r1, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	68d4      	ldr	r4, [r2, #12]
 8000e08:	6892      	ldr	r2, [r2, #8]
 8000e0a:	40a3      	lsls	r3, r4
 8000e0c:	6113      	str	r3, [r2, #16]
 8000e0e:	f381 8811 	msr	BASEPRI, r1
	uint16_t driverStatus = recv();
	deselect();
	return driverStatus;
}
 8000e12:	b280      	uxth	r0, r0
 8000e14:	bd38      	pop	{r3, r4, r5, pc}
 8000e16:	bf00      	nop
 8000e18:	ffff8000 	.word	0xffff8000
 8000e1c:	00000000 	.word	0x00000000

08000e20 <wakeup>:
 8000e20:	2320      	movs	r3, #32
 8000e22:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000e26:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d80d      	bhi.n	8000e4a <wakeup+0x2a>
 8000e2e:	e8df f003 	tbb	[pc, r3]
 8000e32:	0c27      	.short	0x0c27
 8000e34:	0408230c 	.word	0x0408230c
 8000e38:	080c      	.short	0x080c
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000e3a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000e3c:	6893      	ldr	r3, [r2, #8]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000e42:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000e46:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8000e48:	605a      	str	r2, [r3, #4]
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8000e4a:	2200      	movs	r2, #0
static void wakeup(void *p) {
 8000e4c:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
 8000e4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
  } while (pqp->prio >= p->prio);
 8000e52:	6881      	ldr	r1, [r0, #8]
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <wakeup+0x68>)
 8000e56:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000e58:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 8000e5c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	428a      	cmp	r2, r1
 8000e62:	d2fb      	bcs.n	8000e5c <wakeup+0x3c>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8000e6c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8000e6e:	6058      	str	r0, [r3, #4]
 8000e70:	f381 8811 	msr	BASEPRI, r1
}
 8000e74:	bc10      	pop	{r4}
 8000e76:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e7c:	601a      	str	r2, [r3, #0]
    break;
 8000e7e:	e7e4      	b.n	8000e4a <wakeup+0x2a>
 8000e80:	2300      	movs	r3, #0
 8000e82:	f383 8811 	msr	BASEPRI, r3
 8000e86:	4770      	bx	lr
 8000e88:	200010d0 	.word	0x200010d0
 8000e8c:	00000000 	.word	0x00000000

08000e90 <_ZN6Pt20017onErrorEPKc>:
	}

	// Print out an error message
	void onError(const char* why) override {
		// efiPrintf("PT2001 error: %s", why);
	}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
	...

08000ea0 <_ZNK6Pt200115getPumpTholdTotEv>:
		return getConfiguration()->PumpTholdTot;
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <_ZNK6Pt200115getPumpTholdTotEv+0x8>)
	}
 8000ea2:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20001284 	.word	0x20001284
 8000eac:	00000000 	.word	0x00000000

08000eb0 <_ZNK6Pt200115getPumpTholdOffEv>:
		return getConfiguration()->PumpTholdOff;
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <_ZNK6Pt200115getPumpTholdOffEv+0x8>)
	}
 8000eb2:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20001284 	.word	0x20001284
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <_ZNK6Pt200118getPumpHoldCurrentEv>:
		return getConfiguration()->PumpHoldCurrent;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <_ZNK6Pt200118getPumpHoldCurrentEv+0x8>)
	}
 8000ec2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20001284 	.word	0x20001284
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <_ZNK6Pt200118getPumpPeakCurrentEv>:
		return getConfiguration()->PumpPeakCurrent;
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <_ZNK6Pt200118getPumpPeakCurrentEv+0x8>)
	}
 8000ed2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20001284 	.word	0x20001284
 8000edc:	00000000 	.word	0x00000000

08000ee0 <_ZNK6Pt200112getTBoostMaxEv>:
		return getConfiguration()->TBoostMax;
 8000ee0:	4b01      	ldr	r3, [pc, #4]	; (8000ee8 <_ZNK6Pt200112getTBoostMaxEv+0x8>)
	}
 8000ee2:	8a58      	ldrh	r0, [r3, #18]
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20001284 	.word	0x20001284
 8000eec:	00000000 	.word	0x00000000

08000ef0 <_ZNK6Pt200112getTBoostMinEv>:
		return getConfiguration()->TBoostMin;
 8000ef0:	4b01      	ldr	r3, [pc, #4]	; (8000ef8 <_ZNK6Pt200112getTBoostMinEv+0x8>)
	}
 8000ef2:	8a18      	ldrh	r0, [r3, #16]
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20001284 	.word	0x20001284
 8000efc:	00000000 	.word	0x00000000

08000f00 <_ZNK6Pt200111getTHoldTotEv>:
		return getConfiguration()->THoldDuration;
 8000f00:	4b01      	ldr	r3, [pc, #4]	; (8000f08 <_ZNK6Pt200111getTHoldTotEv+0x8>)
	}
 8000f02:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20001284 	.word	0x20001284
 8000f0c:	00000000 	.word	0x00000000

08000f10 <_ZNK6Pt200111getTholdOffEv>:
		return getConfiguration()->TholdOff;
 8000f10:	4b01      	ldr	r3, [pc, #4]	; (8000f18 <_ZNK6Pt200111getTholdOffEv+0x8>)
	}
 8000f12:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20001284 	.word	0x20001284
 8000f1c:	00000000 	.word	0x00000000

08000f20 <_ZNK6Pt200110getTbypassEv>:
		return getConfiguration()->Tbypass;
 8000f20:	4b01      	ldr	r3, [pc, #4]	; (8000f28 <_ZNK6Pt200110getTbypassEv+0x8>)
	}
 8000f22:	8b98      	ldrh	r0, [r3, #28]
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20001284 	.word	0x20001284
 8000f2c:	00000000 	.word	0x00000000

08000f30 <_ZNK6Pt200111getTpeakTotEv>:
		return getConfiguration()->TpeakDuration;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <_ZNK6Pt200111getTpeakTotEv+0x8>)
	}
 8000f32:	8b18      	ldrh	r0, [r3, #24]
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20001284 	.word	0x20001284
 8000f3c:	00000000 	.word	0x00000000

08000f40 <_ZNK6Pt200111getTpeakOffEv>:
		return getConfiguration()->TpeakOff;
 8000f40:	4b01      	ldr	r3, [pc, #4]	; (8000f48 <_ZNK6Pt200111getTpeakOffEv+0x8>)
	}
 8000f42:	8b58      	ldrh	r0, [r3, #26]
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20001284 	.word	0x20001284
 8000f4c:	00000000 	.word	0x00000000

08000f50 <_ZNK6Pt200114getHoldCurrentEv>:
		return getConfiguration()->HoldCurrent;
 8000f50:	4b01      	ldr	r3, [pc, #4]	; (8000f58 <_ZNK6Pt200114getHoldCurrentEv+0x8>)
	}
 8000f52:	6a18      	ldr	r0, [r3, #32]
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20001284 	.word	0x20001284
 8000f5c:	00000000 	.word	0x00000000

08000f60 <_ZNK6Pt200114getPeakCurrentEv>:
		return getConfiguration()->PeakCurrent;
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <_ZNK6Pt200114getPeakCurrentEv+0x8>)
	}
 8000f62:	6958      	ldr	r0, [r3, #20]
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20001284 	.word	0x20001284
 8000f6c:	00000000 	.word	0x00000000

08000f70 <_ZNK6Pt200115getBoostCurrentEv>:
		return getConfiguration()->BoostCurrent;
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <_ZNK6Pt200115getBoostCurrentEv+0x8>)
	}
 8000f72:	68d8      	ldr	r0, [r3, #12]
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20001284 	.word	0x20001284
 8000f7c:	00000000 	.word	0x00000000

08000f80 <_ZNK6Pt200115getBoostVoltageEv>:
	float getBoostVoltage() const override {
 8000f80:	b508      	push	{r3, lr}
		return getConfiguration()->BoostVoltage;
 8000f82:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <_ZNK6Pt200115getBoostVoltageEv+0xc>)
 8000f84:	8918      	ldrh	r0, [r3, #8]
 8000f86:	f7ff fae3 	bl	8000550 <__aeabi_ui2f>
	}
 8000f8a:	bd08      	pop	{r3, pc}
 8000f8c:	20001284 	.word	0x20001284

08000f90 <_ZN6Pt20019setResetBEb>:
			palSetPad(GPIOB, 5);
 8000f90:	2220      	movs	r2, #32
 8000f92:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <_ZN6Pt20019setResetBEb+0x10>)
		if (state) {
 8000f94:	b109      	cbz	r1, 8000f9a <_ZN6Pt20019setResetBEb+0xa>
			palSetPad(GPIOB, 5);
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	4770      	bx	lr
			palClearPad(GPIOB, 5);
 8000f9a:	615a      	str	r2, [r3, #20]
	}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40010c00 	.word	0x40010c00
	...

08000fb0 <_ZN6Pt200110setDriveENEb>:
			palSetPad(GPIOB, 4);
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <_ZN6Pt200110setDriveENEb+0x10>)
		if (state) {
 8000fb4:	b109      	cbz	r1, 8000fba <_ZN6Pt200110setDriveENEb+0xa>
			palSetPad(GPIOB, 4);
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	4770      	bx	lr
			palClearPad(GPIOB, 4);
 8000fba:	615a      	str	r2, [r3, #20]
	}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40010c00 	.word	0x40010c00
	...

08000fd0 <_ZNK6Pt20019readFlag0Ev>:
		return palReadPad(GPIOB, 7);
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <_ZNK6Pt20019readFlag0Ev+0xc>)
 8000fd2:	6898      	ldr	r0, [r3, #8]
	}
 8000fd4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <_ZNK6Pt20018getVbattEv>:
	}
 8000fe0:	4800      	ldr	r0, [pc, #0]	; (8000fe4 <_ZNK6Pt20018getVbattEv+0x4>)
 8000fe2:	4770      	bx	lr
 8000fe4:	41400000 	.word	0x41400000
	...

08000ff0 <chCoreAllocFromTop>:
 8000ff0:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000ff2:	b430      	push	{r4, r5}
 8000ff4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <chCoreAllocFromTop+0x38>)
 8000ffa:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ffc:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001000:	1a28      	subs	r0, r5, r0
 8001002:	4008      	ands	r0, r1
  prev = p - offset;
 8001004:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001006:	42a2      	cmp	r2, r4
 8001008:	d307      	bcc.n	800101a <chCoreAllocFromTop+0x2a>
 800100a:	4295      	cmp	r5, r2
 800100c:	d305      	bcc.n	800101a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	2300      	movs	r3, #0
 8001012:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001016:	bc30      	pop	{r4, r5}
 8001018:	4770      	bx	lr
    return NULL;
 800101a:	2000      	movs	r0, #0
 800101c:	2300      	movs	r3, #0
 800101e:	f383 8811 	msr	BASEPRI, r3
}
 8001022:	bc30      	pop	{r4, r5}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20001268 	.word	0x20001268
 800102c:	00000000 	.word	0x00000000

08001030 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8001030:	4a02      	ldr	r2, [pc, #8]	; (800103c <notify2+0xc>)
 8001032:	68d3      	ldr	r3, [r2, #12]
 8001034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001038:	60d3      	str	r3, [r2, #12]
}
 800103a:	4770      	bx	lr
 800103c:	40004400 	.word	0x40004400

08001040 <_ZL13countTxResultl.part.0>:
int canWriteNotOk = 0;
static char printBuffer[200];

static void countTxResult(msg_t msg) {
	if (msg == MSG_OK) {
		canWriteOk++;
 8001040:	4a02      	ldr	r2, [pc, #8]	; (800104c <_ZL13countTxResultl.part.0+0xc>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	6013      	str	r3, [r2, #0]
	} else {
		canWriteNotOk++;
	}
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200010cc 	.word	0x200010cc

08001050 <_get.lto_priv.1>:

static msg_t _get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 8001050:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d005      	beq.n	8001064 <_get.lto_priv.1+0x14>
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 8001058:	6841      	ldr	r1, [r0, #4]
  msp->offset += 1;
 800105a:	1c5a      	adds	r2, r3, #1
  b = *(msp->buffer + msp->offset);
 800105c:	5ccb      	ldrb	r3, [r1, r3]
  msp->offset += 1;
 800105e:	6102      	str	r2, [r0, #16]
  return b;
 8001060:	4618      	mov	r0, r3
 8001062:	4770      	bx	lr
    return MSG_RESET;
 8001064:	f06f 0001 	mvn.w	r0, #1
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <_put.lto_priv.1>:
  if (msp->size - msp->eos <= 0)
 8001070:	68c2      	ldr	r2, [r0, #12]
static msg_t _put(void *ip, uint8_t b) {
 8001072:	4603      	mov	r3, r0
  if (msp->size - msp->eos <= 0)
 8001074:	6880      	ldr	r0, [r0, #8]
 8001076:	4290      	cmp	r0, r2
 8001078:	d008      	beq.n	800108c <_put.lto_priv.1+0x1c>
static msg_t _put(void *ip, uint8_t b) {
 800107a:	b410      	push	{r4}
  *(msp->buffer + msp->eos) = b;
 800107c:	685c      	ldr	r4, [r3, #4]
  return MSG_OK;
 800107e:	2000      	movs	r0, #0
  *(msp->buffer + msp->eos) = b;
 8001080:	54a1      	strb	r1, [r4, r2]
  msp->eos += 1;
 8001082:	68da      	ldr	r2, [r3, #12]
}
 8001084:	bc10      	pop	{r4}
  msp->eos += 1;
 8001086:	3201      	adds	r2, #1
 8001088:	60da      	str	r2, [r3, #12]
}
 800108a:	4770      	bx	lr
    return MSG_RESET;
 800108c:	f06f 0001 	mvn.w	r0, #1
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
	...

080010a0 <_port_irq_epilogue>:
 80010a0:	2320      	movs	r3, #32
 80010a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <_port_irq_epilogue+0x3c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80010ae:	d102      	bne.n	80010b6 <_port_irq_epilogue+0x16>
 80010b0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80010b4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80010b6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80010ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80010be:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80010c0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80010c2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <_port_irq_epilogue+0x40>)
 80010c8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 80010ca:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80010cc:	6889      	ldr	r1, [r1, #8]
 80010ce:	6892      	ldr	r2, [r2, #8]
 80010d0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80010d2:	bf8c      	ite	hi
 80010d4:	4a03      	ldrhi	r2, [pc, #12]	; (80010e4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80010d6:	4a04      	ldrls	r2, [pc, #16]	; (80010e8 <_port_irq_epilogue+0x48>)
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	200010d0 	.word	0x200010d0
 80010e4:	08000273 	.word	0x08000273
 80010e8:	08000276 	.word	0x08000276
 80010ec:	00000000 	.word	0x00000000

080010f0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80010f2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80010f4:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80010f8:	4249      	negs	r1, r1
 80010fa:	1a10      	subs	r0, r2, r0
 80010fc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80010fe:	42a0      	cmp	r0, r4
 8001100:	d304      	bcc.n	800110c <chCoreAllocAlignedI+0x1c>
 8001102:	4282      	cmp	r2, r0
 8001104:	d302      	bcc.n	800110c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001106:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8001108:	6058      	str	r0, [r3, #4]
 800110a:	4770      	bx	lr
    return NULL;
 800110c:	2000      	movs	r0, #0
 800110e:	bc10      	pop	{r4}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20001268 	.word	0x20001268
	...

08001120 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <chTMStopMeasurementX+0x3c>)
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <chTMStopMeasurementX+0x40>)
 8001124:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8001126:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 8001128:	6882      	ldr	r2, [r0, #8]
 800112a:	1a5b      	subs	r3, r3, r1
 800112c:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 800112e:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001130:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 8001132:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8001136:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8001138:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 800113a:	18e4      	adds	r4, r4, r3
  tmp->last = (now - tmp->last) - offset;
 800113c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 8001140:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8001142:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001146:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001148:	bf88      	it	hi
 800114a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800114c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800114e:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8001152:	bc30      	pop	{r4, r5}
    tmp->best = tmp->last;
 8001154:	bf38      	it	cc
 8001156:	6003      	strcc	r3, [r0, #0]
}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200010d0 	.word	0x200010d0
 8001160:	e0001000 	.word	0xe0001000
	...

08001170 <chTMStartMeasurementX>:
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <chTMStartMeasurementX+0x8>)
 8001172:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001174:	6083      	str	r3, [r0, #8]
}
 8001176:	4770      	bx	lr
 8001178:	e0001000 	.word	0xe0001000
 800117c:	00000000 	.word	0x00000000

08001180 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001180:	2200      	movs	r2, #0
  } while (pqp->prio >= p->prio);
 8001182:	6881      	ldr	r1, [r0, #8]
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <chSchReadyI+0x20>)
 8001186:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 800118a:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	428a      	cmp	r2, r1
 8001190:	d2fb      	bcs.n	800118a <chSchReadyI+0xa>
  p->prev       = pqp->prev;
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001198:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800119a:	6058      	str	r0, [r3, #4]
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200010d0 	.word	0x200010d0
	...

080011b0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4604      	mov	r4, r0
  return (bool)(qp->next != qp);
 80011b4:	6800      	ldr	r0, [r0, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 80011b6:	4284      	cmp	r4, r0
 80011b8:	d009      	beq.n	80011ce <chThdDequeueAllI.constprop.0+0x1e>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80011ba:	2500      	movs	r5, #0
  qp->next       = p->next;
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 80011c0:	605c      	str	r4, [r3, #4]
 80011c2:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80011c4:	f7ff ffdc 	bl	8001180 <chSchReadyI>
  return (bool)(qp->next != qp);
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	42a0      	cmp	r0, r4
 80011cc:	d1f6      	bne.n	80011bc <chThdDequeueAllI.constprop.0+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80011ce:	bd38      	pop	{r3, r4, r5, pc}

080011d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80011d2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80011d4:	42a0      	cmp	r0, r4
 80011d6:	d021      	beq.n	800121c <chEvtBroadcastFlagsI+0x4c>
 80011d8:	4607      	mov	r7, r0
 80011da:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80011dc:	2600      	movs	r6, #0
 80011de:	e004      	b.n	80011ea <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80011e0:	2a0b      	cmp	r2, #11
 80011e2:	d01c      	beq.n	800121e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 80011e4:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80011e6:	42a7      	cmp	r7, r4
 80011e8:	d018      	beq.n	800121c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 80011ea:	68e3      	ldr	r3, [r4, #12]
 80011ec:	432b      	orrs	r3, r5
 80011ee:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80011f0:	b115      	cbz	r5, 80011f8 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80011f2:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80011f4:	421d      	tst	r5, r3
 80011f6:	d0f5      	beq.n	80011e4 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 80011f8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80011fc:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80011fe:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001202:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001204:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001206:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001208:	d1ea      	bne.n	80011e0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800120a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800120c:	4213      	tst	r3, r2
 800120e:	d0e9      	beq.n	80011e4 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001210:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001212:	f7ff ffb5 	bl	8001180 <chSchReadyI>
    elp = elp->next;
 8001216:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001218:	42a7      	cmp	r7, r4
 800121a:	d1e6      	bne.n	80011ea <chEvtBroadcastFlagsI+0x1a>
}
 800121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800121e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001220:	ea32 0303 	bics.w	r3, r2, r3
 8001224:	d1de      	bne.n	80011e4 <chEvtBroadcastFlagsI+0x14>
 8001226:	e7f3      	b.n	8001210 <chEvtBroadcastFlagsI+0x40>
	...

08001230 <vt_set_alarm>:
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;

  if (delay < currdelta) {
 8001230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001234:	4299      	cmp	r1, r3
 8001236:	bf28      	it	cs
 8001238:	4619      	movcs	r1, r3
 800123a:	2902      	cmp	r1, #2
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 800123c:	4602      	mov	r2, r0
 800123e:	bf38      	it	cc
 8001240:	2102      	movcc	r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8001246:	1853      	adds	r3, r2, r1
 8001248:	b29b      	uxth	r3, r3
 800124a:	6343      	str	r3, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800124c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800124e:	b29b      	uxth	r3, r3
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001250:	1a9a      	subs	r2, r3, r2
 8001252:	b292      	uxth	r2, r2
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(now, newnow);
    if (nowdelta < delay) {
 8001254:	4291      	cmp	r1, r2
 8001256:	d80b      	bhi.n	8001270 <vt_set_alarm+0x40>
 8001258:	2102      	movs	r1, #2
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 800125a:	461a      	mov	r2, r3
 800125c:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 800125e:	440b      	add	r3, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001260:	b29b      	uxth	r3, r3
 8001262:	6343      	str	r3, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001264:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001266:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8001268:	1a9a      	subs	r2, r3, r2
 800126a:	b292      	uxth	r2, r2
    if (nowdelta < delay) {
 800126c:	428a      	cmp	r2, r1
 800126e:	d2f4      	bcs.n	800125a <vt_set_alarm+0x2a>
    now = newnow;
    delay = currdelta;
  }

  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
	...

08001280 <_idle_thread>:
}
 8001280:	e7fe      	b.n	8001280 <_idle_thread>
 8001282:	bf00      	nop
	...

08001290 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001290:	070b      	lsls	r3, r1, #28
 8001292:	d419      	bmi.n	80012c8 <uart_lld_serve_tx_end_irq+0x38>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001294:	230e      	movs	r3, #14
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001296:	b570      	push	{r4, r5, r6, lr}

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8001298:	2602      	movs	r6, #2
  dmaStreamDisable(uartp->dmatx);
 800129a:	6982      	ldr	r2, [r0, #24]
 800129c:	4604      	mov	r4, r0
 800129e:	6855      	ldr	r5, [r2, #4]
 80012a0:	6829      	ldr	r1, [r5, #0]
 80012a2:	f021 010f 	bic.w	r1, r1, #15
 80012a6:	6029      	str	r1, [r5, #0]
 80012a8:	7b55      	ldrb	r5, [r2, #13]
 80012aa:	6811      	ldr	r1, [r2, #0]
 80012ac:	40ab      	lsls	r3, r5
  _uart_tx1_isr_code(uartp);
 80012ae:	6842      	ldr	r2, [r0, #4]
  dmaStreamDisable(uartp->dmatx);
 80012b0:	604b      	str	r3, [r1, #4]
  _uart_tx1_isr_code(uartp);
 80012b2:	7046      	strb	r6, [r0, #1]
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	b123      	cbz	r3, 80012c2 <uart_lld_serve_tx_end_irq+0x32>
 80012b8:	4798      	blx	r3
 80012ba:	7863      	ldrb	r3, [r4, #1]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d000      	beq.n	80012c2 <uart_lld_serve_tx_end_irq+0x32>
}
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
  _uart_tx1_isr_code(uartp);
 80012c2:	2300      	movs	r3, #0
 80012c4:	7063      	strb	r3, [r4, #1]
}
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80012ca:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <uart_lld_serve_tx_end_irq+0x44>)
 80012cc:	4a02      	ldr	r2, [pc, #8]	; (80012d8 <uart_lld_serve_tx_end_irq+0x48>)
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d0:	e7fe      	b.n	80012d0 <uart_lld_serve_tx_end_irq+0x40>
 80012d2:	bf00      	nop
 80012d4:	200010d0 	.word	0x200010d0
 80012d8:	08004f20 	.word	0x08004f20
 80012dc:	00000000 	.word	0x00000000

080012e0 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80012e0:	f011 0208 	ands.w	r2, r1, #8
 80012e4:	d118      	bne.n	8001318 <uart_lld_serve_rx_end_irq+0x38>
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80012e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (uartp->rxstate == UART_RX_IDLE) {
 80012ea:	7883      	ldrb	r3, [r0, #2]
 80012ec:	4604      	mov	r4, r0
 80012ee:	b943      	cbnz	r3, 8001302 <uart_lld_serve_rx_end_irq+0x22>
    _uart_rx_idle_code(uartp);
 80012f0:	6843      	ldr	r3, [r0, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03b      	beq.n	8001370 <uart_lld_serve_rx_end_irq+0x90>
}
 80012f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _uart_rx_idle_code(uartp);
 80012fc:	8b81      	ldrh	r1, [r0, #28]
 80012fe:	b289      	uxth	r1, r1
 8001300:	4718      	bx	r3
  else if (uartp->config->rxhalf_cb != NULL) {
 8001302:	6845      	ldr	r5, [r0, #4]
 8001304:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001306:	b163      	cbz	r3, 8001322 <uart_lld_serve_rx_end_irq+0x42>
    if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001308:	074c      	lsls	r4, r1, #29
 800130a:	d433      	bmi.n	8001374 <uart_lld_serve_rx_end_irq+0x94>
    else if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800130c:	078a      	lsls	r2, r1, #30
 800130e:	d52f      	bpl.n	8001370 <uart_lld_serve_rx_end_irq+0x90>
}
 8001310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _uart_rx_half_isr_code(uartp, 1);
 8001314:	2101      	movs	r1, #1
 8001316:	4718      	bx	r3
 8001318:	b672      	cpsid	i
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <uart_lld_serve_rx_end_irq+0x9c>)
 800131c:	4a18      	ldr	r2, [pc, #96]	; (8001380 <uart_lld_serve_rx_end_irq+0xa0>)
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001320:	e7fe      	b.n	8001320 <uart_lld_serve_rx_end_irq+0x40>
    dmaStreamDisable(uartp->dmarx);
 8001322:	220e      	movs	r2, #14
    _uart_rx_complete_isr_code(uartp);
 8001324:	2702      	movs	r7, #2
    dmaStreamDisable(uartp->dmarx);
 8001326:	6941      	ldr	r1, [r0, #20]
 8001328:	684b      	ldr	r3, [r1, #4]
 800132a:	681e      	ldr	r6, [r3, #0]
 800132c:	f026 060f 	bic.w	r6, r6, #15
 8001330:	601e      	str	r6, [r3, #0]
 8001332:	7b4e      	ldrb	r6, [r1, #13]
 8001334:	6809      	ldr	r1, [r1, #0]
 8001336:	40b2      	lsls	r2, r6
 8001338:	604a      	str	r2, [r1, #4]
    _uart_rx_complete_isr_code(uartp);
 800133a:	7087      	strb	r7, [r0, #2]
 800133c:	68aa      	ldr	r2, [r5, #8]
 800133e:	b132      	cbz	r2, 800134e <uart_lld_serve_rx_end_irq+0x6e>
 8001340:	4790      	blx	r2
 8001342:	78a3      	ldrb	r3, [r4, #2]
 8001344:	42bb      	cmp	r3, r7
 8001346:	d113      	bne.n	8001370 <uart_lld_serve_rx_end_irq+0x90>
 8001348:	6963      	ldr	r3, [r4, #20]
 800134a:	6865      	ldr	r5, [r4, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	70a2      	strb	r2, [r4, #2]
  if (uartp->config->rxchar_cb == NULL)
 8001352:	68ea      	ldr	r2, [r5, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001354:	2101      	movs	r1, #1
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8001356:	2a00      	cmp	r2, #0
 8001358:	bf0c      	ite	eq
 800135a:	2220      	moveq	r2, #32
 800135c:	2222      	movne	r2, #34	; 0x22
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 800135e:	68e0      	ldr	r0, [r4, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001360:	341c      	adds	r4, #28
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8001362:	4302      	orrs	r2, r0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001364:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001366:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8001368:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      _uart_rx_half_isr_code(uartp, 0);
 8001374:	4611      	mov	r1, r2
}
 8001376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _uart_rx_half_isr_code(uartp, 0);
 800137a:	4718      	bx	r3
 800137c:	200010d0 	.word	0x200010d0
 8001380:	08004f20 	.word	0x08004f20
	...

08001390 <spi_lld_serve_tx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001390:	070b      	lsls	r3, r1, #28
 8001392:	d400      	bmi.n	8001396 <spi_lld_serve_tx_interrupt+0x6>
}
 8001394:	4770      	bx	lr
 8001396:	b672      	cpsid	i
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <spi_lld_serve_tx_interrupt+0x10>)
 800139a:	4a02      	ldr	r2, [pc, #8]	; (80013a4 <spi_lld_serve_tx_interrupt+0x14>)
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
 800139e:	e7fe      	b.n	800139e <spi_lld_serve_tx_interrupt+0xe>
 80013a0:	200010d0 	.word	0x200010d0
 80013a4:	08004f20 	.word	0x08004f20
	...

080013b0 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80013b2:	070c      	lsls	r4, r1, #28
 80013b4:	d448      	bmi.n	8001448 <spi_lld_serve_rx_interrupt+0x98>
  if (spip->config->circular) {
 80013b6:	6843      	ldr	r3, [r0, #4]
 80013b8:	4604      	mov	r4, r0
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d12c      	bne.n	800141a <spi_lld_serve_rx_interrupt+0x6a>
    dmaStreamDisable(spip->dmatx);
 80013c0:	220e      	movs	r2, #14
 80013c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    _spi_isr_code(spip);
 80013c4:	685e      	ldr	r6, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 80013c6:	686f      	ldr	r7, [r5, #4]
    dmaStreamDisable(spip->dmarx);
 80013c8:	6a03      	ldr	r3, [r0, #32]
    dmaStreamDisable(spip->dmatx);
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	f021 010f 	bic.w	r1, r1, #15
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	7b69      	ldrb	r1, [r5, #13]
 80013d4:	682f      	ldr	r7, [r5, #0]
 80013d6:	fa02 f101 	lsl.w	r1, r2, r1
    dmaStreamDisable(spip->dmarx);
 80013da:	685d      	ldr	r5, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 80013dc:	6079      	str	r1, [r7, #4]
    dmaStreamDisable(spip->dmarx);
 80013de:	6829      	ldr	r1, [r5, #0]
 80013e0:	681f      	ldr	r7, [r3, #0]
 80013e2:	f021 010f 	bic.w	r1, r1, #15
 80013e6:	6029      	str	r1, [r5, #0]
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	607a      	str	r2, [r7, #4]
    _spi_isr_code(spip);
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d02f      	beq.n	8001452 <spi_lld_serve_rx_interrupt+0xa2>
 80013f2:	2304      	movs	r3, #4
 80013f4:	7003      	strb	r3, [r0, #0]
 80013f6:	47b0      	blx	r6
 80013f8:	7823      	ldrb	r3, [r4, #0]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d029      	beq.n	8001452 <spi_lld_serve_rx_interrupt+0xa2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80013fe:	2320      	movs	r3, #32
 8001400:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001404:	68a0      	ldr	r0, [r4, #8]
 8001406:	b120      	cbz	r0, 8001412 <spi_lld_serve_rx_interrupt+0x62>
    *trp = NULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 800140c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800140e:	f7ff feb7 	bl	8001180 <chSchReadyI>
 8001412:	2300      	movs	r3, #0
 8001414:	f383 8811 	msr	BASEPRI, r3
}
 8001418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800141a:	074a      	lsls	r2, r1, #29
 800141c:	460d      	mov	r5, r1
 800141e:	d503      	bpl.n	8001428 <spi_lld_serve_rx_interrupt+0x78>
      _spi_isr_half_code(spip);
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f8      	beq.n	8001418 <spi_lld_serve_rx_interrupt+0x68>
 8001426:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8001428:	07ab      	lsls	r3, r5, #30
 800142a:	d5f5      	bpl.n	8001418 <spi_lld_serve_rx_interrupt+0x68>
      _spi_isr_full_code(spip);
 800142c:	6863      	ldr	r3, [r4, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f1      	beq.n	8001418 <spi_lld_serve_rx_interrupt+0x68>
 8001434:	2204      	movs	r2, #4
 8001436:	4620      	mov	r0, r4
 8001438:	7022      	strb	r2, [r4, #0]
 800143a:	4798      	blx	r3
 800143c:	7823      	ldrb	r3, [r4, #0]
 800143e:	2b04      	cmp	r3, #4
 8001440:	d1ea      	bne.n	8001418 <spi_lld_serve_rx_interrupt+0x68>
 8001442:	2303      	movs	r3, #3
 8001444:	7023      	strb	r3, [r4, #0]
}
 8001446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <spi_lld_serve_rx_interrupt+0xb4>)
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <spi_lld_serve_rx_interrupt+0xb8>)
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001450:	e7fe      	b.n	8001450 <spi_lld_serve_rx_interrupt+0xa0>
    _spi_isr_code(spip);
 8001452:	2302      	movs	r3, #2
 8001454:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001456:	2320      	movs	r3, #32
 8001458:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800145c:	68a0      	ldr	r0, [r4, #8]
 800145e:	2800      	cmp	r0, #0
 8001460:	d1d2      	bne.n	8001408 <spi_lld_serve_rx_interrupt+0x58>
 8001462:	e7d6      	b.n	8001412 <spi_lld_serve_rx_interrupt+0x62>
 8001464:	200010d0 	.word	0x200010d0
 8001468:	08004f20 	.word	0x08004f20
 800146c:	00000000 	.word	0x00000000

08001470 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8001470:	2a03      	cmp	r2, #3
                           iomode_t mode) {
 8001472:	b4f0      	push	{r4, r5, r6, r7}
  if (mode == PAL_MODE_INPUT_PULLUP)
 8001474:	d02d      	beq.n	80014d2 <_pal_lld_setgroupmode+0x62>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8001476:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8001478:	bf08      	it	eq
 800147a:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 800147c:	2300      	movs	r3, #0
  cfg = cfgtab[mode];
 800147e:	2708      	movs	r7, #8
  mh = ml = crh = crl = 0;
 8001480:	461d      	mov	r5, r3
 8001482:	461c      	mov	r4, r3
 8001484:	461e      	mov	r6, r3
  cfg = cfgtab[mode];
 8001486:	f8df c050 	ldr.w	ip, [pc, #80]	; 80014d8 <_pal_lld_setgroupmode+0x68>
 800148a:	f81c 2002 	ldrb.w	r2, [ip, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 800148e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ml <<= 4;
 8001492:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 8001496:	ea4f 1303 	mov.w	r3, r3, lsl #4
    mh <<= 4;
 800149a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crh <<= 4;
 800149e:	ea4f 1505 	mov.w	r5, r5, lsl #4
      ml |= 0xf;
 80014a2:	bf0c      	ite	eq
 80014a4:	f044 040f 	orreq.w	r4, r4, #15
    else
      crl |= cfg;
 80014a8:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 80014aa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 80014ae:	bf0c      	ite	eq
 80014b0:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 80014b4:	4315      	orrne	r5, r2
  for (i = 0; i < 8; i++) {
 80014b6:	3f01      	subs	r7, #1
    mask <<= 1;
 80014b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 80014bc:	d1e7      	bne.n	800148e <_pal_lld_setgroupmode+0x1e>
  }
  port->CRH = (port->CRH & mh) | crh;
 80014be:	6842      	ldr	r2, [r0, #4]
 80014c0:	4016      	ands	r6, r2
 80014c2:	4335      	orrs	r5, r6
 80014c4:	6045      	str	r5, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80014c6:	6802      	ldr	r2, [r0, #0]
 80014c8:	4014      	ands	r4, r2
 80014ca:	4323      	orrs	r3, r4
 80014cc:	6003      	str	r3, [r0, #0]
}
 80014ce:	bcf0      	pop	{r4, r5, r6, r7}
 80014d0:	4770      	bx	lr
    port->BSRR = mask;
 80014d2:	6101      	str	r1, [r0, #16]
 80014d4:	e7d2      	b.n	800147c <_pal_lld_setgroupmode+0xc>
 80014d6:	bf00      	nop
 80014d8:	0800517c 	.word	0x0800517c
 80014dc:	00000000 	.word	0x00000000

080014e0 <dmaStreamAllocI.part.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80014e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
 80014e4:	2601      	movs	r6, #1
    if ((dma.allocated_mask & mask) == 0U) {
 80014e6:	4d2b      	ldr	r5, [pc, #172]	; (8001594 <dmaStreamAllocI.part.0+0xb4>)
    uint32_t mask = (1U << i);
 80014e8:	fa06 f700 	lsl.w	r7, r6, r0
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80014ec:	4604      	mov	r4, r0
    if ((dma.allocated_mask & mask) == 0U) {
 80014ee:	6828      	ldr	r0, [r5, #0]
 80014f0:	4207      	tst	r7, r0

      return dmastp;
    }
  }

  return NULL;
 80014f2:	bf18      	it	ne
 80014f4:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 80014f6:	d001      	beq.n	80014fc <dmaStreamAllocI.part.0+0x1c>
}
 80014f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rccEnableDMA1(true);
 80014fc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001598 <dmaStreamAllocI.part.0+0xb8>
      dma.allocated_mask  |= mask;
 8001500:	4338      	orrs	r0, r7
 8001502:	6028      	str	r0, [r5, #0]
        rccEnableDMA1(true);
 8001504:	f8d8 0014 	ldr.w	r0, [r8, #20]
      dma.streams[i].func  = func;
 8001508:	eb04 0c06 	add.w	ip, r4, r6
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800150c:	f8df e08c 	ldr.w	lr, [pc, #140]	; 800159c <dmaStreamAllocI.part.0+0xbc>
      dma.streams[i].func  = func;
 8001510:	f845 203c 	str.w	r2, [r5, ip, lsl #3]
        rccEnableDMA1(true);
 8001514:	ea40 0906 	orr.w	r9, r0, r6
      dma.streams[i].param = param;
 8001518:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800151c:	eb0e 1004 	add.w	r0, lr, r4, lsl #4
      dma.streams[i].param = param;
 8001520:	f8cc 3004 	str.w	r3, [ip, #4]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8001524:	686b      	ldr	r3, [r5, #4]
        rccEnableDMA1(true);
 8001526:	f8c8 9014 	str.w	r9, [r8, #20]
 800152a:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800152e:	6882      	ldr	r2, [r0, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001530:	0124      	lsls	r4, r4, #4
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8001532:	4213      	tst	r3, r2
 8001534:	d014      	beq.n	8001560 <dmaStreamAllocI.part.0+0x80>
      dmaStreamDisable(dmastp);
 8001536:	210e      	movs	r1, #14
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001538:	f04f 0c00 	mov.w	ip, #0
      dmaStreamDisable(dmastp);
 800153c:	eb0e 0604 	add.w	r6, lr, r4
 8001540:	6872      	ldr	r2, [r6, #4]
 8001542:	f85e e004 	ldr.w	lr, [lr, r4]
 8001546:	7b74      	ldrb	r4, [r6, #13]
        dma.isr_mask |= mask;
 8001548:	433b      	orrs	r3, r7
      dmaStreamDisable(dmastp);
 800154a:	40a1      	lsls	r1, r4
 800154c:	6814      	ldr	r4, [r2, #0]
        dma.isr_mask |= mask;
 800154e:	606b      	str	r3, [r5, #4]
      dmaStreamDisable(dmastp);
 8001550:	f024 040f 	bic.w	r4, r4, #15
 8001554:	6014      	str	r4, [r2, #0]
 8001556:	f8ce 1004 	str.w	r1, [lr, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800155a:	f8c2 c000 	str.w	ip, [r2]
      return dmastp;
 800155e:	e7cb      	b.n	80014f8 <dmaStreamAllocI.part.0+0x18>
          nvicEnableVector(dmastp->vector, priority);
 8001560:	7bc2      	ldrb	r2, [r0, #15]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001562:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001564:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8001568:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800156c:	f102 4860 	add.w	r8, r2, #3758096384	; 0xe0000000
 8001570:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001574:	f002 021f 	and.w	r2, r2, #31
 8001578:	f50c 4c61 	add.w	ip, ip, #57600	; 0xe100
 800157c:	fa06 f202 	lsl.w	r2, r6, r2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	f508 4861 	add.w	r8, r8, #57600	; 0xe100
 8001586:	f888 1300 	strb.w	r1, [r8, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800158a:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800158e:	f8cc 2000 	str.w	r2, [ip]
 8001592:	e7d0      	b.n	8001536 <dmaStreamAllocI.part.0+0x56>
 8001594:	200012dc 	.word	0x200012dc
 8001598:	40021000 	.word	0x40021000
 800159c:	0800510c 	.word	0x0800510c

080015a0 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 80015a0:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80015a2:	6802      	ldr	r2, [r0, #0]
 80015a4:	7b43      	ldrb	r3, [r0, #13]
 80015a6:	6811      	ldr	r1, [r2, #0]
  if (flags & dmastp->channel->CCR) {
 80015a8:	6844      	ldr	r4, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80015aa:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 80015ac:	6824      	ldr	r4, [r4, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 80015ae:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 80015b2:	420c      	tst	r4, r1
 80015b4:	d00e      	beq.n	80015d4 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 80015b6:	7b80      	ldrb	r0, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 80015b8:	4c07      	ldr	r4, [pc, #28]	; (80015d8 <dmaServeInterrupt+0x38>)
 80015ba:	3001      	adds	r0, #1
 80015bc:	f854 5030 	ldr.w	r5, [r4, r0, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	6053      	str	r3, [r2, #4]
    if (dma.streams[selfindex].func) {
 80015c6:	b12d      	cbz	r5, 80015d4 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80015c8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80015cc:	462b      	mov	r3, r5
    }
  }
}
 80015ce:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 80015d0:	6840      	ldr	r0, [r0, #4]
 80015d2:	4718      	bx	r3
}
 80015d4:	bc30      	pop	{r4, r5}
 80015d6:	4770      	bx	lr
 80015d8:	200012dc 	.word	0x200012dc
 80015dc:	00000000 	.word	0x00000000

080015e0 <efl_lld_query_erase>:
flash_error_t efl_lld_query_erase(void *instance, uint32_t *wait_time) {
  EFlashDriver *devp = (EFlashDriver *)instance;
  flash_error_t err;

  /* If there is an erase in progress then the device must be checked.*/
  if (devp->state == FLASH_ERASE) {
 80015e0:	7902      	ldrb	r2, [r0, #4]
 80015e2:	2a05      	cmp	r2, #5
 80015e4:	d001      	beq.n	80015ea <efl_lld_query_erase+0xa>

      err = FLASH_BUSY_ERASING;
    }
  }
  else {
    err = FLASH_NO_ERROR;
 80015e6:	2000      	movs	r0, #0
 80015e8:	4770      	bx	lr
    if (stm32_flash_is_busy(devp) == 0U) {
 80015ea:	68c2      	ldr	r2, [r0, #12]
 80015ec:	4603      	mov	r3, r0
  return (eflp->flash->SR & FLASH_SR_BSY);
 80015ee:	68d0      	ldr	r0, [r2, #12]
    if (stm32_flash_is_busy(devp) == 0U) {
 80015f0:	f010 0001 	ands.w	r0, r0, #1
 80015f4:	d003      	beq.n	80015fe <efl_lld_query_erase+0x1e>
        *wait_time = (uint32_t)STM32_FLASH_WAIT_TIME_MS;
 80015f6:	2001      	movs	r0, #1
      if (wait_time != NULL) {
 80015f8:	b151      	cbz	r1, 8001610 <efl_lld_query_erase+0x30>
        *wait_time = (uint32_t)STM32_FLASH_WAIT_TIME_MS;
 80015fa:	6008      	str	r0, [r1, #0]
 80015fc:	4770      	bx	lr
flash_error_t efl_lld_query_erase(void *instance, uint32_t *wait_time) {
 80015fe:	b410      	push	{r4}
      devp->state = FLASH_READY;
 8001600:	2402      	movs	r4, #2
      devp->flash->CR &= ~(FLASH_CR_OPTER | FLASH_CR_OPTPG |
 8001602:	6911      	ldr	r1, [r2, #16]
 8001604:	f021 0136 	bic.w	r1, r1, #54	; 0x36
 8001608:	6111      	str	r1, [r2, #16]
      devp->state = FLASH_READY;
 800160a:	711c      	strb	r4, [r3, #4]
  }

  return err;
}
 800160c:	bc10      	pop	{r4}
 800160e:	4770      	bx	lr
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
	...

08001620 <efl_lld_start_erase_all>:
}
 8001620:	2007      	movs	r0, #7
 8001622:	4770      	bx	lr
	...

08001630 <efl_lld_program>:
                              size_t n, const uint8_t *pp) {
 8001630:	4684      	mov	ip, r0
  if (devp->state == FLASH_ERASE) {
 8001632:	7900      	ldrb	r0, [r0, #4]
 8001634:	2805      	cmp	r0, #5
 8001636:	d04c      	beq.n	80016d2 <efl_lld_program+0xa2>
                              size_t n, const uint8_t *pp) {
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
  eflp->flash->SR = 0x0000001FU;
 800163a:	201f      	movs	r0, #31
  devp->state = FLASH_PGM;
 800163c:	2404      	movs	r4, #4
  stm32_flash_clear_status(devp);
 800163e:	f8dc 600c 	ldr.w	r6, [ip, #12]
  devp->state = FLASH_PGM;
 8001642:	f88c 4004 	strb.w	r4, [ip, #4]
  eflp->flash->SR = 0x0000001FU;
 8001646:	60f0      	str	r0, [r6, #12]
  eflp->flash->CR |= FLASH_CR_PG;
 8001648:	6930      	ldr	r0, [r6, #16]
                              size_t n, const uint8_t *pp) {
 800164a:	b083      	sub	sp, #12
  eflp->flash->CR |= FLASH_CR_PG;
 800164c:	f040 0001 	orr.w	r0, r0, #1
 8001650:	6130      	str	r0, [r6, #16]
  while (n > 0U) {
 8001652:	b382      	cbz	r2, 80016b6 <efl_lld_program+0x86>
    line.hw[0] = 0xFFFFU;
 8001654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001658:	461d      	mov	r5, r3
                                    (offset & ~STM32_FLASH_LINE_MASK));
 800165a:	f021 0701 	bic.w	r7, r1, #1
    line.hw[0] = 0xFFFFU;
 800165e:	f8ad 0004 	strh.w	r0, [sp, #4]
    address = (volatile uint16_t *)(efl_lld_descriptor.address +
 8001662:	f107 6700 	add.w	r7, r7, #134217728	; 0x8000000
 8001666:	f001 0401 	and.w	r4, r1, #1
      line.b[offset & STM32_FLASH_LINE_MASK] = *pp;
 800166a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800166e:	f10d 0e08 	add.w	lr, sp, #8
 8001672:	4474      	add	r4, lr
      offset++;
 8001674:	3101      	adds	r1, #1
    while ((n > 0U) & ((offset & STM32_FLASH_LINE_MASK) != 0U));
 8001676:	3a01      	subs	r2, #1
      line.b[offset & STM32_FLASH_LINE_MASK] = *pp;
 8001678:	f804 3c04 	strb.w	r3, [r4, #-4]
      pp++;
 800167c:	462b      	mov	r3, r5
    while ((n > 0U) & ((offset & STM32_FLASH_LINE_MASK) != 0U));
 800167e:	f001 0401 	and.w	r4, r1, #1
 8001682:	d002      	beq.n	800168a <efl_lld_program+0x5a>
 8001684:	f011 0f01 	tst.w	r1, #1
 8001688:	d1ef      	bne.n	800166a <efl_lld_program+0x3a>
    address[0] = line.hw[0];
 800168a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 800168e:	803d      	strh	r5, [r7, #0]
  return (eflp->flash->SR & FLASH_SR_BSY);
 8001690:	68f4      	ldr	r4, [r6, #12]
  while (stm32_flash_is_busy(eflp) != 0U) {
 8001692:	07e4      	lsls	r4, r4, #31
 8001694:	d4fc      	bmi.n	8001690 <efl_lld_program+0x60>
  uint32_t sr = eflp->flash->SR;
 8001696:	68f4      	ldr	r4, [r6, #12]
  eflp->flash->SR = sr & 0x0000001FU;
 8001698:	f004 0e1f 	and.w	lr, r4, #31
  if ((sr & FLASH_SR_WRPRTERR) != 0U) {
 800169c:	f014 0f10 	tst.w	r4, #16
  eflp->flash->SR = sr & 0x0000001FU;
 80016a0:	f8c6 e00c 	str.w	lr, [r6, #12]
  if ((sr & FLASH_SR_WRPRTERR) != 0U) {
 80016a4:	d109      	bne.n	80016ba <efl_lld_program+0x8a>
  if ((sr & FLASH_SR_PGERR) != 0U) {
 80016a6:	0764      	lsls	r4, r4, #29
 80016a8:	d411      	bmi.n	80016ce <efl_lld_program+0x9e>
    if (address[0] != line.hw[0]) {
 80016aa:	883c      	ldrh	r4, [r7, #0]
 80016ac:	b2a4      	uxth	r4, r4
 80016ae:	42a5      	cmp	r5, r4
 80016b0:	d10d      	bne.n	80016ce <efl_lld_program+0x9e>
  while (n > 0U) {
 80016b2:	2a00      	cmp	r2, #0
 80016b4:	d1d0      	bne.n	8001658 <efl_lld_program+0x28>
    return FLASH_ERROR_PROGRAM; /* There is no error on erase.*/
 80016b6:	2000      	movs	r0, #0
 80016b8:	e000      	b.n	80016bc <efl_lld_program+0x8c>
    return FLASH_ERROR_HW_FAILURE;
 80016ba:	2006      	movs	r0, #6
  devp->state = FLASH_READY;
 80016bc:	2202      	movs	r2, #2
  eflp->flash->CR &= ~FLASH_CR_PG;
 80016be:	6933      	ldr	r3, [r6, #16]
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6133      	str	r3, [r6, #16]
  devp->state = FLASH_READY;
 80016c6:	f88c 2004 	strb.w	r2, [ip, #4]
}
 80016ca:	b003      	add	sp, #12
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return FLASH_ERROR_PROGRAM; /* There is no error on erase.*/
 80016ce:	2003      	movs	r0, #3
 80016d0:	e7f4      	b.n	80016bc <efl_lld_program+0x8c>
    return FLASH_BUSY_ERASING;
 80016d2:	2001      	movs	r0, #1
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
	...

080016e0 <efl_lld_get_descriptor>:
}
 80016e0:	4800      	ldr	r0, [pc, #0]	; (80016e4 <efl_lld_get_descriptor+0x4>)
 80016e2:	4770      	bx	lr
 80016e4:	080053a8 	.word	0x080053a8
	...

080016f0 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80016f0:	2000      	movs	r0, #0
 80016f2:	4770      	bx	lr
	...

08001700 <flashGetSectorOffset>:
 * @return the offset of the sector
 */
flash_offset_t flashGetSectorOffset(BaseFlash *devp,
                                    flash_sector_t sector) {
  flash_offset_t offset;
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001700:	6803      	ldr	r3, [r0, #0]
                                    flash_sector_t sector) {
 8001702:	b510      	push	{r4, lr}
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001704:	685b      	ldr	r3, [r3, #4]
                                    flash_sector_t sector) {
 8001706:	460c      	mov	r4, r1
  const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 8001708:	4798      	blx	r3

  osalDbgAssert(sector < descriptor->sectors_count, "invalid sector");

  if (descriptor->sectors != NULL) {
 800170a:	68c3      	ldr	r3, [r0, #12]
 800170c:	b113      	cbz	r3, 8001714 <flashGetSectorOffset+0x14>
    offset = descriptor->sectors[sector].offset;
 800170e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  else {
    offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
  }

  return offset;
}
 8001712:	bd10      	pop	{r4, pc}
    offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
 8001714:	6900      	ldr	r0, [r0, #16]
 8001716:	fb00 f004 	mul.w	r0, r0, r4
}
 800171a:	bd10      	pop	{r4, pc}
 800171c:	0000      	movs	r0, r0
	...

08001720 <mfs_flash_get_bank_offset.isra.0>:
                                                   mfsp->config->bank0_start) :
 8001720:	b919      	cbnz	r1, 800172a <mfs_flash_get_bank_offset.isra.0+0xa>
  return bank == MFS_BANK_0 ? flashGetSectorOffset(mfsp->config->flashp,
 8001722:	68c1      	ldr	r1, [r0, #12]
 8001724:	6800      	ldr	r0, [r0, #0]
 8001726:	f7ff bfeb 	b.w	8001700 <flashGetSectorOffset>
                              flashGetSectorOffset(mfsp->config->flashp,
 800172a:	6941      	ldr	r1, [r0, #20]
 800172c:	6800      	ldr	r0, [r0, #0]
 800172e:	f7ff bfe7 	b.w	8001700 <flashGetSectorOffset>
 8001732:	bf00      	nop
	...

08001740 <mfs_bank_get_state.constprop.0>:
 * @param[out] cntp     bank counter
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_bank_get_state(MFSDriver *mfsp,
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                      mfs_bank_t bank,
                                      mfs_bank_state_t *statep,
                                      uint32_t *cntp) {

  /* Reading the current bank header.*/
  RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8001744:	4c21      	ldr	r4, [pc, #132]	; (80017cc <mfs_bank_get_state.constprop.0+0x8c>)
static mfs_error_t mfs_bank_get_state(MFSDriver *mfsp,
 8001746:	4605      	mov	r5, r0
 8001748:	460e      	mov	r6, r1
  RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 800174a:	4601      	mov	r1, r0
 800174c:	6860      	ldr	r0, [r4, #4]
static mfs_error_t mfs_bank_get_state(MFSDriver *mfsp,
 800174e:	4617      	mov	r7, r2
  RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8001750:	f7ff ffe6 	bl	8001720 <mfs_flash_get_bank_offset.isra.0>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001754:	6863      	ldr	r3, [r4, #4]
  RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8001756:	4601      	mov	r1, r0
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800175e:	6802      	ldr	r2, [r0, #0]
 8001760:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001764:	2210      	movs	r2, #16
 8001766:	47c0      	blx	r8
  if (ferr != FLASH_NO_ERROR) {
 8001768:	bb58      	cbnz	r0, 80017c2 <mfs_bank_get_state.constprop.0+0x82>
                              sizeof (mfs_bank_header_t),
                              mfsp->buffer.data8));

  /* Getting the counter regardless of the bank state, it is only valid if
     the state is MFS_BANK_OK.*/
  *cntp = mfsp->buffer.bhdr.fields.counter;
 800176a:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 800176e:	603b      	str	r3, [r7, #0]

  /* Checking just the header.*/
  *statep = mfs_bank_check_header(mfsp);
 8001770:	f7ff f9f6 	bl	8000b60 <mfs_bank_check_header.constprop.0>
 8001774:	7030      	strb	r0, [r6, #0]
  if (*statep == MFS_BANK_ERASED) {
 8001776:	b110      	cbz	r0, 800177e <mfs_bank_get_state.constprop.0+0x3e>
    if (err == MFS_ERR_NOT_ERASED) {
      *statep = MFS_BANK_GARBAGE;
    }
  }

  return MFS_NO_ERROR;
 8001778:	2000      	movs	r0, #0
}
 800177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sector = mfsp->config->bank0_start;
 800177e:	6863      	ldr	r3, [r4, #4]
  if (bank == MFS_BANK_0) {
 8001780:	b1b5      	cbz	r5, 80017b0 <mfs_bank_get_state.constprop.0+0x70>
    end    = mfsp->config->bank1_start + mfsp->config->bank1_sectors;
 8001782:	e9d3 5705 	ldrd	r5, r7, [r3, #20]
 8001786:	442f      	add	r7, r5
  while (sector < end) {
 8001788:	42af      	cmp	r7, r5
 800178a:	d803      	bhi.n	8001794 <mfs_bank_get_state.constprop.0+0x54>
 800178c:	e7f4      	b.n	8001778 <mfs_bank_get_state.constprop.0+0x38>
    if (ferr != FLASH_NO_ERROR) {
 800178e:	b998      	cbnz	r0, 80017b8 <mfs_bank_get_state.constprop.0+0x78>
  while (sector < end) {
 8001790:	42bd      	cmp	r5, r7
 8001792:	d0f1      	beq.n	8001778 <mfs_bank_get_state.constprop.0+0x38>
    ferr = flashVerifyErase(mfsp->config->flashp, sector);
 8001794:	6863      	ldr	r3, [r4, #4]
 8001796:	4629      	mov	r1, r5
 8001798:	6818      	ldr	r0, [r3, #0]
    sector++;
 800179a:	3501      	adds	r5, #1
    ferr = flashVerifyErase(mfsp->config->flashp, sector);
 800179c:	6803      	ldr	r3, [r0, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	4798      	blx	r3
    if (ferr == FLASH_ERROR_VERIFY) {
 80017a2:	2805      	cmp	r0, #5
 80017a4:	d1f3      	bne.n	800178e <mfs_bank_get_state.constprop.0+0x4e>
      *statep = MFS_BANK_GARBAGE;
 80017a6:	2302      	movs	r3, #2
 80017a8:	7033      	strb	r3, [r6, #0]
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    end    = mfsp->config->bank0_start + mfsp->config->bank0_sectors;
 80017b0:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
 80017b4:	442f      	add	r7, r5
 80017b6:	e7e7      	b.n	8001788 <mfs_bank_get_state.constprop.0+0x48>
      mfsp->state = MFS_ERROR;
 80017b8:	2304      	movs	r3, #4
 80017ba:	2000      	movs	r0, #0
 80017bc:	7023      	strb	r3, [r4, #0]
}
 80017be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mfsp->state = MFS_ERROR;
 80017c2:	2304      	movs	r3, #4
    return MFS_ERR_FLASH_FAILURE;
 80017c4:	f06f 0007 	mvn.w	r0, #7
    mfsp->state = MFS_ERROR;
 80017c8:	7023      	strb	r3, [r4, #0]
 80017ca:	e7d6      	b.n	800177a <mfs_bank_get_state.constprop.0+0x3a>
 80017cc:	20000ec0 	.word	0x20000ec0

080017d0 <efl_lld_verify_erase>:
  osalDbgCheck(sector < efl_lld_descriptor.sectors_count);
  osalDbgAssert((devp->state == FLASH_READY) || (devp->state == FLASH_ERASE),
                "invalid state");

  /* No verifying while erasing.*/
  if (devp->state == FLASH_ERASE) {
 80017d0:	7903      	ldrb	r3, [r0, #4]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d013      	beq.n	80017fe <efl_lld_verify_erase+0x2e>
flash_error_t efl_lld_verify_erase(void *instance, flash_sector_t sector) {
 80017d6:	b510      	push	{r4, lr}
 80017d8:	4604      	mov	r4, r0
    return FLASH_BUSY_ERASING;
  }

  /* Address of the sector.*/
  address = (uint32_t *)(efl_lld_descriptor.address +
                         flashGetSectorOffset(getBaseFlash(devp), sector));
 80017da:	f7ff ff91 	bl	8001700 <flashGetSectorOffset>
  address = (uint32_t *)(efl_lld_descriptor.address +
 80017de:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000

  /* FLASH_READY state while the operation is performed.*/
  devp->state = FLASH_READ;

  /* Scanning the sector space.*/
  for (i = 0U; i < STM32_FLASH_SECTOR_SIZE / sizeof(uint32_t); i++) {
 80017e2:	1f0b      	subs	r3, r1, #4
 80017e4:	f501 717f 	add.w	r1, r1, #1020	; 0x3fc
 80017e8:	e001      	b.n	80017ee <efl_lld_verify_erase+0x1e>
 80017ea:	428b      	cmp	r3, r1
 80017ec:	d009      	beq.n	8001802 <efl_lld_verify_erase+0x32>
    if (*address != 0xFFFFFFFFU) {
 80017ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80017f2:	3201      	adds	r2, #1
 80017f4:	d0f9      	beq.n	80017ea <efl_lld_verify_erase+0x1a>
    }
    address++;
  }

  /* Ready state again.*/
  devp->state = FLASH_READY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	7123      	strb	r3, [r4, #4]
      err = FLASH_ERROR_VERIFY;
 80017fa:	2005      	movs	r0, #5

  return err;
}
 80017fc:	bd10      	pop	{r4, pc}
    return FLASH_BUSY_ERASING;
 80017fe:	2001      	movs	r0, #1
}
 8001800:	4770      	bx	lr
  devp->state = FLASH_READY;
 8001802:	2302      	movs	r3, #2
 8001804:	7123      	strb	r3, [r4, #4]
  flash_error_t err = FLASH_NO_ERROR;
 8001806:	2000      	movs	r0, #0
}
 8001808:	bd10      	pop	{r4, pc}
 800180a:	bf00      	nop
 800180c:	0000      	movs	r0, r0
	...

08001810 <efl_lld_start_erase_sector>:
                                         flash_sector_t sector) {
 8001810:	b538      	push	{r3, r4, r5, lr}
  if (devp->state == FLASH_ERASE) {
 8001812:	7903      	ldrb	r3, [r0, #4]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d015      	beq.n	8001844 <efl_lld_start_erase_sector+0x34>
  devp->state = FLASH_ERASE;
 8001818:	2505      	movs	r5, #5
  eflp->flash->SR = 0x0000001FU;
 800181a:	221f      	movs	r2, #31
  stm32_flash_clear_status(devp);
 800181c:	68c3      	ldr	r3, [r0, #12]
  devp->state = FLASH_ERASE;
 800181e:	7105      	strb	r5, [r0, #4]
  eflp->flash->SR = 0x0000001FU;
 8001820:	60da      	str	r2, [r3, #12]
  devp->flash->CR |= FLASH_CR_PER;
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	4604      	mov	r4, r0
 8001826:	f042 0202 	orr.w	r2, r2, #2
 800182a:	611a      	str	r2, [r3, #16]
                         flashGetSectorOffset(getBaseFlash(devp), sector));
 800182c:	f7ff ff68 	bl	8001700 <flashGetSectorOffset>
  devp->flash->AR = (uint32_t)(efl_lld_descriptor.address +
 8001830:	68e3      	ldr	r3, [r4, #12]
 8001832:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8001836:	6158      	str	r0, [r3, #20]
  devp->flash->CR |= FLASH_CR_STRT;
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	2000      	movs	r0, #0
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	611a      	str	r2, [r3, #16]
}
 8001842:	bd38      	pop	{r3, r4, r5, pc}
    return FLASH_BUSY_ERASING;
 8001844:	2001      	movs	r0, #1
}
 8001846:	bd38      	pop	{r3, r4, r5, pc}
	...

08001850 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001850:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 8001852:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <chSchWakeupS.constprop.0+0x54>)
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8001856:	6884      	ldr	r4, [r0, #8]
  thread_t *otp = currp;
 8001858:	6999      	ldr	r1, [r3, #24]
  ntp->u.rdymsg = msg;
 800185a:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 800185c:	688d      	ldr	r5, [r1, #8]
 800185e:	42ac      	cmp	r4, r5
 8001860:	d80c      	bhi.n	800187c <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8001862:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 8001866:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	4294      	cmp	r4, r2
 800186c:	d9fb      	bls.n	8001866 <chSchWakeupS.constprop.0+0x16>
}
 800186e:	bc70      	pop	{r4, r5, r6}
  p->prev       = pqp->prev;
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001876:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001878:	6058      	str	r0, [r3, #4]
 800187a:	4770      	bx	lr
  return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
 800187c:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 800187e:	f881 6020 	strb.w	r6, [r1, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
 8001882:	6812      	ldr	r2, [r2, #0]
  } while (pqp->prio > p->prio);
 8001884:	6894      	ldr	r4, [r2, #8]
 8001886:	42a5      	cmp	r5, r4
 8001888:	d3fb      	bcc.n	8001882 <chSchWakeupS.constprop.0+0x32>
    ntp->state = CH_STATE_CURRENT;
 800188a:	2501      	movs	r5, #1

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 800188c:	6854      	ldr	r4, [r2, #4]
 800188e:	e9c1 2400 	strd	r2, r4, [r1]
  p->prev->next = p;
 8001892:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8001894:	6051      	str	r1, [r2, #4]
 8001896:	f880 5020 	strb.w	r5, [r0, #32]
}
 800189a:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 800189c:	6198      	str	r0, [r3, #24]
    chSysSwitch(ntp, otp);
 800189e:	f7fe bcd7 	b.w	8000250 <_port_switch>
 80018a2:	bf00      	nop
 80018a4:	200010d0 	.word	0x200010d0
	...

080018b0 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80018b0:	4603      	mov	r3, r0
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	2020      	movs	r0, #32
 80018b6:	f380 8811 	msr	BASEPRI, r0
  tp->state           = CH_STATE_WTSTART;
 80018ba:	2402      	movs	r4, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80018bc:	2500      	movs	r5, #0
  tp->refs            = (trefs_t)1;
 80018be:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80018c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 80018c4:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
  REG_INSERT(tp);
 80018c8:	4e16      	ldr	r6, [pc, #88]	; (8001924 <chThdCreateStatic.constprop.0+0x74>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80018ca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <chThdCreateStatic.constprop.0+0x78>)
  tp->hdr.pqueue.prio = prio;
 80018d0:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
  tp->realprio        = prio;
 80018d4:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80018d8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  tp->name            = name;
 80018dc:	4913      	ldr	r1, [pc, #76]	; (800192c <chThdCreateStatic.constprop.0+0x7c>)
  REG_INSERT(tp);
 80018de:	6972      	ldr	r2, [r6, #20]
  tp->state           = CH_STATE_WTSTART;
 80018e0:	f8a3 41a0 	strh.w	r4, [r3, #416]	; 0x1a0
  tp = threadref(((uint8_t *)wsp + size -
 80018e4:	f503 74c0 	add.w	r4, r3, #384	; 0x180
  REG_INSERT(tp);
 80018e8:	e9c3 6264 	strd	r6, r2, [r3, #400]	; 0x190
  tp->refs            = (trefs_t)1;
 80018ec:	f883 01a2 	strb.w	r0, [r3, #418]	; 0x1a2
  tp->name            = name;
 80018f0:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
  tp->epending        = (eventmask_t)0;
 80018f4:	e9c3 556d 	strd	r5, r5, [r3, #436]	; 0x1b4
  tp->wabase = (stkalign_t *)wsp;
 80018f8:	f8c3 319c 	str.w	r3, [r3, #412]	; 0x19c
  ch_list_init(&tp->waiting);
 80018fc:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001900:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
  REG_INSERT(tp);
 8001904:	6114      	str	r4, [r2, #16]
  ch_queue_init(&tp->msgqueue);
 8001906:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
  chSchWakeupS(tp, MSG_OK);
 800190a:	4620      	mov	r0, r4
  qp->next = qp;
 800190c:	e9c3 126a 	strd	r1, r2, [r3, #424]	; 0x1a8
  qp->prev = qp;
 8001910:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  REG_INSERT(tp);
 8001914:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8001916:	f7ff ff9b 	bl	8001850 <chSchWakeupS.constprop.0>
 800191a:	f385 8811 	msr	BASEPRI, r5
}
 800191e:	4620      	mov	r0, r4
 8001920:	bd70      	pop	{r4, r5, r6, pc}
 8001922:	bf00      	nop
 8001924:	200010d0 	.word	0x200010d0
 8001928:	08000261 	.word	0x08000261
 800192c:	08004f2c 	.word	0x08004f2c

08001930 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001930:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8001932:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <chSchGoSleepS+0x24>)
 8001936:	6999      	ldr	r1, [r3, #24]
  ch_priority_queue_t *p = pqp->next;
 8001938:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800193a:	f881 0020 	strb.w	r0, [r1, #32]
  pqp->next       = p->next;
 800193e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8001940:	4610      	mov	r0, r2
  pqp->next->prev = pqp;
 8001942:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8001944:	f882 5020 	strb.w	r5, [r2, #32]
  pqp->next       = p->next;
 8001948:	601c      	str	r4, [r3, #0]
}
 800194a:	bc30      	pop	{r4, r5}
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800194c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800194e:	f7fe bc7f 	b.w	8000250 <_port_switch>
 8001952:	bf00      	nop
 8001954:	200010d0 	.word	0x200010d0
	...

08001960 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001962:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001964:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001966:	d048      	beq.n	80019fa <chSchGoSleepTimeoutS+0x9a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001968:	4d50      	ldr	r5, [pc, #320]	; (8001aac <chSchGoSleepTimeoutS+0x14c>)
 800196a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return (bool)(dlhp == dlhp->next);
 800196e:	462f      	mov	r7, r5
 8001970:	f857 2f1c 	ldr.w	r2, [r7, #28]!
 8001974:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8001978:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
 800197a:	f8df e134 	ldr.w	lr, [pc, #308]	; 8001ab0 <chSchGoSleepTimeoutS+0x150>
  vtp->par     = par;
 800197e:	69a8      	ldr	r0, [r5, #24]
    if (vt_is_empty(&vtlp->dlist)) {
 8001980:	42ba      	cmp	r2, r7
 8001982:	460c      	mov	r4, r1
  vtp->par     = par;
 8001984:	9005      	str	r0, [sp, #20]
 8001986:	fa1f fc8c 	uxth.w	ip, ip
  vtp->func    = vtfunc;
 800198a:	f8cd e010 	str.w	lr, [sp, #16]
    if (vt_is_empty(&vtlp->dlist)) {
 800198e:	d05a      	beq.n	8001a46 <chSchGoSleepTimeoutS+0xe6>
 8001990:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    if (delta < vtlp->dlist.next->delta) {
 8001992:	6890      	ldr	r0, [r2, #8]
 8001994:	ebac 0303 	sub.w	r3, ip, r3
 8001998:	b29b      	uxth	r3, r3
    if (delta < nowdelta) {
 800199a:	18cb      	adds	r3, r1, r3
 800199c:	bf38      	it	cc
 800199e:	461c      	movcc	r4, r3
    if (delta < vtlp->dlist.next->delta) {
 80019a0:	42a0      	cmp	r0, r4
 80019a2:	d831      	bhi.n	8001a08 <chSchGoSleepTimeoutS+0xa8>
  while (dlp->delta < delta) {
 80019a4:	4284      	cmp	r4, r0
 80019a6:	d904      	bls.n	80019b2 <chSchGoSleepTimeoutS+0x52>
    dlp = dlp->next;
 80019a8:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 80019aa:	1a24      	subs	r4, r4, r0
  while (dlp->delta < delta) {
 80019ac:	6890      	ldr	r0, [r2, #8]
 80019ae:	42a0      	cmp	r0, r4
 80019b0:	d3fa      	bcc.n	80019a8 <chSchGoSleepTimeoutS+0x48>
  dlhp->delta = (sysinterval_t)-1;
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  dlp->delta      = delta;
 80019b6:	9403      	str	r4, [sp, #12]
  dlp->prev       = dlp->next->prev;
 80019b8:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
  dlp->delta -= delta;
 80019bc:	1b09      	subs	r1, r1, r4
  dlp->prev->next = dlp;
 80019be:	ac01      	add	r4, sp, #4
  dlp->prev       = dlp->next->prev;
 80019c0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  dlp->prev->next = dlp;
 80019c4:	601c      	str	r4, [r3, #0]
  dlhp->prev      = dlp;
 80019c6:	e9c2 4101 	strd	r4, r1, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 80019ca:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(newstate);
 80019cc:	4630      	mov	r0, r6
 80019ce:	f7ff ffaf 	bl	8001930 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80019d2:	9b04      	ldr	r3, [sp, #16]
 80019d4:	b16b      	cbz	r3, 80019f2 <chSchGoSleepTimeoutS+0x92>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!vt_is_first(&vtlp->dlist, &vtp->dlist)) {
 80019d6:	69eb      	ldr	r3, [r5, #28]
 80019d8:	42a3      	cmp	r3, r4
 80019da:	d01b      	beq.n	8001a14 <chSchGoSleepTimeoutS+0xb4>
    vtp->dlist.next->delta += vtp->dlist.delta;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  dlp->prev->next = dlp->next;
 80019e0:	9b01      	ldr	r3, [sp, #4]
    vtp->dlist.next->delta += vtp->dlist.delta;
 80019e2:	9c03      	ldr	r4, [sp, #12]
 80019e4:	689a      	ldr	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80019e6:	9902      	ldr	r1, [sp, #8]
    vtp->dlist.next->delta += vtp->dlist.delta;
 80019e8:	4422      	add	r2, r4
  dlp->prev->next = dlp->next;
 80019ea:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 80019ec:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtlp->dlist.delta = (sysinterval_t)-1;
 80019f0:	6268      	str	r0, [r5, #36]	; 0x24
  return currp->u.rdymsg;
 80019f2:	69ab      	ldr	r3, [r5, #24]
}
 80019f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80019f6:	b007      	add	sp, #28
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chSchGoSleepS(newstate);
 80019fa:	f7ff ff99 	bl	8001930 <chSchGoSleepS>
 80019fe:	4d2b      	ldr	r5, [pc, #172]	; (8001aac <chSchGoSleepTimeoutS+0x14c>)
  return currp->u.rdymsg;
 8001a00:	69ab      	ldr	r3, [r5, #24]
}
 8001a02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a04:	b007      	add	sp, #28
 8001a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vt_set_alarm(now, delay);
 8001a08:	4660      	mov	r0, ip
 8001a0a:	f7ff fc11 	bl	8001230 <vt_set_alarm>
 8001a0e:	69ea      	ldr	r2, [r5, #28]
 8001a10:	6890      	ldr	r0, [r2, #8]
 8001a12:	e7c7      	b.n	80019a4 <chSchGoSleepTimeoutS+0x44>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  vt_remove_first(&vtlp->dlist);
  vtp->func = NULL;
 8001a14:	2100      	movs	r1, #0
  dlhp->next       = dlp->next;
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	61eb      	str	r3, [r5, #28]
  dlhp->next->prev = dlhp;
 8001a1a:	605f      	str	r7, [r3, #4]
  return (bool)(dlhp == dlhp->next);
 8001a1c:	69ea      	ldr	r2, [r5, #28]
  vtp->func = NULL;
 8001a1e:	9104      	str	r1, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (vt_is_empty(&vtlp->dlist)) {
 8001a20:	42ba      	cmp	r2, r7
 8001a22:	d03e      	beq.n	8001aa2 <chSchGoSleepTimeoutS+0x142>
 8001a24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8001a28:	6891      	ldr	r1, [r2, #8]
 8001a2a:	9c03      	ldr	r4, [sp, #12]
 8001a2c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8001a2e:	4421      	add	r1, r4
 8001a30:	6091      	str	r1, [r2, #8]
 8001a32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a34:	b280      	uxth	r0, r0
 8001a36:	1ac3      	subs	r3, r0, r3
 8001a38:	b29b      	uxth	r3, r3
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8001a3a:	4299      	cmp	r1, r3
 8001a3c:	d9d9      	bls.n	80019f2 <chSchGoSleepTimeoutS+0x92>

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 8001a3e:	1ac9      	subs	r1, r1, r3
 8001a40:	f7ff fbf6 	bl	8001230 <vt_set_alarm>
 8001a44:	e7d5      	b.n	80019f2 <chSchGoSleepTimeoutS+0x92>
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8001a46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a4a:	42a1      	cmp	r1, r4
 8001a4c:	bf28      	it	cs
 8001a4e:	4621      	movcs	r1, r4
 8001a50:	2902      	cmp	r1, #2
 8001a52:	bf38      	it	cc
 8001a54:	2102      	movcc	r1, #2
  STM32_ST_TIM->SR     = 0;
 8001a56:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001a5a:	2002      	movs	r0, #2
  return systime + (systime_t)interval;
 8001a5c:	eb0c 0201 	add.w	r2, ip, r1
  dlp->delta      = delta;
 8001a60:	9403      	str	r4, [sp, #12]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a62:	b292      	uxth	r2, r2
  dlp->next->prev = dlp;
 8001a64:	ac01      	add	r4, sp, #4
  dlp->next       = dlp->prev->next;
 8001a66:	e9cd 7701 	strd	r7, r7, [sp, #4]
  dlhp->next      = dlp;
 8001a6a:	e9c5 4407 	strd	r4, r4, [r5, #28]
  vtlp->lasttime = now;
 8001a6e:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001a74:	f8c3 e010 	str.w	lr, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001a78:	60d8      	str	r0, [r3, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001a7c:	eba2 020c 	sub.w	r2, r2, ip
 8001a80:	b292      	uxth	r2, r2
    if (chTimeDiffX(now, newnow) < delay) {
 8001a82:	4291      	cmp	r1, r2
 8001a84:	d8a2      	bhi.n	80019cc <chSchGoSleepTimeoutS+0x6c>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a86:	4618      	mov	r0, r3
 8001a88:	f10c 0203 	add.w	r2, ip, #3
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	6342      	str	r2, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001a90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a92:	3201      	adds	r2, #1
 8001a94:	eba3 030c 	sub.w	r3, r3, ip
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4299      	cmp	r1, r3
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	d9f6      	bls.n	8001a8e <chSchGoSleepTimeoutS+0x12e>
 8001aa0:	e794      	b.n	80019cc <chSchGoSleepTimeoutS+0x6c>
  STM32_ST_TIM->DIER = 0U;
 8001aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa6:	60d9      	str	r1, [r3, #12]
 8001aa8:	e7a3      	b.n	80019f2 <chSchGoSleepTimeoutS+0x92>
 8001aaa:	bf00      	nop
 8001aac:	200010d0 	.word	0x200010d0
 8001ab0:	08000e21 	.word	0x08000e21
	...

08001ac0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001ac0:	b161      	cbz	r1, 8001adc <chThdEnqueueTimeoutS+0x1c>
 8001ac2:	4603      	mov	r3, r0
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001ac6:	b410      	push	{r4}
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8001ac8:	6992      	ldr	r2, [r2, #24]
  p->prev       = qp->prev;
 8001aca:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001acc:	2004      	movs	r0, #4
 8001ace:	e9c2 3400 	strd	r3, r4, [r2]
  p->prev->next = p;
 8001ad2:	6022      	str	r2, [r4, #0]
}
 8001ad4:	bc10      	pop	{r4}
  qp->prev      = p;
 8001ad6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001ad8:	f7ff bf42 	b.w	8001960 <chSchGoSleepTimeoutS>
}
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200010d0 	.word	0x200010d0
	...

08001af0 <canTransmitTimeout.constprop.0>:
 * @retval MSG_TIMEOUT  The operation has timed out.
 * @retval MSG_RESET    The driver has been stopped while waiting.
 *
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	2320      	movs	r3, #32
 8001af4:	4605      	mov	r5, r0
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	4c2a      	ldr	r4, [pc, #168]	; (8001ba4 <canTransmitTimeout.constprop.0+0xb4>)
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001afc:	f104 0608 	add.w	r6, r4, #8
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8001b00:	7823      	ldrb	r3, [r4, #0]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d004      	beq.n	8001b10 <canTransmitTimeout.constprop.0+0x20>
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 8001b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	f012 5fe0 	tst.w	r2, #469762048	; 0x1c000000
 8001b0e:	d109      	bne.n	8001b24 <canTransmitTimeout.constprop.0+0x34>
 8001b10:	21c8      	movs	r1, #200	; 0xc8
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff ffd4 	bl	8001ac0 <chThdEnqueueTimeoutS>
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
    if (msg != MSG_OK) {
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	d0f1      	beq.n	8001b00 <canTransmitTimeout.constprop.0+0x10>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
  osalSysUnlock();
  return MSG_OK;
}
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
  CAN_TxMailBox_TypeDef *tmbp;

  /* Pointer to a free transmission mailbox.*/
  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    if ((DBGMCU->IDCODE >> 16) == 0x1001) {
 8001b24:	f241 0201 	movw	r2, #4097	; 0x1001
 8001b28:	491f      	ldr	r1, [pc, #124]	; (8001ba8 <canTransmitTimeout.constprop.0+0xb8>)
 8001b2a:	6809      	ldr	r1, [r1, #0]
 8001b2c:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
      /* real STM32 */
      tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8001b30:	689a      	ldr	r2, [r3, #8]
    if ((DBGMCU->IDCODE >> 16) == 0x1001) {
 8001b32:	d02d      	beq.n	8001b90 <canTransmitTimeout.constprop.0+0xa0>
    } else {
      int n;
      /* GD32 */
      if ((canp->can->TSR & CAN_TSR_TME0) == CAN_TSR_TME0)
 8001b34:	0150      	lsls	r0, r2, #5
 8001b36:	d423      	bmi.n	8001b80 <canTransmitTimeout.constprop.0+0x90>
        n = 0;
      else if ((canp->can->TSR & CAN_TSR_TME1) == CAN_TSR_TME1)
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	0111      	lsls	r1, r2, #4
 8001b3c:	d42e      	bmi.n	8001b9c <canTransmitTimeout.constprop.0+0xac>
        n = 1;
      else if ((canp->can->TSR & CAN_TSR_TME2) == CAN_TSR_TME2)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	d519      	bpl.n	8001b78 <canTransmitTimeout.constprop.0+0x88>
 8001b44:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
        n = 2;
      else {
        /* silence? */
        return;
      }
      tmbp = &canp->can->sTxMailBox[n];
 8001b48:	4413      	add	r3, r2
  default:
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
 8001b4a:	782a      	ldrb	r2, [r5, #0]
 8001b4c:	f012 0f20 	tst.w	r2, #32
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8001b50:	f3c2 1200 	ubfx	r2, r2, #4, #1
  if (ctfp->IDE)
 8001b54:	d017      	beq.n	8001b86 <canTransmitTimeout.constprop.0+0x96>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8001b56:	6869      	ldr	r1, [r5, #4]
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b5e:	f042 0204 	orr.w	r2, r2, #4
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 8001b62:	7829      	ldrb	r1, [r5, #0]
  tmbp->TDLR = ctfp->data32[0];
  tmbp->TDHR = ctfp->data32[1];
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001b64:	f042 0201 	orr.w	r2, r2, #1
  tmbp->TDTR = ctfp->DLC;
 8001b68:	f001 010f 	and.w	r1, r1, #15
  tmbp->TDHR = ctfp->data32[1];
 8001b6c:	e9d5 4002 	ldrd	r4, r0, [r5, #8]
  tmbp->TDTR = ctfp->DLC;
 8001b70:	6059      	str	r1, [r3, #4]
  tmbp->TDLR = ctfp->data32[0];
 8001b72:	609c      	str	r4, [r3, #8]
  tmbp->TDHR = ctfp->data32[1];
 8001b74:	60d8      	str	r0, [r3, #12]
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f380 8811 	msr	BASEPRI, r0
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
      if ((canp->can->TSR & CAN_TSR_TME0) == CAN_TSR_TME0)
 8001b80:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b84:	e7e0      	b.n	8001b48 <canTransmitTimeout.constprop.0+0x58>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8001b86:	88a9      	ldrh	r1, [r5, #4]
 8001b88:	0052      	lsls	r2, r2, #1
 8001b8a:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001b8e:	e7e8      	b.n	8001b62 <canTransmitTimeout.constprop.0+0x72>
      tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8001b90:	f3c2 6201 	ubfx	r2, r2, #24, #2
 8001b94:	3218      	adds	r2, #24
 8001b96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001b9a:	e7d6      	b.n	8001b4a <canTransmitTimeout.constprop.0+0x5a>
      else if ((canp->can->TSR & CAN_TSR_TME1) == CAN_TSR_TME1)
 8001b9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ba0:	e7d2      	b.n	8001b48 <canTransmitTimeout.constprop.0+0x58>
 8001ba2:	bf00      	nop
 8001ba4:	20000790 	.word	0x20000790
 8001ba8:	e0042000 	.word	0xe0042000
 8001bac:	00000000 	.word	0x00000000

08001bb0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	460f      	mov	r7, r1
 8001bb6:	4616      	mov	r6, r2
 8001bb8:	2320      	movs	r3, #32
 8001bba:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001bbe:	e005      	b.n	8001bcc <oqPutTimeout+0x1c>
 8001bc0:	4631      	mov	r1, r6
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff ff7c 	bl	8001ac0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	db17      	blt.n	8001bfc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 8001bcc:	68a5      	ldr	r5, [r4, #8]
 8001bce:	2d00      	cmp	r5, #0
 8001bd0:	d0f6      	beq.n	8001bc0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001bd2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001bd4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001bd6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001bd8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001bda:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001bdc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001bde:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001be0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001be4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001be6:	bf24      	itt	cs
 8001be8:	68e3      	ldrcs	r3, [r4, #12]
 8001bea:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001bec:	69e3      	ldr	r3, [r4, #28]
 8001bee:	b10b      	cbz	r3, 8001bf4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4798      	blx	r3
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bfc:	f385 8811 	msr	BASEPRI, r5
 8001c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c02:	bf00      	nop
	...

08001c10 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001c10:	3030      	adds	r0, #48	; 0x30
 8001c12:	f7ff bfcd 	b.w	8001bb0 <oqPutTimeout>
 8001c16:	bf00      	nop
	...

08001c20 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c24:	3030      	adds	r0, #48	; 0x30
 8001c26:	f7ff bfc3 	b.w	8001bb0 <oqPutTimeout>
 8001c2a:	bf00      	nop
 8001c2c:	0000      	movs	r0, r0
	...

08001c30 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	2320      	movs	r3, #32
 8001c34:	4605      	mov	r5, r0
 8001c36:	460e      	mov	r6, r1
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	e005      	b.n	8001c4a <iqGetTimeout+0x1a>
 8001c3e:	4631      	mov	r1, r6
 8001c40:	4628      	mov	r0, r5
 8001c42:	f7ff ff3d 	bl	8001ac0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001c46:	2800      	cmp	r0, #0
 8001c48:	db18      	blt.n	8001c7c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001c4a:	68ac      	ldr	r4, [r5, #8]
 8001c4c:	2c00      	cmp	r4, #0
 8001c4e:	d0f6      	beq.n	8001c3e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001c50:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001c52:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001c54:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001c56:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001c58:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001c5a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001c5c:	60ab      	str	r3, [r5, #8]
    iqp->q_rdptr = iqp->q_buffer;
 8001c5e:	bf28      	it	cs
 8001c60:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001c62:	61aa      	str	r2, [r5, #24]
 8001c64:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001c66:	bf28      	it	cs
 8001c68:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001c6a:	69eb      	ldr	r3, [r5, #28]
 8001c6c:	b10b      	cbz	r3, 8001c72 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001c6e:	4628      	mov	r0, r5
 8001c70:	4798      	blx	r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001c78:	4620      	mov	r0, r4
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	f384 8811 	msr	BASEPRI, r4
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
 8001c82:	bf00      	nop
	...

08001c90 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001c90:	300c      	adds	r0, #12
 8001c92:	f7ff bfcd 	b.w	8001c30 <iqGetTimeout>
 8001c96:	bf00      	nop
	...

08001ca0 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca4:	300c      	adds	r0, #12
 8001ca6:	f7ff bfc3 	b.w	8001c30 <iqGetTimeout>
 8001caa:	bf00      	nop
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001cb0:	b508      	push	{r3, lr}
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001cba:	2008      	movs	r0, #8
 8001cbc:	f7ff fe50 	bl	8001960 <chSchGoSleepTimeoutS>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f383 8811 	msr	BASEPRI, r3
}
 8001cc6:	bd08      	pop	{r3, pc}
	...

08001cd0 <mfs_bank_erase.isra.0.constprop.0>:
static mfs_error_t mfs_bank_erase(MFSDriver *mfsp, mfs_bank_t bank) {
 8001cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sector = mfsp->config->bank0_start;
 8001cd4:	6803      	ldr	r3, [r0, #0]
static mfs_error_t mfs_bank_erase(MFSDriver *mfsp, mfs_bank_t bank) {
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	b083      	sub	sp, #12
  if (bank == MFS_BANK_0) {
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	d13f      	bne.n	8001d5e <mfs_bank_erase.isra.0.constprop.0+0x8e>
    end    = mfsp->config->bank0_start + mfsp->config->bank0_sectors;
 8001cde:	e9d3 4203 	ldrd	r4, r2, [r3, #12]
 8001ce2:	eb04 0a02 	add.w	sl, r4, r2
  while (sector < end) {
 8001ce6:	45a2      	cmp	sl, r4
 8001ce8:	d93e      	bls.n	8001d68 <mfs_bank_erase.isra.0.constprop.0+0x98>
    osalThreadSleepMilliseconds(msec);
 8001cea:	f240 36e7 	movw	r6, #999	; 0x3e7
 8001cee:	2700      	movs	r7, #0
    ferr = flashStartEraseSector(mfsp->config->flashp, sector);
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	6803      	ldr	r3, [r0, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	4798      	blx	r3
    if (ferr != FLASH_NO_ERROR) {
 8001cfa:	bb40      	cbnz	r0, 8001d4e <mfs_bank_erase.isra.0.constprop.0+0x7e>
    ferr = flashWaitErase(mfsp->config->flashp);
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	f44f 69fa 	mov.w	r9, #2000	; 0x7d0
 8001d02:	f8d3 8000 	ldr.w	r8, [r3]
 8001d06:	e00d      	b.n	8001d24 <mfs_bank_erase.isra.0.constprop.0+0x54>
 8001d08:	46b3      	mov	fp, r6
 8001d0a:	46bc      	mov	ip, r7
 8001d0c:	9901      	ldr	r1, [sp, #4]
 8001d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d12:	fbe9 bc01 	umlal	fp, ip, r9, r1
 8001d16:	2300      	movs	r3, #0
 8001d18:	4661      	mov	r1, ip
 8001d1a:	4658      	mov	r0, fp
 8001d1c:	f7fe fd2c 	bl	8000778 <__aeabi_uldivmod>
  chThdSleep(delay);
 8001d20:	f7ff ffc6 	bl	8001cb0 <chThdSleep>
    err = flashQueryErase(devp, &msec);
 8001d24:	f8d8 3000 	ldr.w	r3, [r8]
 8001d28:	4640      	mov	r0, r8
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	a901      	add	r1, sp, #4
 8001d2e:	4798      	blx	r3
    if (err != FLASH_BUSY_ERASING) {
 8001d30:	2801      	cmp	r0, #1
 8001d32:	d0e9      	beq.n	8001d08 <mfs_bank_erase.isra.0.constprop.0+0x38>
    if (ferr != FLASH_NO_ERROR) {
 8001d34:	b958      	cbnz	r0, 8001d4e <mfs_bank_erase.isra.0.constprop.0+0x7e>
    ferr = flashVerifyErase(mfsp->config->flashp, sector);
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	4621      	mov	r1, r4
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	6803      	ldr	r3, [r0, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4798      	blx	r3
    if (ferr != FLASH_NO_ERROR) {
 8001d42:	b920      	cbnz	r0, 8001d4e <mfs_bank_erase.isra.0.constprop.0+0x7e>
    sector++;
 8001d44:	3401      	adds	r4, #1
  while (sector < end) {
 8001d46:	4554      	cmp	r4, sl
 8001d48:	d00e      	beq.n	8001d68 <mfs_bank_erase.isra.0.constprop.0+0x98>
 8001d4a:	682b      	ldr	r3, [r5, #0]
 8001d4c:	e7d0      	b.n	8001cf0 <mfs_bank_erase.isra.0.constprop.0+0x20>
      mfsp->state = MFS_ERROR;
 8001d4e:	2204      	movs	r2, #4
      return MFS_ERR_FLASH_FAILURE;
 8001d50:	f06f 0007 	mvn.w	r0, #7
      mfsp->state = MFS_ERROR;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <mfs_bank_erase.isra.0.constprop.0+0xa0>)
 8001d56:	701a      	strb	r2, [r3, #0]
}
 8001d58:	b003      	add	sp, #12
 8001d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    end    = mfsp->config->bank1_start + mfsp->config->bank1_sectors;
 8001d5e:	e9d3 4205 	ldrd	r4, r2, [r3, #20]
 8001d62:	eb04 0a02 	add.w	sl, r4, r2
 8001d66:	e7be      	b.n	8001ce6 <mfs_bank_erase.isra.0.constprop.0+0x16>
  return MFS_NO_ERROR;
 8001d68:	2000      	movs	r0, #0
}
 8001d6a:	b003      	add	sp, #12
 8001d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d70:	20000ec0 	.word	0x20000ec0
	...

08001d80 <_ZN6Pt20017sleepMsEj>:

    void sleepMs(size_t durationMs) override {
 8001d80:	460a      	mov	r2, r1
 8001d82:	b508      	push	{r3, lr}
        chThdSleepMilliseconds(durationMs);
 8001d84:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001d88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	fbe3 0102 	umlal	r0, r1, r3, r2
 8001d92:	2300      	movs	r3, #0
 8001d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d98:	f7fe fcee 	bl	8000778 <__aeabi_uldivmod>
    }
 8001d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        chThdSleepMilliseconds(durationMs);
 8001da0:	f7ff bf86 	b.w	8001cb0 <chThdSleep>
	...

08001db0 <mfs_flash_write.constprop.0>:
static mfs_error_t mfs_flash_write(MFSDriver *mfsp,
 8001db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db4:	4606      	mov	r6, r0
 8001db6:	460d      	mov	r5, r1
  ferr = flashProgram(mfsp->config->flashp, offset, n, wp);
 8001db8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8001e24 <mfs_flash_write.constprop.0+0x74>
static mfs_error_t mfs_flash_write(MFSDriver *mfsp,
 8001dbc:	4617      	mov	r7, r2
  ferr = flashProgram(mfsp->config->flashp, offset, n, wp);
 8001dbe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	6808      	ldr	r0, [r1, #0]
 8001dc6:	462a      	mov	r2, r5
 8001dc8:	6804      	ldr	r4, [r0, #0]
 8001dca:	4631      	mov	r1, r6
 8001dcc:	68e4      	ldr	r4, [r4, #12]
 8001dce:	47a0      	blx	r4
  if (ferr != FLASH_NO_ERROR) {
 8001dd0:	b9e8      	cbnz	r0, 8001e0e <mfs_flash_write.constprop.0+0x5e>
  while (n > 0U) {
 8001dd2:	b31d      	cbz	r5, 8001e1c <mfs_flash_write.constprop.0+0x6c>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001dd4:	f509 78f2 	add.w	r8, r9, #484	; 0x1e4
 8001dd8:	e001      	b.n	8001dde <mfs_flash_write.constprop.0+0x2e>
  while (n > 0U) {
 8001dda:	1b2d      	subs	r5, r5, r4
 8001ddc:	d01e      	beq.n	8001e1c <mfs_flash_write.constprop.0+0x6c>
    size_t chunk = n <= MFS_CFG_BUFFER_SIZE ? n : MFS_CFG_BUFFER_SIZE;
 8001dde:	2d20      	cmp	r5, #32
 8001de0:	462c      	mov	r4, r5
 8001de2:	bf28      	it	cs
 8001de4:	2420      	movcs	r4, #32
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001de6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001dea:	4622      	mov	r2, r4
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	4643      	mov	r3, r8
 8001df0:	6801      	ldr	r1, [r0, #0]
 8001df2:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8001df6:	4631      	mov	r1, r6
 8001df8:	47d0      	blx	sl
    offset += (flash_offset_t)chunk;
 8001dfa:	4426      	add	r6, r4
  if (ferr != FLASH_NO_ERROR) {
 8001dfc:	b938      	cbnz	r0, 8001e0e <mfs_flash_write.constprop.0+0x5e>
    if (memcmp((void *)mfsp->buffer.data8, (void *)wp, chunk)) {
 8001dfe:	4639      	mov	r1, r7
 8001e00:	4622      	mov	r2, r4
 8001e02:	4640      	mov	r0, r8
 8001e04:	f003 f85e 	bl	8004ec4 <memcmp>
    wp += chunk;
 8001e08:	4427      	add	r7, r4
    if (memcmp((void *)mfsp->buffer.data8, (void *)wp, chunk)) {
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d0e5      	beq.n	8001dda <mfs_flash_write.constprop.0+0x2a>
    mfsp->state = MFS_ERROR;
 8001e0e:	2304      	movs	r3, #4
    return MFS_ERR_FLASH_FAILURE;
 8001e10:	f06f 0007 	mvn.w	r0, #7
    mfsp->state = MFS_ERROR;
 8001e14:	f889 3000 	strb.w	r3, [r9]
}
 8001e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return MFS_NO_ERROR;
 8001e1c:	2000      	movs	r0, #0
}
 8001e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e22:	bf00      	nop
 8001e24:	20000ec0 	.word	0x20000ec0
	...

08001e30 <mfs_bank_write_header.constprop.0>:
static mfs_error_t mfs_bank_write_header(MFSDriver *mfsp,
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    sector = mfsp->config->bank0_start;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <mfs_bank_write_header.constprop.0+0x64>)
static mfs_error_t mfs_bank_write_header(MFSDriver *mfsp,
 8001e34:	460a      	mov	r2, r1
    sector = mfsp->config->bank0_start;
 8001e36:	685f      	ldr	r7, [r3, #4]
static mfs_error_t mfs_bank_write_header(MFSDriver *mfsp,
 8001e38:	b085      	sub	sp, #20
  if (bank == MFS_BANK_0) {
 8001e3a:	bb48      	cbnz	r0, 8001e90 <mfs_bank_write_header.constprop.0+0x60>
    sector = mfsp->config->bank0_start;
 8001e3c:	68f9      	ldr	r1, [r7, #12]
  bhdr.fields.reserved1 = (uint16_t)mfsp->config->erased;
 8001e3e:	6878      	ldr	r0, [r7, #4]
  bhdr.fields.magic2    = MFS_BANK_MAGIC_2;
 8001e40:	4d15      	ldr	r5, [pc, #84]	; (8001e98 <mfs_bank_write_header.constprop.0+0x68>)
  bhdr.fields.magic1    = MFS_BANK_MAGIC_1;
 8001e42:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001ea0 <mfs_bank_write_header.constprop.0+0x70>
  bhdr.fields.reserved1 = (uint16_t)mfsp->config->erased;
 8001e46:	f8ad 000c 	strh.w	r0, [sp, #12]
  bhdr.fields.magic2    = MFS_BANK_MAGIC_2;
 8001e4a:	e9cd c500 	strd	ip, r5, [sp]
  bhdr.fields.reserved1 = (uint16_t)mfsp->config->erased;
 8001e4e:	f243 4343 	movw	r3, #13379	; 0x3443
 8001e52:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001e56:	4e11      	ldr	r6, [pc, #68]	; (8001e9c <mfs_bank_write_header.constprop.0+0x6c>)
  bhdr.fields.counter   = cnt;
 8001e58:	9202      	str	r2, [sp, #8]
 8001e5a:	f10d 0001 	add.w	r0, sp, #1
 8001e5e:	f10d 050e 	add.w	r5, sp, #14
 8001e62:	e005      	b.n	8001e70 <mfs_bank_write_header.constprop.0+0x40>
 8001e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e68:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
 8001e6c:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8001e70:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
  while (n > 0U) {
 8001e74:	42a8      	cmp	r0, r5
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8001e76:	b29c      	uxth	r4, r3
  while (n > 0U) {
 8001e78:	d1f4      	bne.n	8001e64 <mfs_bank_write_header.constprop.0+0x34>
  return mfs_flash_write(mfsp,
 8001e7a:	6838      	ldr	r0, [r7, #0]
  bhdr.fields.crc       = crc16(0xFFFFU, bhdr.hdr8,
 8001e7c:	f8ad 400e 	strh.w	r4, [sp, #14]
  return mfs_flash_write(mfsp,
 8001e80:	f7ff fc3e 	bl	8001700 <flashGetSectorOffset>
 8001e84:	466a      	mov	r2, sp
 8001e86:	2110      	movs	r1, #16
 8001e88:	f7ff ff92 	bl	8001db0 <mfs_flash_write.constprop.0>
}
 8001e8c:	b005      	add	sp, #20
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sector = mfsp->config->bank1_start;
 8001e90:	6979      	ldr	r1, [r7, #20]
 8001e92:	e7d4      	b.n	8001e3e <mfs_bank_write_header.constprop.0+0xe>
 8001e94:	20000ec0 	.word	0x20000ec0
 8001e98:	f0339cc5 	.word	0xf0339cc5
 8001e9c:	080051a8 	.word	0x080051a8
 8001ea0:	ec705ade 	.word	0xec705ade
	...

08001eb0 <mfs_garbage_collect.constprop.0>:
 * @param[out] mfsp     pointer to the @p MFSDriver object
 * @return              The operation status.
 *
 * @notapi
 */
static mfs_error_t mfs_garbage_collect(MFSDriver *mfsp) {
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned i;
  mfs_bank_t sbank, dbank;
  flash_offset_t dest_offset;

  sbank = mfsp->current_bank;
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <mfs_garbage_collect.constprop.0+0xdc>)
static mfs_error_t mfs_garbage_collect(MFSDriver *mfsp) {
 8001eb6:	b085      	sub	sp, #20
  sbank = mfsp->current_bank;
 8001eb8:	7a1a      	ldrb	r2, [r3, #8]
  else {
    dbank = MFS_BANK_0;
  }

  /* Write address.*/
  dest_offset = mfs_flash_get_bank_offset(mfsp, dbank) +
 8001eba:	6858      	ldr	r0, [r3, #4]
  sbank = mfsp->current_bank;
 8001ebc:	9203      	str	r2, [sp, #12]
    dbank = MFS_BANK_0;
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	0952      	lsrs	r2, r2, #5
  dest_offset = mfs_flash_get_bank_offset(mfsp, dbank) +
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	469b      	mov	fp, r3
    dbank = MFS_BANK_0;
 8001ec8:	9202      	str	r2, [sp, #8]
  dest_offset = mfs_flash_get_bank_offset(mfsp, dbank) +
 8001eca:	f7ff fc29 	bl	8001720 <mfs_flash_get_bank_offset.isra.0>
 8001ece:	f100 0310 	add.w	r3, r0, #16
 8001ed2:	465f      	mov	r7, fp
 8001ed4:	9300      	str	r3, [sp, #0]
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001ed6:	f50b 7af2 	add.w	sl, fp, #484	; 0x1e4
 8001eda:	e003      	b.n	8001ee4 <mfs_garbage_collect.constprop.0+0x34>
                ALIGNED_SIZEOF(mfs_bank_header_t);

  /* Copying the most recent record instances only.*/
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <mfs_garbage_collect.constprop.0+0xe0>)
 8001ede:	3708      	adds	r7, #8
 8001ee0:	42bb      	cmp	r3, r7
 8001ee2:	d036      	beq.n	8001f52 <mfs_garbage_collect.constprop.0+0xa2>
    uint32_t totsize = ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
    if (mfsp->descriptors[i].offset != 0) {
 8001ee4:	69be      	ldr	r6, [r7, #24]
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d0f8      	beq.n	8001edc <mfs_garbage_collect.constprop.0+0x2c>
    uint32_t totsize = ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	330f      	adds	r3, #15
 8001eee:	f023 0301 	bic.w	r3, r3, #1
  while (n > 0U) {
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	d023      	beq.n	8001f40 <mfs_garbage_collect.constprop.0+0x90>
 8001ef8:	4698      	mov	r8, r3
 8001efa:	9d00      	ldr	r5, [sp, #0]
 8001efc:	e002      	b.n	8001f04 <mfs_garbage_collect.constprop.0+0x54>
 8001efe:	ebb8 0804 	subs.w	r8, r8, r4
 8001f02:	d01d      	beq.n	8001f40 <mfs_garbage_collect.constprop.0+0x90>
    size_t chunk = (size_t)(((doffset | (MFS_CFG_BUFFER_SIZE - 1U)) + 1U) -
 8001f04:	f045 041f 	orr.w	r4, r5, #31
 8001f08:	1b64      	subs	r4, r4, r5
 8001f0a:	3401      	adds	r4, #1
 8001f0c:	4544      	cmp	r4, r8
 8001f0e:	bf28      	it	cs
 8001f10:	4644      	movcs	r4, r8
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8001f12:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001f16:	4622      	mov	r2, r4
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	4653      	mov	r3, sl
 8001f1c:	6801      	ldr	r1, [r0, #0]
 8001f1e:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8001f22:	4631      	mov	r1, r6
 8001f24:	47c8      	blx	r9
    soffset += chunk;
 8001f26:	4426      	add	r6, r4
  if (ferr != FLASH_NO_ERROR) {
 8001f28:	bb38      	cbnz	r0, 8001f7a <mfs_garbage_collect.constprop.0+0xca>
    RET_ON_ERROR(mfs_flash_write(mfsp, doffset, chunk, mfsp->buffer.data8));
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	4621      	mov	r1, r4
 8001f30:	f7ff ff3e 	bl	8001db0 <mfs_flash_write.constprop.0>
    doffset += chunk;
 8001f34:	4425      	add	r5, r4
    RET_ON_ERROR(mfs_flash_write(mfsp, doffset, chunk, mfsp->buffer.data8));
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d0e1      	beq.n	8001efe <mfs_garbage_collect.constprop.0+0x4e>

  /* The source bank is erased last.*/
  RET_ON_ERROR(mfs_bank_erase(mfsp, sbank));

  return MFS_NO_ERROR;
}
 8001f3a:	b005      	add	sp, #20
 8001f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      mfsp->descriptors[i].offset = dest_offset;
 8001f40:	9b00      	ldr	r3, [sp, #0]
      dest_offset += totsize;
 8001f42:	9a01      	ldr	r2, [sp, #4]
      mfsp->descriptors[i].offset = dest_offset;
 8001f44:	61bb      	str	r3, [r7, #24]
      dest_offset += totsize;
 8001f46:	441a      	add	r2, r3
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <mfs_garbage_collect.constprop.0+0xe0>)
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	42bb      	cmp	r3, r7
      dest_offset += totsize;
 8001f4e:	9200      	str	r2, [sp, #0]
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8001f50:	d1c8      	bne.n	8001ee4 <mfs_garbage_collect.constprop.0+0x34>
  mfsp->current_counter += 1U;
 8001f52:	f8db 100c 	ldr.w	r1, [fp, #12]
  mfsp->current_bank = dbank;
 8001f56:	9802      	ldr	r0, [sp, #8]
  mfsp->next_offset = dest_offset;
 8001f58:	9b00      	ldr	r3, [sp, #0]
  mfsp->current_counter += 1U;
 8001f5a:	3101      	adds	r1, #1
 8001f5c:	e9cb 1303 	strd	r1, r3, [fp, #12]
  mfsp->current_bank = dbank;
 8001f60:	f88b 0008 	strb.w	r0, [fp, #8]
  RET_ON_ERROR(mfs_bank_write_header(mfsp, dbank, mfsp->current_counter));
 8001f64:	f7ff ff64 	bl	8001e30 <mfs_bank_write_header.constprop.0>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d1e6      	bne.n	8001f3a <mfs_garbage_collect.constprop.0+0x8a>
  RET_ON_ERROR(mfs_bank_erase(mfsp, sbank));
 8001f6c:	9903      	ldr	r1, [sp, #12]
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <mfs_garbage_collect.constprop.0+0xe4>)
}
 8001f70:	b005      	add	sp, #20
 8001f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  RET_ON_ERROR(mfs_bank_erase(mfsp, sbank));
 8001f76:	f7ff beab 	b.w	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
    mfsp->state = MFS_ERROR;
 8001f7a:	2304      	movs	r3, #4
    return MFS_ERR_FLASH_FAILURE;
 8001f7c:	f06f 0007 	mvn.w	r0, #7
    mfsp->state = MFS_ERROR;
 8001f80:	f88b 3000 	strb.w	r3, [fp]
}
 8001f84:	b005      	add	sp, #20
 8001f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000ec0 	.word	0x20000ec0
 8001f90:	20000fc0 	.word	0x20000fc0
 8001f94:	20000ec4 	.word	0x20000ec4
	...

08001fa0 <mfs_mount.part.0.constprop.0>:
 *                                  @p MFS_ERROR state.
 * @retval MFS_ERR_INTERNAL         if an internal logic failure is detected.
 *
 * @api
 */
mfs_error_t mfs_mount(MFSDriver *mfsp) {
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80022ac <mfs_mount.part.0.constprop.0+0x30c>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	46c1      	mov	r9, r8
  uint32_t cnt0 = 0, cnt1 = 0;
 8001fac:	f04f 0b00 	mov.w	fp, #0
mfs_error_t mfs_mount(MFSDriver *mfsp) {
 8001fb0:	b091      	sub	sp, #68	; 0x44
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f508 7a80 	add.w	sl, r8, #256	; 0x100
  mfsp->used_space      = 0U;
 8001fb8:	4ebc      	ldr	r6, [pc, #752]	; (80022ac <mfs_mount.part.0.constprop.0+0x30c>)
  mfsp->next_offset     = 0U;
 8001fba:	e9c8 bb03 	strd	fp, fp, [r8, #12]
  mfsp->current_bank    = MFS_BANK_0;
 8001fbe:	f888 b008 	strb.w	fp, [r8, #8]
  mfsp->used_space      = 0U;
 8001fc2:	f8c8 b014 	str.w	fp, [r8, #20]
 8001fc6:	4633      	mov	r3, r6
 8001fc8:	46c8      	mov	r8, r9
  uint32_t cnt0 = 0, cnt1 = 0;
 8001fca:	e9cd bb0a 	strd	fp, fp, [sp, #40]	; 0x28
    mfsp->descriptors[i].size   = 0U;
 8001fce:	e9c3 bb06 	strd	fp, fp, [r3, #24]
 8001fd2:	3308      	adds	r3, #8
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8001fd4:	459a      	cmp	sl, r3
 8001fd6:	d1fa      	bne.n	8001fce <mfs_mount.part.0.constprop.0+0x2e>
  RET_ON_ERROR(mfs_bank_get_state(mfsp, MFS_BANK_0, &sts0, &cnt0));
 8001fd8:	2000      	movs	r0, #0
 8001fda:	aa0a      	add	r2, sp, #40	; 0x28
 8001fdc:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8001fe0:	f7ff fbae 	bl	8001740 <mfs_bank_get_state.constprop.0>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	bb28      	cbnz	r0, 8002034 <mfs_mount.part.0.constprop.0+0x94>
  RET_ON_ERROR(mfs_bank_get_state(mfsp, MFS_BANK_1, &sts1, &cnt1));
 8001fe8:	2001      	movs	r0, #1
 8001fea:	aa0b      	add	r2, sp, #44	; 0x2c
 8001fec:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8001ff0:	f7ff fba6 	bl	8001740 <mfs_bank_get_state.constprop.0>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b9e8      	cbnz	r0, 8002034 <mfs_mount.part.0.constprop.0+0x94>
  switch (PAIR(sts0, sts1)) {
 8001ff8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8001ffc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8002000:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8002004:	2b0a      	cmp	r3, #10
 8002006:	f200 80ee 	bhi.w	80021e6 <mfs_mount.part.0.constprop.0+0x246>
 800200a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800200e:	00f2      	.short	0x00f2
 8002010:	00dd00fa 	.word	0x00dd00fa
 8002014:	00fe00ec 	.word	0x00fe00ec
 8002018:	00c90027 	.word	0x00c90027
 800201c:	000b00ec 	.word	0x000b00ec
 8002020:	00d5002c 	.word	0x00d5002c
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8002024:	2100      	movs	r1, #0
 8002026:	48a2      	ldr	r0, [pc, #648]	; (80022b0 <mfs_mount.part.0.constprop.0+0x310>)
 8002028:	f7ff fe52 	bl	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
 800202c:	4603      	mov	r3, r0
 800202e:	2800      	cmp	r0, #0
 8002030:	f000 8150 	beq.w	80022d4 <mfs_mount.part.0.constprop.0+0x334>
  /* Attempting to mount the managed partition.*/
  for (i = 0; i < MFS_CFG_MAX_REPAIR_ATTEMPTS; i++) {
    mfs_error_t err;

    err = mfs_try_mount(mfsp);
    if (err == MFS_ERR_INTERNAL) {
 8002034:	f113 0f09 	cmn.w	r3, #9
 8002038:	f000 80d5 	beq.w	80021e6 <mfs_mount.part.0.constprop.0+0x246>
      /* Special case, do not retry on internal errors but report
         immediately.*/
      mfsp->state = MFS_ERROR;
      return err;
    }
    if (!MFS_IS_ERROR(err)) {
 800203c:	2b00      	cmp	r3, #0
 800203e:	f280 80ab 	bge.w	8002198 <mfs_mount.part.0.constprop.0+0x1f8>
  for (i = 0; i < MFS_CFG_MAX_REPAIR_ATTEMPTS; i++) {
 8002042:	9b00      	ldr	r3, [sp, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	d1b6      	bne.n	8001fb8 <mfs_mount.part.0.constprop.0+0x18>
      return err;
    }
  }

  /* Driver start failed.*/
  mfsp->state = MFS_ERROR;
 800204a:	2204      	movs	r2, #4
  return MFS_ERR_FLASH_FAILURE;
 800204c:	f06f 0307 	mvn.w	r3, #7
  mfsp->state = MFS_ERROR;
 8002050:	f889 2000 	strb.w	r2, [r9]
}
 8002054:	4618      	mov	r0, r3
 8002056:	b011      	add	sp, #68	; 0x44
 8002058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (cnt0 > cnt1) {
 800205c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002060:	429a      	cmp	r2, r3
 8002062:	f200 809d 	bhi.w	80021a0 <mfs_mount.part.0.constprop.0+0x200>
      RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 8002066:	2100      	movs	r1, #0
 8002068:	4891      	ldr	r0, [pc, #580]	; (80022b0 <mfs_mount.part.0.constprop.0+0x310>)
 800206a:	f7ff fe31 	bl	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
 800206e:	4603      	mov	r3, r0
 8002070:	2800      	cmp	r0, #0
 8002072:	d1df      	bne.n	8002034 <mfs_mount.part.0.constprop.0+0x94>
    w1 = true;
 8002074:	2301      	movs	r3, #1
      bank = MFS_BANK_1;
 8002076:	461d      	mov	r5, r3
    w1 = true;
 8002078:	9307      	str	r3, [sp, #28]
    RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 800207a:	4629      	mov	r1, r5
 800207c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002080:	f7ff fb4e 	bl	8001720 <mfs_flash_get_bank_offset.isra.0>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8002084:	f8d9 3004 	ldr.w	r3, [r9, #4]
    RET_ON_ERROR(mfs_flash_read(mfsp, mfs_flash_get_bank_offset(mfsp, bank),
 8002088:	4601      	mov	r1, r0
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	4b89      	ldr	r3, [pc, #548]	; (80022b4 <mfs_mount.part.0.constprop.0+0x314>)
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	6894      	ldr	r4, [r2, #8]
 8002092:	2210      	movs	r2, #16
 8002094:	47a0      	blx	r4
  if (ferr != FLASH_NO_ERROR) {
 8002096:	4604      	mov	r4, r0
 8002098:	2800      	cmp	r0, #0
 800209a:	f040 8103 	bne.w	80022a4 <mfs_mount.part.0.constprop.0+0x304>
    if (mfs_bank_check_header(mfsp) != MFS_BANK_OK) {
 800209e:	f7fe fd5f 	bl	8000b60 <mfs_bank_check_header.constprop.0>
 80020a2:	2801      	cmp	r0, #1
 80020a4:	f040 809f 	bne.w	80021e6 <mfs_mount.part.0.constprop.0+0x246>
    mfsp->current_counter = mfsp->buffer.bhdr.fields.counter;
 80020a8:	f8d9 31ec 	ldr.w	r3, [r9, #492]	; 0x1ec
  start_offset = mfs_flash_get_bank_offset(mfsp, bank);
 80020ac:	4629      	mov	r1, r5
    mfsp->current_counter = mfsp->buffer.bhdr.fields.counter;
 80020ae:	f8c9 300c 	str.w	r3, [r9, #12]
  start_offset = mfs_flash_get_bank_offset(mfsp, bank);
 80020b2:	f8d9 0004 	ldr.w	r0, [r9, #4]
    mfsp->current_bank    = bank;
 80020b6:	f889 5008 	strb.w	r5, [r9, #8]
  start_offset = mfs_flash_get_bank_offset(mfsp, bank);
 80020ba:	f7ff fb31 	bl	8001720 <mfs_flash_get_bank_offset.isra.0>
  end_offset   = start_offset + mfsp->config->bank_size;
 80020be:	f8d9 3004 	ldr.w	r3, [r9, #4]
  hdr_offset   = start_offset + (flash_offset_t)ALIGNED_SIZEOF(mfs_bank_header_t);
 80020c2:	f100 0710 	add.w	r7, r0, #16
  end_offset   = start_offset + mfsp->config->bank_size;
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	18c3      	adds	r3, r0, r3
 80020ca:	9301      	str	r3, [sp, #4]
  while (hdr_offset < end_offset - ALIGNED_DHDR_SIZE) {
 80020cc:	3b10      	subs	r3, #16
 80020ce:	429f      	cmp	r7, r3
  *wflagp = false;
 80020d0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  while (hdr_offset < end_offset - ALIGNED_DHDR_SIZE) {
 80020d4:	d246      	bcs.n	8002164 <mfs_mount.part.0.constprop.0+0x1c4>
 80020d6:	e9cd 8605 	strd	r8, r6, [sp, #20]
 80020da:	e029      	b.n	8002130 <mfs_mount.part.0.constprop.0+0x190>
    if ((u.dhdr.fields.magic1 != MFS_HEADER_MAGIC_1) ||
 80020dc:	4a76      	ldr	r2, [pc, #472]	; (80022b8 <mfs_mount.part.0.constprop.0+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f040 80d9 	bne.w	8002296 <mfs_mount.part.0.constprop.0+0x2f6>
 80020e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020e6:	4a75      	ldr	r2, [pc, #468]	; (80022bc <mfs_mount.part.0.constprop.0+0x31c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f040 80d4 	bne.w	8002296 <mfs_mount.part.0.constprop.0+0x2f6>
        (u.dhdr.fields.magic2 != MFS_HEADER_MAGIC_2) ||
 80020ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b1f      	cmp	r3, #31
 80020f8:	f200 80cd 	bhi.w	8002296 <mfs_mount.part.0.constprop.0+0x2f6>
        (u.dhdr.fields.size > end_offset - hdr_offset)) {
 80020fc:	9b01      	ldr	r3, [sp, #4]
 80020fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002100:	1bdb      	subs	r3, r3, r7
        (u.dhdr.fields.id > (uint32_t)MFS_CFG_MAX_RECORDS) ||
 8002102:	429c      	cmp	r4, r3
 8002104:	f200 80c7 	bhi.w	8002296 <mfs_mount.part.0.constprop.0+0x2f6>
    if (u.dhdr.fields.size > 0U) {
 8002108:	2c00      	cmp	r4, #0
 800210a:	f040 8082 	bne.w	8002212 <mfs_mount.part.0.constprop.0+0x272>
    if (crc != u.dhdr.fields.crc) {
 800210e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002112:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8002116:	429a      	cmp	r2, r3
 8002118:	f000 80b2 	beq.w	8002280 <mfs_mount.part.0.constprop.0+0x2e0>
      *wflagp = true;
 800211c:	2301      	movs	r3, #1
 800211e:	9303      	str	r3, [sp, #12]
    hdr_offset = hdr_offset + ALIGNED_REC_SIZE(u.dhdr.fields.size);
 8002120:	340f      	adds	r4, #15
 8002122:	f024 0401 	bic.w	r4, r4, #1
  while (hdr_offset < end_offset - ALIGNED_DHDR_SIZE) {
 8002126:	9b02      	ldr	r3, [sp, #8]
    hdr_offset = hdr_offset + ALIGNED_REC_SIZE(u.dhdr.fields.size);
 8002128:	3402      	adds	r4, #2
 800212a:	4427      	add	r7, r4
  while (hdr_offset < end_offset - ALIGNED_DHDR_SIZE) {
 800212c:	429f      	cmp	r7, r3
 800212e:	d217      	bcs.n	8002160 <mfs_mount.part.0.constprop.0+0x1c0>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8002130:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002134:	ab0c      	add	r3, sp, #48	; 0x30
 8002136:	6810      	ldr	r0, [r2, #0]
 8002138:	2210      	movs	r2, #16
 800213a:	6801      	ldr	r1, [r0, #0]
 800213c:	688c      	ldr	r4, [r1, #8]
 800213e:	4639      	mov	r1, r7
 8002140:	47a0      	blx	r4
  if (ferr != FLASH_NO_ERROR) {
 8002142:	2800      	cmp	r0, #0
 8002144:	f040 80ac 	bne.w	80022a0 <mfs_mount.part.0.constprop.0+0x300>
    if ((u.dhdr.hdr32[0] == mfsp->config->erased) &&
 8002148:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800214c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800214e:	6852      	ldr	r2, [r2, #4]
 8002150:	4293      	cmp	r3, r2
 8002152:	d1c3      	bne.n	80020dc <mfs_mount.part.0.constprop.0+0x13c>
 8002154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002156:	4293      	cmp	r3, r2
 8002158:	d1c0      	bne.n	80020dc <mfs_mount.part.0.constprop.0+0x13c>
        (u.dhdr.hdr32[1] == mfsp->config->erased) &&
 800215a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800215c:	4293      	cmp	r3, r2
 800215e:	d1bd      	bne.n	80020dc <mfs_mount.part.0.constprop.0+0x13c>
 8002160:	e9dd 8605 	ldrd	r8, r6, [sp, #20]
    mfsp->used_space = ALIGNED_SIZEOF(mfs_bank_header_t);
 8002164:	2210      	movs	r2, #16
 8002166:	2100      	movs	r1, #0
 8002168:	4613      	mov	r3, r2
 800216a:	e9c9 7204 	strd	r7, r2, [r9, #16]
      if (mfsp->descriptors[i].offset != 0U) {
 800216e:	69b0      	ldr	r0, [r6, #24]
        mfsp->used_space += ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8002170:	1c9a      	adds	r2, r3, #2
      if (mfsp->descriptors[i].offset != 0U) {
 8002172:	b128      	cbz	r0, 8002180 <mfs_mount.part.0.constprop.0+0x1e0>
        mfsp->used_space += ALIGNED_REC_SIZE(mfsp->descriptors[i].size);
 8002174:	2101      	movs	r1, #1
 8002176:	69f3      	ldr	r3, [r6, #28]
 8002178:	330f      	adds	r3, #15
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3608      	adds	r6, #8
    for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8002182:	45b2      	cmp	sl, r6
 8002184:	d1f3      	bne.n	800216e <mfs_mount.part.0.constprop.0+0x1ce>
 8002186:	b109      	cbz	r1, 800218c <mfs_mount.part.0.constprop.0+0x1ec>
 8002188:	f8c9 3014 	str.w	r3, [r9, #20]
  if (w2) {
 800218c:	9b03      	ldr	r3, [sp, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8098 	bne.w	80022c4 <mfs_mount.part.0.constprop.0+0x324>
  return (w1 || w2) ? MFS_WARN_REPAIR : MFS_NO_ERROR;
 8002194:	9807      	ldr	r0, [sp, #28]
 8002196:	b243      	sxtb	r3, r0
      mfsp->state  = MFS_READY;
 8002198:	2202      	movs	r2, #2
 800219a:	f889 2000 	strb.w	r2, [r9]
 800219e:	e759      	b.n	8002054 <mfs_mount.part.0.constprop.0+0xb4>
      RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 80021a0:	2101      	movs	r1, #1
 80021a2:	4843      	ldr	r0, [pc, #268]	; (80022b0 <mfs_mount.part.0.constprop.0+0x310>)
 80021a4:	f7ff fd94 	bl	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f47f af42 	bne.w	8002034 <mfs_mount.part.0.constprop.0+0x94>
    w1 = true;
 80021b0:	2301      	movs	r3, #1
      bank = MFS_BANK_0;
 80021b2:	2500      	movs	r5, #0
    w1 = true;
 80021b4:	9307      	str	r3, [sp, #28]
 80021b6:	e760      	b.n	800207a <mfs_mount.part.0.constprop.0+0xda>
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_0));
 80021b8:	2100      	movs	r1, #0
 80021ba:	483d      	ldr	r0, [pc, #244]	; (80022b0 <mfs_mount.part.0.constprop.0+0x310>)
 80021bc:	f7ff fd88 	bl	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f47f af36 	bne.w	8002034 <mfs_mount.part.0.constprop.0+0x94>
    RET_ON_ERROR(mfs_bank_erase(mfsp, MFS_BANK_1));
 80021c8:	2101      	movs	r1, #1
 80021ca:	4839      	ldr	r0, [pc, #228]	; (80022b0 <mfs_mount.part.0.constprop.0+0x310>)
 80021cc:	f7ff fd80 	bl	8001cd0 <mfs_bank_erase.isra.0.constprop.0>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2800      	cmp	r0, #0
 80021d4:	f47f af2e 	bne.w	8002034 <mfs_mount.part.0.constprop.0+0x94>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_0, 1));
 80021d8:	2101      	movs	r1, #1
 80021da:	f7ff fe29 	bl	8001e30 <mfs_bank_write_header.constprop.0>
 80021de:	4603      	mov	r3, r0
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d0e5      	beq.n	80021b0 <mfs_mount.part.0.constprop.0+0x210>
 80021e4:	e726      	b.n	8002034 <mfs_mount.part.0.constprop.0+0x94>
      mfsp->state = MFS_ERROR;
 80021e6:	2204      	movs	r2, #4
    err = mfs_try_mount(mfsp);
 80021e8:	f06f 0308 	mvn.w	r3, #8
      mfsp->state = MFS_ERROR;
 80021ec:	f889 2000 	strb.w	r2, [r9]
 80021f0:	e730      	b.n	8002054 <mfs_mount.part.0.constprop.0+0xb4>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_0, 1));
 80021f2:	2101      	movs	r1, #1
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7ff fe1b 	bl	8001e30 <mfs_bank_write_header.constprop.0>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d0d8      	beq.n	80021b2 <mfs_mount.part.0.constprop.0+0x212>
 8002200:	e718      	b.n	8002034 <mfs_mount.part.0.constprop.0+0x94>
  bool w1 = false, w2 = false;
 8002202:	2300      	movs	r3, #0
    bank = MFS_BANK_1;
 8002204:	2501      	movs	r5, #1
  bool w1 = false, w2 = false;
 8002206:	9307      	str	r3, [sp, #28]
 8002208:	e737      	b.n	800207a <mfs_mount.part.0.constprop.0+0xda>
  switch (PAIR(sts0, sts1)) {
 800220a:	2300      	movs	r3, #0
 800220c:	461d      	mov	r5, r3
 800220e:	9307      	str	r3, [sp, #28]
 8002210:	e733      	b.n	800207a <mfs_mount.part.0.constprop.0+0xda>
    crc = 0xFFFFU;
 8002212:	f64f 75ff 	movw	r5, #65535	; 0xffff
      flash_offset_t data = hdr_offset + sizeof (mfs_data_header_t);
 8002216:	f107 0810 	add.w	r8, r7, #16
 800221a:	9704      	str	r7, [sp, #16]
        uint32_t chunk = total > MFS_CFG_BUFFER_SIZE ? MFS_CFG_BUFFER_SIZE :
 800221c:	2c20      	cmp	r4, #32
 800221e:	4626      	mov	r6, r4
 8002220:	bf28      	it	cs
 8002222:	2620      	movcs	r6, #32
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 8002224:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002228:	4632      	mov	r2, r6
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4641      	mov	r1, r8
 800222e:	6807      	ldr	r7, [r0, #0]
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <mfs_mount.part.0.constprop.0+0x314>)
 8002232:	68bf      	ldr	r7, [r7, #8]
 8002234:	47b8      	blx	r7
  if (ferr != FLASH_NO_ERROR) {
 8002236:	bb98      	cbnz	r0, 80022a0 <mfs_mount.part.0.constprop.0+0x300>
 8002238:	f506 73f2 	add.w	r3, r6, #484	; 0x1e4
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <mfs_mount.part.0.constprop.0+0x314>)
 800223e:	444b      	add	r3, r9
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8002240:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002244:	481e      	ldr	r0, [pc, #120]	; (80022c0 <mfs_mount.part.0.constprop.0+0x320>)
 8002246:	ea81 2115 	eor.w	r1, r1, r5, lsr #8
 800224a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
  while (n > 0U) {
 800224e:	429a      	cmp	r2, r3
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8002250:	ea81 2505 	eor.w	r5, r1, r5, lsl #8
 8002254:	b2ad      	uxth	r5, r5
  while (n > 0U) {
 8002256:	d1f3      	bne.n	8002240 <mfs_mount.part.0.constprop.0+0x2a0>
      while (total > 0U) {
 8002258:	1ba4      	subs	r4, r4, r6
        data  += chunk;
 800225a:	44b0      	add	r8, r6
      while (total > 0U) {
 800225c:	d1de      	bne.n	800221c <mfs_mount.part.0.constprop.0+0x27c>
    if (crc != u.dhdr.fields.crc) {
 800225e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8002262:	9f04      	ldr	r7, [sp, #16]
 8002264:	42ab      	cmp	r3, r5
 8002266:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002268:	f47f af58 	bne.w	800211c <mfs_mount.part.0.constprop.0+0x17c>
      if (u.dhdr.fields.size == 0U) {
 800226c:	b144      	cbz	r4, 8002280 <mfs_mount.part.0.constprop.0+0x2e0>
        mfsp->descriptors[u.dhdr.fields.id - 1U].offset = hdr_offset;
 800226e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002272:	3302      	adds	r3, #2
        mfsp->descriptors[u.dhdr.fields.id - 1U].size   = u.dhdr.fields.size;
 8002274:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
        mfsp->descriptors[u.dhdr.fields.id - 1U].offset = hdr_offset;
 8002278:	f849 7033 	str.w	r7, [r9, r3, lsl #3]
        mfsp->descriptors[u.dhdr.fields.id - 1U].size   = u.dhdr.fields.size;
 800227c:	6054      	str	r4, [r2, #4]
 800227e:	e74f      	b.n	8002120 <mfs_mount.part.0.constprop.0+0x180>
        mfsp->descriptors[u.dhdr.fields.id - 1U].offset = 0U;
 8002280:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002284:	2400      	movs	r4, #0
 8002286:	3302      	adds	r3, #2
 8002288:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
        mfsp->descriptors[u.dhdr.fields.id - 1U].size   = 0U;
 800228c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8002290:	f8c3 b004 	str.w	fp, [r3, #4]
 8002294:	e744      	b.n	8002120 <mfs_mount.part.0.constprop.0+0x180>
      *wflagp = true;
 8002296:	2301      	movs	r3, #1
 8002298:	e9dd 8605 	ldrd	r8, r6, [sp, #20]
 800229c:	9303      	str	r3, [sp, #12]
 800229e:	e761      	b.n	8002164 <mfs_mount.part.0.constprop.0+0x1c4>
 80022a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    mfsp->state = MFS_ERROR;
 80022a4:	2304      	movs	r3, #4
 80022a6:	f889 3000 	strb.w	r3, [r9]
 80022aa:	e6ca      	b.n	8002042 <mfs_mount.part.0.constprop.0+0xa2>
 80022ac:	20000ec0 	.word	0x20000ec0
 80022b0:	20000ec4 	.word	0x20000ec4
 80022b4:	200010a4 	.word	0x200010a4
 80022b8:	5fae45f0 	.word	0x5fae45f0
 80022bc:	f045ae5f 	.word	0xf045ae5f
 80022c0:	080051a8 	.word	0x080051a8
    RET_ON_ERROR(mfs_garbage_collect(mfsp));
 80022c4:	f7ff fdf4 	bl	8001eb0 <mfs_garbage_collect.constprop.0>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2800      	cmp	r0, #0
 80022cc:	f47f aeb2 	bne.w	8002034 <mfs_mount.part.0.constprop.0+0x94>
  return (w1 || w2) ? MFS_WARN_REPAIR : MFS_NO_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e760      	b.n	8002196 <mfs_mount.part.0.constprop.0+0x1f6>
    RET_ON_ERROR(mfs_bank_write_header(mfsp, MFS_BANK_1, 1));
 80022d4:	2101      	movs	r1, #1
 80022d6:	4608      	mov	r0, r1
 80022d8:	f7ff fdaa 	bl	8001e30 <mfs_bank_write_header.constprop.0>
 80022dc:	4603      	mov	r3, r0
 80022de:	2800      	cmp	r0, #0
 80022e0:	f43f aec8 	beq.w	8002074 <mfs_mount.part.0.constprop.0+0xd4>
 80022e4:	e6a6      	b.n	8002034 <mfs_mount.part.0.constprop.0+0x94>
 80022e6:	bf00      	nop
	...

080022f0 <chsnprintf.constprop.0>:
 *                      terminating NUL byte) that would have been
 *                      stored in @p str if there was room.
 *
 * @api
 */
int chsnprintf(char *str, size_t size, const char *fmt, ...) {
 80022f0:	b40c      	push	{r2, r3}
 80022f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f6:	b08d      	sub	sp, #52	; 0x34
 80022f8:	ac16      	add	r4, sp, #88	; 0x58
 80022fa:	f854 5b04 	ldr.w	r5, [r4], #4
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
  msp->buffer = buffer;
  msp->size   = size;
  msp->eos    = eos;
 80022fe:	2700      	movs	r7, #0
    c = *fmt++;
 8002300:	462a      	mov	r2, r5
  msp->size   = size;
 8002302:	20c7      	movs	r0, #199	; 0xc7
  msp->vmt    = &vmt;
 8002304:	4bbd      	ldr	r3, [pc, #756]	; (80025fc <chsnprintf.constprop.0+0x30c>)
 8002306:	f812 1b01 	ldrb.w	r1, [r2], #1
 800230a:	9307      	str	r3, [sp, #28]
  msp->buffer = buffer;
 800230c:	4bbc      	ldr	r3, [pc, #752]	; (8002600 <chsnprintf.constprop.0+0x310>)
  msp->eos    = eos;
 800230e:	e9cd 0709 	strd	r0, r7, [sp, #36]	; 0x24
  va_list ap;
  int retval;

  /* Performing the print operation.*/
  va_start(ap, fmt);
 8002312:	9403      	str	r4, [sp, #12]
  msp->offset = 0;
 8002314:	970b      	str	r7, [sp, #44]	; 0x2c
  msp->buffer = buffer;
 8002316:	9308      	str	r3, [sp, #32]
    if (c == 0) {
 8002318:	b961      	cbnz	r1, 8002334 <chsnprintf.constprop.0+0x44>
 800231a:	e24c      	b.n	80027b6 <chsnprintf.constprop.0+0x4c6>
      streamPut(chp, (uint8_t)c);
 800231c:	9b07      	ldr	r3, [sp, #28]
 800231e:	a807      	add	r0, sp, #28
 8002320:	68db      	ldr	r3, [r3, #12]
      n++;
 8002322:	4615      	mov	r5, r2
 8002324:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 8002326:	4798      	blx	r3
    c = *fmt++;
 8002328:	462a      	mov	r2, r5
 800232a:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 800232e:	2900      	cmp	r1, #0
 8002330:	f000 80c7 	beq.w	80024c2 <chsnprintf.constprop.0+0x1d2>
    if (c != '%') {
 8002334:	2925      	cmp	r1, #37	; 0x25
 8002336:	d1f1      	bne.n	800231c <chsnprintf.constprop.0+0x2c>
    if (*fmt == '-') {
 8002338:	786b      	ldrb	r3, [r5, #1]
 800233a:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 800233c:	bf08      	it	eq
 800233e:	1caa      	addeq	r2, r5, #2
    if (*fmt == '+') {
 8002340:	7813      	ldrb	r3, [r2, #0]
      left_align = true;
 8002342:	bf0c      	ite	eq
 8002344:	f04f 0e01 	moveq.w	lr, #1
    left_align = false;
 8002348:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '+') {
 800234c:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
 800234e:	bf05      	ittet	eq
 8002350:	2601      	moveq	r6, #1
 8002352:	7853      	ldrbeq	r3, [r2, #1]
    do_sign = false;
 8002354:	2600      	movne	r6, #0
      fmt++;
 8002356:	1992      	addeq	r2, r2, r6
    if (*fmt == '0') {
 8002358:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 800235a:	bf05      	ittet	eq
 800235c:	4698      	moveq	r8, r3
      fmt++;
 800235e:	7853      	ldrbeq	r3, [r2, #1]
    filler = ' ';
 8002360:	f04f 0820 	movne.w	r8, #32
      fmt++;
 8002364:	3201      	addeq	r2, #1
    if ( *fmt == '*') {
 8002366:	2b2a      	cmp	r3, #42	; 0x2a
 8002368:	f040 80b7 	bne.w	80024da <chsnprintf.constprop.0+0x1ea>
      width = va_arg(ap, int);
 800236c:	f854 1b04 	ldr.w	r1, [r4], #4
      c = *fmt++;
 8002370:	7853      	ldrb	r3, [r2, #1]
 8002372:	1c95      	adds	r5, r2, #2
    if (c == '.') {
 8002374:	2b2e      	cmp	r3, #46	; 0x2e
 8002376:	f000 8145 	beq.w	8002604 <chsnprintf.constprop.0+0x314>
    precision = 0;
 800237a:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 800237c:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 8002380:	284c      	cmp	r0, #76	; 0x4c
 8002382:	f000 80c3 	beq.w	800250c <chsnprintf.constprop.0+0x21c>
 8002386:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
 800238a:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 800238e:	f200 81ab 	bhi.w	80026e8 <chsnprintf.constprop.0+0x3f8>
 8002392:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8002396:	0177      	.short	0x0177
 8002398:	01a901a9 	.word	0x01a901a9
 800239c:	01a901a9 	.word	0x01a901a9
 80023a0:	01a90177 	.word	0x01a90177
 80023a4:	01a901a9 	.word	0x01a901a9
 80023a8:	01a901a9 	.word	0x01a901a9
 80023ac:	003501ad 	.word	0x003501ad
 80023b0:	01a901a9 	.word	0x01a901a9
 80023b4:	01a901a9 	.word	0x01a901a9
 80023b8:	01a9009f 	.word	0x01a9009f
 80023bc:	003501a9 	.word	0x003501a9
 80023c0:	01a901a9 	.word	0x01a901a9
 80023c4:	01a901a9 	.word	0x01a901a9
 80023c8:	01a901a9 	.word	0x01a901a9
 80023cc:	01a901a9 	.word	0x01a901a9
 80023d0:	01a901a9 	.word	0x01a901a9
 80023d4:	01770163 	.word	0x01770163
 80023d8:	01a901a9 	.word	0x01a901a9
 80023dc:	01a901a9 	.word	0x01a901a9
 80023e0:	01a90177 	.word	0x01a90177
 80023e4:	01a901a9 	.word	0x01a901a9
 80023e8:	01a901a9 	.word	0x01a901a9
 80023ec:	003501ad 	.word	0x003501ad
 80023f0:	01a901a9 	.word	0x01a901a9
 80023f4:	01a90142 	.word	0x01a90142
 80023f8:	01a9009f 	.word	0x01a9009f
 80023fc:	003501a9 	.word	0x003501a9
      if (c == 0) {
 8002400:	f04f 0c10 	mov.w	ip, #16
        l = va_arg(ap, unsigned int);
 8002404:	f854 2b04 	ldr.w	r2, [r4], #4
  q = p + MAX_FILLER;
 8002408:	f10d 031b 	add.w	r3, sp, #27
 800240c:	e000      	b.n	8002410 <chsnprintf.constprop.0+0x120>
  } while ((ll /= radix) != 0);
 800240e:	4633      	mov	r3, r6
    i = (int)(l % radix);
 8002410:	4691      	mov	r9, r2
 8002412:	fbb2 f2fc 	udiv	r2, r2, ip
 8002416:	fb0c 9a12 	mls	sl, ip, r2, r9
    i += '0';
 800241a:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    if (i > '9') {
 800241e:	2839      	cmp	r0, #57	; 0x39
      i += 'A' - '0' - 10;
 8002420:	bfc8      	it	gt
 8002422:	f10a 0037 	addgt.w	r0, sl, #55	; 0x37
    *--q = i;
 8002426:	b2c0      	uxtb	r0, r0
  } while ((ll /= radix) != 0);
 8002428:	45e1      	cmp	r9, ip
    *--q = i;
 800242a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800242e:	f803 0c01 	strb.w	r0, [r3, #-1]
  } while ((ll /= radix) != 0);
 8002432:	d2ec      	bcs.n	800240e <chsnprintf.constprop.0+0x11e>
 8002434:	f10d 091b 	add.w	r9, sp, #27
 8002438:	469a      	mov	sl, r3
  i = (int)(p + MAX_FILLER - q);
 800243a:	464b      	mov	r3, r9
 800243c:	aa04      	add	r2, sp, #16
 800243e:	1b9e      	subs	r6, r3, r6
 8002440:	4694      	mov	ip, r2
 8002442:	4653      	mov	r3, sl
 8002444:	e001      	b.n	800244a <chsnprintf.constprop.0+0x15a>
 8002446:	f813 0b01 	ldrb.w	r0, [r3], #1
  while (--i);
 800244a:	454b      	cmp	r3, r9
    *p++ = *q++;
 800244c:	f80c 0b01 	strb.w	r0, [ip], #1
  while (--i);
 8002450:	d1f9      	bne.n	8002446 <chsnprintf.constprop.0+0x156>
    s = tmpbuf;
 8002452:	4692      	mov	sl, r2
 8002454:	1b89      	subs	r1, r1, r6
 8002456:	3e01      	subs	r6, #1
 8002458:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 800245c:	f1be 0f00 	cmp.w	lr, #0
 8002460:	d104      	bne.n	800246c <chsnprintf.constprop.0+0x17c>
    if (width < 0) {
 8002462:	2900      	cmp	r1, #0
      width = -width;
 8002464:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8002468:	f300 8156 	bgt.w	8002718 <chsnprintf.constprop.0+0x428>
    while (--i >= 0) {
 800246c:	2e00      	cmp	r6, #0
 800246e:	db13      	blt.n	8002498 <chsnprintf.constprop.0+0x1a8>
 8002470:	f10d 0b1c 	add.w	fp, sp, #28
 8002474:	1c73      	adds	r3, r6, #1
 8002476:	4453      	add	r3, sl
 8002478:	9501      	str	r5, [sp, #4]
 800247a:	4625      	mov	r5, r4
 800247c:	465c      	mov	r4, fp
 800247e:	469b      	mov	fp, r3
      streamPut(chp, (uint8_t)*s++);
 8002480:	9a07      	ldr	r2, [sp, #28]
 8002482:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002486:	4620      	mov	r0, r4
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	4790      	blx	r2
    while (--i >= 0) {
 800248c:	45da      	cmp	sl, fp
 800248e:	d1f7      	bne.n	8002480 <chsnprintf.constprop.0+0x190>
 8002490:	462c      	mov	r4, r5
 8002492:	3701      	adds	r7, #1
 8002494:	9d01      	ldr	r5, [sp, #4]
 8002496:	4437      	add	r7, r6
    while (width) {
 8002498:	f1b9 0f00 	cmp.w	r9, #0
 800249c:	f43f af44 	beq.w	8002328 <chsnprintf.constprop.0+0x38>
 80024a0:	464e      	mov	r6, r9
 80024a2:	f10d 0b1c 	add.w	fp, sp, #28
      streamPut(chp, (uint8_t)filler);
 80024a6:	9b07      	ldr	r3, [sp, #28]
 80024a8:	4641      	mov	r1, r8
 80024aa:	4658      	mov	r0, fp
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4798      	blx	r3
    while (width) {
 80024b0:	3e01      	subs	r6, #1
 80024b2:	d1f8      	bne.n	80024a6 <chsnprintf.constprop.0+0x1b6>
    c = *fmt++;
 80024b4:	462a      	mov	r2, r5
 80024b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80024ba:	444f      	add	r7, r9
    if (c == 0) {
 80024bc:	2900      	cmp	r1, #0
 80024be:	f47f af39 	bne.w	8002334 <chsnprintf.constprop.0+0x44>
 80024c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  /* Performing the print operation using the common code.*/
  chp = (BaseSequentialStream *)(void *)&ms;
  retval = chvprintf(chp, fmt, ap);

  /* Terminate with a zero, unless size==0.*/
  if (ms.eos < size) {
 80024c4:	29c7      	cmp	r1, #199	; 0xc7
 80024c6:	d91d      	bls.n	8002504 <chsnprintf.constprop.0+0x214>
}
 80024c8:	4638      	mov	r0, r7
 80024ca:	b00d      	add	sp, #52	; 0x34
 80024cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d0:	b002      	add	sp, #8
 80024d2:	4770      	bx	lr
      if (c == 0) {
 80024d4:	f04f 0c0a 	mov.w	ip, #10
 80024d8:	e794      	b.n	8002404 <chsnprintf.constprop.0+0x114>
        c = *fmt++;
 80024da:	1c55      	adds	r5, r2, #1
        if (c == 0) {
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <chsnprintf.constprop.0+0x1d2>
      width = 0;
 80024e0:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 80024e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 80024ea:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 80024ee:	f63f af41 	bhi.w	8002374 <chsnprintf.constprop.0+0x84>
        c = *fmt++;
 80024f2:	f815 3b01 	ldrb.w	r3, [r5], #1
          width = width * 10 + c;
 80024f6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
        if (c == 0) {
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f1      	bne.n	80024e2 <chsnprintf.constprop.0+0x1f2>
 80024fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  if (ms.eos < size) {
 8002500:	29c7      	cmp	r1, #199	; 0xc7
 8002502:	d8e1      	bhi.n	80024c8 <chsnprintf.constprop.0+0x1d8>
    str[ms.eos] = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <chsnprintf.constprop.0+0x310>)
 8002508:	5453      	strb	r3, [r2, r1]
 800250a:	e7dd      	b.n	80024c8 <chsnprintf.constprop.0+0x1d8>
      c = *fmt++;
 800250c:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (c == 0) {
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0d6      	beq.n	80024c2 <chsnprintf.constprop.0+0x1d2>
 8002514:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
 8002518:	2834      	cmp	r0, #52	; 0x34
 800251a:	f200 80e5 	bhi.w	80026e8 <chsnprintf.constprop.0+0x3f8>
 800251e:	f20f 0c08 	addw	ip, pc, #8
 8002522:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002685 	.word	0x08002685
 800252c:	080026e9 	.word	0x080026e9
 8002530:	080026e9 	.word	0x080026e9
 8002534:	080026e9 	.word	0x080026e9
 8002538:	080026e9 	.word	0x080026e9
 800253c:	08002685 	.word	0x08002685
 8002540:	080026e9 	.word	0x080026e9
 8002544:	080026e9 	.word	0x080026e9
 8002548:	080026e9 	.word	0x080026e9
 800254c:	080026e9 	.word	0x080026e9
 8002550:	080026e9 	.word	0x080026e9
 8002554:	080026f1 	.word	0x080026f1
 8002558:	08002401 	.word	0x08002401
 800255c:	080026e9 	.word	0x080026e9
 8002560:	080026e9 	.word	0x080026e9
 8002564:	080026e9 	.word	0x080026e9
 8002568:	080026e9 	.word	0x080026e9
 800256c:	080024d5 	.word	0x080024d5
 8002570:	080026e9 	.word	0x080026e9
 8002574:	080026e9 	.word	0x080026e9
 8002578:	08002401 	.word	0x08002401
 800257c:	080026e9 	.word	0x080026e9
 8002580:	080026e9 	.word	0x080026e9
 8002584:	080026e9 	.word	0x080026e9
 8002588:	080026e9 	.word	0x080026e9
 800258c:	080026e9 	.word	0x080026e9
 8002590:	080026e9 	.word	0x080026e9
 8002594:	080026e9 	.word	0x080026e9
 8002598:	080026e9 	.word	0x080026e9
 800259c:	080026e9 	.word	0x080026e9
 80025a0:	080026e9 	.word	0x080026e9
 80025a4:	0800265d 	.word	0x0800265d
 80025a8:	08002685 	.word	0x08002685
 80025ac:	080026e9 	.word	0x080026e9
 80025b0:	080026e9 	.word	0x080026e9
 80025b4:	080026e9 	.word	0x080026e9
 80025b8:	080026e9 	.word	0x080026e9
 80025bc:	08002685 	.word	0x08002685
 80025c0:	080026e9 	.word	0x080026e9
 80025c4:	080026e9 	.word	0x080026e9
 80025c8:	080026e9 	.word	0x080026e9
 80025cc:	080026e9 	.word	0x080026e9
 80025d0:	080026e9 	.word	0x080026e9
 80025d4:	080026f1 	.word	0x080026f1
 80025d8:	08002401 	.word	0x08002401
 80025dc:	080026e9 	.word	0x080026e9
 80025e0:	080026e9 	.word	0x080026e9
 80025e4:	0800261b 	.word	0x0800261b
 80025e8:	080026e9 	.word	0x080026e9
 80025ec:	080024d5 	.word	0x080024d5
 80025f0:	080026e9 	.word	0x080026e9
 80025f4:	080026e9 	.word	0x080026e9
 80025f8:	08002401 	.word	0x08002401
 80025fc:	0800548c 	.word	0x0800548c
 8002600:	2000089c 	.word	0x2000089c
      c = *fmt++;
 8002604:	782b      	ldrb	r3, [r5, #0]
      if (c == 0) {
 8002606:	2b00      	cmp	r3, #0
 8002608:	f43f af5b 	beq.w	80024c2 <chsnprintf.constprop.0+0x1d2>
      if (c == '*') {
 800260c:	2b2a      	cmp	r3, #42	; 0x2a
 800260e:	d172      	bne.n	80026f6 <chsnprintf.constprop.0+0x406>
        c = *fmt++;
 8002610:	786b      	ldrb	r3, [r5, #1]
        precision = va_arg(ap, int);
 8002612:	f854 2b04 	ldr.w	r2, [r4], #4
        c = *fmt++;
 8002616:	3502      	adds	r5, #2
 8002618:	e6b0      	b.n	800237c <chsnprintf.constprop.0+0x8c>
      if ((s = va_arg(ap, char *)) == 0) {
 800261a:	f854 ab04 	ldr.w	sl, [r4], #4
 800261e:	f1ba 0f00 	cmp.w	sl, #0
 8002622:	f000 80bf 	beq.w	80027a4 <chsnprintf.constprop.0+0x4b4>
 8002626:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 800262a:	2a00      	cmp	r2, #0
 800262c:	f040 80aa 	bne.w	8002784 <chsnprintf.constprop.0+0x494>
      for (p = s; *p && (--precision >= 0); p++)
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ab 	beq.w	800278c <chsnprintf.constprop.0+0x49c>
 8002636:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800263a:	4656      	mov	r6, sl
 800263c:	e001      	b.n	8002642 <chsnprintf.constprop.0+0x352>
 800263e:	42d3      	cmn	r3, r2
 8002640:	d405      	bmi.n	800264e <chsnprintf.constprop.0+0x35e>
 8002642:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8002646:	ebaa 0306 	sub.w	r3, sl, r6
 800264a:	2800      	cmp	r0, #0
 800264c:	d1f7      	bne.n	800263e <chsnprintf.constprop.0+0x34e>
 800264e:	eba6 060a 	sub.w	r6, r6, sl
 8002652:	1b89      	subs	r1, r1, r6
      filler = ' ';
 8002654:	f04f 0820 	mov.w	r8, #32
 8002658:	3e01      	subs	r6, #1
 800265a:	e6fd      	b.n	8002458 <chsnprintf.constprop.0+0x168>
      filler = ' ';
 800265c:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
 8002660:	f854 3b04 	ldr.w	r3, [r4], #4
 8002664:	3901      	subs	r1, #1
 8002666:	f88d 3010 	strb.w	r3, [sp, #16]
 800266a:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 800266e:	f1be 0f00 	cmp.w	lr, #0
 8002672:	d103      	bne.n	800267c <chsnprintf.constprop.0+0x38c>
    if (width < 0) {
 8002674:	2900      	cmp	r1, #0
      width = -width;
 8002676:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 800267a:	dc7d      	bgt.n	8002778 <chsnprintf.constprop.0+0x488>
    if (left_align == false) {
 800267c:	2600      	movs	r6, #0
 800267e:	f10d 0a10 	add.w	sl, sp, #16
 8002682:	e6f5      	b.n	8002470 <chsnprintf.constprop.0+0x180>
        l = va_arg(ap, int);
 8002684:	f854 9b04 	ldr.w	r9, [r4], #4
      if (l < 0) {
 8002688:	f1b9 0f00 	cmp.w	r9, #0
 800268c:	db6b      	blt.n	8002766 <chsnprintf.constprop.0+0x476>
        if (do_sign) {
 800268e:	2e00      	cmp	r6, #0
 8002690:	f000 808e 	beq.w	80027b0 <chsnprintf.constprop.0+0x4c0>
          *p++ = '+';
 8002694:	232b      	movs	r3, #43	; 0x2b
 8002696:	f10d 0611 	add.w	r6, sp, #17
 800269a:	f88d 3010 	strb.w	r3, [sp, #16]
 800269e:	aa04      	add	r2, sp, #16
  q = p + MAX_FILLER;
 80026a0:	f106 0b0b 	add.w	fp, r6, #11
 80026a4:	4658      	mov	r0, fp
    i = (int)(l % radix);
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <chsnprintf.constprop.0+0x4d8>)
 80026a8:	46ca      	mov	sl, r9
 80026aa:	fba3 c309 	umull	ip, r3, r3, r9
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	469c      	mov	ip, r3
 80026b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026b6:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
    i += '0';
 80026ba:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80026bc:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80026be:	f1ba 0f09 	cmp.w	sl, #9
    l /= radix;
 80026c2:	46e1      	mov	r9, ip
    *--q = i;
 80026c4:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 80026c8:	dced      	bgt.n	80026a6 <chsnprintf.constprop.0+0x3b6>
  i = (int)(p + MAX_FILLER - q);
 80026ca:	ebab 0b00 	sub.w	fp, fp, r0
 80026ce:	44b3      	add	fp, r6
 80026d0:	e001      	b.n	80026d6 <chsnprintf.constprop.0+0x3e6>
 80026d2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 80026d6:	f806 3b01 	strb.w	r3, [r6], #1
  while (--i);
 80026da:	455e      	cmp	r6, fp
 80026dc:	d1f9      	bne.n	80026d2 <chsnprintf.constprop.0+0x3e2>
 80026de:	1ab6      	subs	r6, r6, r2
 80026e0:	1b89      	subs	r1, r1, r6
    s = tmpbuf;
 80026e2:	4692      	mov	sl, r2
 80026e4:	3e01      	subs	r6, #1
 80026e6:	e6b7      	b.n	8002458 <chsnprintf.constprop.0+0x168>
      *p++ = c;
 80026e8:	f88d 3010 	strb.w	r3, [sp, #16]
 80026ec:	3901      	subs	r1, #1
 80026ee:	e7bc      	b.n	800266a <chsnprintf.constprop.0+0x37a>
      if (c == 0) {
 80026f0:	f04f 0c08 	mov.w	ip, #8
 80026f4:	e686      	b.n	8002404 <chsnprintf.constprop.0+0x114>
    precision = 0;
 80026f6:	2200      	movs	r2, #0
      c = *fmt++;
 80026f8:	3501      	adds	r5, #1
        while (c >= '0' && c <= '9') {
 80026fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80026fe:	b2c0      	uxtb	r0, r0
 8002700:	2809      	cmp	r0, #9
          precision = precision * 10 + c;
 8002702:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002706:	f63f ae39 	bhi.w	800237c <chsnprintf.constprop.0+0x8c>
          c = *fmt++;
 800270a:	f815 3b01 	ldrb.w	r3, [r5], #1
          precision = precision * 10 + c;
 800270e:	eb00 024c 	add.w	r2, r0, ip, lsl #1
          if (c == 0) {
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f1      	bne.n	80026fa <chsnprintf.constprop.0+0x40a>
 8002716:	e6d4      	b.n	80024c2 <chsnprintf.constprop.0+0x1d2>
      width = -width;
 8002718:	f8cd 9004 	str.w	r9, [sp, #4]
      if ((*s == '-' || *s == '+') && filler == '0') {
 800271c:	f89a 1000 	ldrb.w	r1, [sl]
 8002720:	292d      	cmp	r1, #45	; 0x2d
 8002722:	d012      	beq.n	800274a <chsnprintf.constprop.0+0x45a>
 8002724:	292b      	cmp	r1, #43	; 0x2b
 8002726:	d010      	beq.n	800274a <chsnprintf.constprop.0+0x45a>
 8002728:	f10d 0b1c 	add.w	fp, sp, #28
        streamPut(chp, (uint8_t)filler);
 800272c:	9b07      	ldr	r3, [sp, #28]
 800272e:	4641      	mov	r1, r8
 8002730:	4658      	mov	r0, fp
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4798      	blx	r3
      } while (++width != 0);
 8002736:	f119 0901 	adds.w	r9, r9, #1
 800273a:	d1f7      	bne.n	800272c <chsnprintf.constprop.0+0x43c>
 800273c:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 800273e:	2e00      	cmp	r6, #0
 8002740:	eba7 0703 	sub.w	r7, r7, r3
 8002744:	f6bf ae96 	bge.w	8002474 <chsnprintf.constprop.0+0x184>
 8002748:	e5ee      	b.n	8002328 <chsnprintf.constprop.0+0x38>
      if ((*s == '-' || *s == '+') && filler == '0') {
 800274a:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 800274e:	d1eb      	bne.n	8002728 <chsnprintf.constprop.0+0x438>
        streamPut(chp, (uint8_t)*s++);
 8002750:	9a07      	ldr	r2, [sp, #28]
 8002752:	f10d 0b1c 	add.w	fp, sp, #28
 8002756:	4658      	mov	r0, fp
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	4790      	blx	r2
 800275c:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8002760:	3701      	adds	r7, #1
 8002762:	3e01      	subs	r6, #1
 8002764:	e7e2      	b.n	800272c <chsnprintf.constprop.0+0x43c>
        *p++ = '-';
 8002766:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002768:	f1c9 0900 	rsb	r9, r9, #0
        *p++ = '-';
 800276c:	f88d 3010 	strb.w	r3, [sp, #16]
 8002770:	f10d 0611 	add.w	r6, sp, #17
 8002774:	aa04      	add	r2, sp, #16
 8002776:	e793      	b.n	80026a0 <chsnprintf.constprop.0+0x3b0>
    if (width < 0) {
 8002778:	4676      	mov	r6, lr
      width = -width;
 800277a:	f8cd 9004 	str.w	r9, [sp, #4]
    if (width < 0) {
 800277e:	f10d 0a10 	add.w	sl, sp, #16
 8002782:	e7cb      	b.n	800271c <chsnprintf.constprop.0+0x42c>
      for (p = s; *p && (--precision >= 0); p++)
 8002784:	b113      	cbz	r3, 800278c <chsnprintf.constprop.0+0x49c>
 8002786:	3a01      	subs	r2, #1
 8002788:	f57f af57 	bpl.w	800263a <chsnprintf.constprop.0+0x34a>
 800278c:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8002790:	f1be 0f00 	cmp.w	lr, #0
 8002794:	d103      	bne.n	800279e <chsnprintf.constprop.0+0x4ae>
    if (width < 0) {
 8002796:	2900      	cmp	r1, #0
      width = -width;
 8002798:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 800279c:	dc0d      	bgt.n	80027ba <chsnprintf.constprop.0+0x4ca>
    if (left_align == false) {
 800279e:	f04f 0820 	mov.w	r8, #32
 80027a2:	e679      	b.n	8002498 <chsnprintf.constprop.0+0x1a8>
        s = "(null)";
 80027a4:	f8df a024 	ldr.w	sl, [pc, #36]	; 80027cc <chsnprintf.constprop.0+0x4dc>
      if (precision == 0) {
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	f43f af44 	beq.w	8002636 <chsnprintf.constprop.0+0x346>
 80027ae:	e7ea      	b.n	8002786 <chsnprintf.constprop.0+0x496>
    p = tmpbuf;
 80027b0:	aa04      	add	r2, sp, #16
 80027b2:	4616      	mov	r6, r2
 80027b4:	e774      	b.n	80026a0 <chsnprintf.constprop.0+0x3b0>
  int n = 0;
 80027b6:	460f      	mov	r7, r1
 80027b8:	e6a4      	b.n	8002504 <chsnprintf.constprop.0+0x214>
    if (width < 0) {
 80027ba:	f04f 0820 	mov.w	r8, #32
 80027be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
      width = -width;
 80027c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80027c6:	e7a9      	b.n	800271c <chsnprintf.constprop.0+0x42c>
 80027c8:	cccccccd 	.word	0xcccccccd
 80027cc:	08004f34 	.word	0x08004f34

080027d0 <_ZL10UartThreadPv>:

static int counter = 0;

static THD_WORKING_AREA(waUartThread, 256);
static void UartThread(void*)
{
 80027d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80027d4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80028e0 <_ZL10UartThreadPv+0x110>
 80027d8:	4e3c      	ldr	r6, [pc, #240]	; (80028cc <_ZL10UartThreadPv+0xfc>)
 80027da:	4c3d      	ldr	r4, [pc, #244]	; (80028d0 <_ZL10UartThreadPv+0x100>)
 80027dc:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80028f0 <_ZL10UartThreadPv+0x120>
 80027e0:	f8df b110 	ldr.w	fp, [pc, #272]	; 80028f4 <_ZL10UartThreadPv+0x124>
 80027e4:	f8df a110 	ldr.w	sl, [pc, #272]	; 80028f8 <_ZL10UartThreadPv+0x128>
 80027e8:	4d3a      	ldr	r5, [pc, #232]	; (80028d4 <_ZL10UartThreadPv+0x104>)
    while (true) {
        counter = (counter + 1) % 1000;
 80027ea:	4f3b      	ldr	r7, [pc, #236]	; (80028d8 <_ZL10UartThreadPv+0x108>)
{
 80027ec:	b08b      	sub	sp, #44	; 0x2c
 80027ee:	e038      	b.n	8002862 <_ZL10UartThreadPv+0x92>

        size_t writeCount;
        if (chip.fault != McFault::None) {
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "FAULT fault=%d status=%x status2=%x 0x1A6=%x 0x1A7=%x 0x1A8=%x\r\n",
 80027f0:	89e1      	ldrh	r1, [r4, #14]
 80027f2:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 80027f6:	9104      	str	r1, [sp, #16]
 80027f8:	8961      	ldrh	r1, [r4, #10]
 80027fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80027fe:	9102      	str	r1, [sp, #8]
 8002800:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8002804:	88e1      	ldrh	r1, [r4, #6]
 8002806:	e9cd 1c00 	strd	r1, ip, [sp]
 800280a:	21c8      	movs	r1, #200	; 0xc8
 800280c:	f7ff fd70 	bl	80022f0 <chsnprintf.constprop.0>
 8002810:	2320      	movs	r3, #32
 8002812:	f383 8811 	msr	BASEPRI, r3
     if called from uartSendFullTimeout(). Also we need to clear TC flag
     which could be set before.*/
#if UART_USE_WAIT == TRUE
  if ((uartp->config->txend2_cb != NULL) || (uartp->early == false)) {
#else
  if (uartp->config->txend2_cb != NULL) {
 8002816:	686a      	ldr	r2, [r5, #4]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002818:	69ab      	ldr	r3, [r5, #24]
  if (uartp->config->txend2_cb != NULL) {
 800281a:	f8d2 e004 	ldr.w	lr, [r2, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmatxmode  | STM32_DMA_CR_DIR_M2P |
 800281e:	692a      	ldr	r2, [r5, #16]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002820:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmatxmode  | STM32_DMA_CR_DIR_M2P |
 8002822:	f042 0292 	orr.w	r2, r2, #146	; 0x92
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002826:	f8c3 800c 	str.w	r8, [r3, #12]
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");

  uart_lld_start_send(uartp, n, txbuf);
  uartp->txstate = UART_TX_ACTIVE;
 800282a:	f04f 0c01 	mov.w	ip, #1
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 800282e:	6058      	str	r0, [r3, #4]
 8002830:	2100      	movs	r1, #0
  dmaStreamSetMode(uartp->dmatx, uartp->dmatxmode  | STM32_DMA_CR_DIR_M2P |
 8002832:	601a      	str	r2, [r3, #0]
  if (uartp->config->txend2_cb != NULL) {
 8002834:	f1be 0f00 	cmp.w	lr, #0
 8002838:	d007      	beq.n	800284a <_ZL10UartThreadPv+0x7a>
#endif
    uartp->usart->SR = ~USART_SR_TC;
 800283a:	f06f 0040 	mvn.w	r0, #64	; 0x40
 800283e:	68aa      	ldr	r2, [r5, #8]
 8002840:	6010      	str	r0, [r2, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8002842:	68d0      	ldr	r0, [r2, #12]
 8002844:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002848:	60d0      	str	r0, [r2, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f885 c001 	strb.w	ip, [r5, #1]
 8002856:	f381 8811 	msr	BASEPRI, r1
                canWriteOk, canWriteNotOk);

            }
        uartStartSend(&UARTD1, writeCount, printBuffer);

        chThdSleepMilliseconds(200);
 800285a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800285e:	f7ff fa27 	bl	8001cb0 <chThdSleep>
        counter = (counter + 1) % 1000;
 8002862:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8002866:	6833      	ldr	r3, [r6, #0]
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "FAULT fault=%d status=%x status2=%x 0x1A6=%x 0x1A7=%x 0x1A8=%x\r\n",
 8002868:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <_ZL10UartThreadPv+0x10c>)
        counter = (counter + 1) % 1000;
 800286a:	3301      	adds	r3, #1
 800286c:	fb87 1e03 	smull	r1, lr, r7, r3
 8002870:	17d9      	asrs	r1, r3, #31
 8002872:	ebc1 11ae 	rsb	r1, r1, lr, asr #6
 8002876:	fb0c 3111 	mls	r1, ip, r1, r3
        if (chip.fault != McFault::None) {
 800287a:	7923      	ldrb	r3, [r4, #4]
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "FAULT fault=%d status=%x status2=%x 0x1A6=%x 0x1A7=%x 0x1A8=%x\r\n",
 800287c:	4818      	ldr	r0, [pc, #96]	; (80028e0 <_ZL10UartThreadPv+0x110>)
        counter = (counter + 1) % 1000;
 800287e:	6031      	str	r1, [r6, #0]
        if (chip.fault != McFault::None) {
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1b5      	bne.n	80027f0 <_ZL10UartThreadPv+0x20>
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "%x %d %d HAPPY fault=%d status=%x status2=%x flash=%d %d CAN o/e %d %d\r\n",
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <_ZL10UartThreadPv+0x114>)
 8002886:	f992 0000 	ldrsb.w	r0, [r2]
 800288a:	9106      	str	r1, [sp, #24]
 800288c:	f8db 1000 	ldr.w	r1, [fp]
 8002890:	8922      	ldrh	r2, [r4, #8]
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	88e3      	ldrh	r3, [r4, #6]
 8002896:	9108      	str	r1, [sp, #32]
 8002898:	f8da 1000 	ldr.w	r1, [sl]
 800289c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80028a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028a4:	9107      	str	r1, [sp, #28]
 80028a6:	9005      	str	r0, [sp, #20]
                (int)(configuration.PumpPeakCurrent * 1000),
 80028a8:	490f      	ldr	r1, [pc, #60]	; (80028e8 <_ZL10UartThreadPv+0x118>)
 80028aa:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "%x %d %d HAPPY fault=%d status=%x status2=%x flash=%d %d CAN o/e %d %d\r\n",
 80028ae:	9301      	str	r3, [sp, #4]
                (int)(configuration.PumpPeakCurrent * 1000),
 80028b0:	f7fd fce4 	bl	800027c <__aeabi_fmul>
            writeCount  = chsnprintf(printBuffer, sizeof(printBuffer), "%x %d %d HAPPY fault=%d status=%x status2=%x flash=%d %d CAN o/e %d %d\r\n",
 80028b4:	f7fd ff1a 	bl	80006ec <__aeabi_f2iz>
 80028b8:	21c8      	movs	r1, #200	; 0xc8
 80028ba:	9000      	str	r0, [sp, #0]
 80028bc:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <_ZL10UartThreadPv+0x11c>)
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <_ZL10UartThreadPv+0x110>)
 80028c4:	f7ff fd14 	bl	80022f0 <chsnprintf.constprop.0>
 80028c8:	e7a2      	b.n	8002810 <_ZL10UartThreadPv+0x40>
 80028ca:	bf00      	nop
 80028cc:	200010c4 	.word	0x200010c4
 80028d0:	20001270 	.word	0x20001270
 80028d4:	2000087c 	.word	0x2000087c
 80028d8:	10624dd3 	.word	0x10624dd3
 80028dc:	08004f3c 	.word	0x08004f3c
 80028e0:	2000089c 	.word	0x2000089c
 80028e4:	2000131e 	.word	0x2000131e
 80028e8:	447a0000 	.word	0x447a0000
 80028ec:	08004f80 	.word	0x08004f80
 80028f0:	20001284 	.word	0x20001284
 80028f4:	200010c8 	.word	0x200010c8
 80028f8:	200010cc 	.word	0x200010cc
 80028fc:	00000000 	.word	0x00000000

08002900 <_ZN6Pt20019sendLargeEPKtj>:
	void sendLarge(const uint16_t* data, size_t count) override {
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		spiSend(driver, count, data);
 8002902:	6903      	ldr	r3, [r0, #16]
 8002904:	2020      	movs	r0, #32
 8002906:	f380 8811 	msr	BASEPRI, r0
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 800290a:	2003      	movs	r0, #3
  *trp = tp;
 800290c:	461e      	mov	r6, r3
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800290e:	6a1d      	ldr	r5, [r3, #32]
 8002910:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002912:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002914:	686d      	ldr	r5, [r5, #4]
 8002916:	4f0f      	ldr	r7, [pc, #60]	; (8002954 <_ZN6Pt20019sendLargeEPKtj+0x54>)
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002918:	6864      	ldr	r4, [r4, #4]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800291a:	60ef      	str	r7, [r5, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800291c:	e9d3 730a 	ldrd	r7, r3, [r3, #40]	; 0x28
 8002920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002924:	606a      	str	r2, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002926:	602f      	str	r7, [r5, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002928:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800292a:	6062      	str	r2, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800292c:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmarx);
 800292e:	682b      	ldr	r3, [r5, #0]
  return ch.rlist.current;
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <_ZN6Pt20019sendLargeEPKtj+0x58>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	602b      	str	r3, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	6992      	ldr	r2, [r2, #24]
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	f846 2f08 	str.w	r2, [r6, #8]!
  tp->u.wttrp = trp;
 8002946:	6256      	str	r6, [r2, #36]	; 0x24
    chSchGoSleepS(newstate);
 8002948:	f7fe fff2 	bl	8001930 <chSchGoSleepS>
 800294c:	2300      	movs	r3, #0
 800294e:	f383 8811 	msr	BASEPRI, r3
	}
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002954:	2000131c 	.word	0x2000131c
 8002958:	200010d0 	.word	0x200010d0
 800295c:	00000000 	.word	0x00000000

08002960 <_ZN10Pt2001Base11downloadRamEi.constprop.0>:
	send(0x2401); //ch2
	send(0x0018); // enable flash
	deselect();
}

void Pt2001Base::downloadRam(int target) {
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	460c      	mov	r4, r1
 8002964:	4605      	mov	r5, r0
	uint16_t size = 0;               // size of RAM data
	uint16_t command = 0;            // command data
	const uint16_t *RAM_ptr = nullptr;               // pointer to array of data to be sent to the chip

	//Why Again? For Every time, just in case?
	setupSpi();
 8002966:	f7fe f97b 	bl	8000c60 <_ZN10Pt2001Base8setupSpiEv.constprop.0>
 800296a:	483d      	ldr	r0, [pc, #244]	; (8002a60 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x100>)
 800296c:	493d      	ldr	r1, [pc, #244]	; (8002a64 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x104>)
 800296e:	4a3e      	ldr	r2, [pc, #248]	; (8002a68 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x108>)
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x10c>)
 8002972:	f830 7014 	ldrh.w	r7, [r0, r4, lsl #1]
 8002976:	f831 6014 	ldrh.w	r6, [r1, r4, lsl #1]
 800297a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800297e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002982:	2220      	movs	r2, #32
		spiSelect(driver);
 8002984:	6929      	ldr	r1, [r5, #16]
 8002986:	f382 8811 	msr	BASEPRI, r2
  spiSelectI(spip);
 800298a:	2201      	movs	r2, #1
 800298c:	6849      	ldr	r1, [r1, #4]
 800298e:	f04f 0c00 	mov.w	ip, #0
 8002992:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8002996:	6889      	ldr	r1, [r1, #8]
 8002998:	fa02 f20e 	lsl.w	r2, r2, lr
 800299c:	614a      	str	r2, [r1, #20]
 800299e:	f38c 8811 	msr	BASEPRI, ip
	}

	// Chip-Select high
	select();

	if (target != DATA_RAM)
 80029a2:	2c02      	cmp	r4, #2
		return spiPolledExchange(driver, tx);
 80029a4:	692a      	ldr	r2, [r5, #16]
 80029a6:	d059      	beq.n	8002a5c <_ZN10Pt2001Base11downloadRamEi.constprop.0+0xfc>
	{
		command = codeWidthRegAddr << 5;   // control width register address
 80029a8:	0159      	lsls	r1, r3, #5
 80029aa:	b289      	uxth	r1, r1
  spip->spi->DR = frame;
 80029ac:	69d3      	ldr	r3, [r2, #28]
 80029ae:	f041 0101 	orr.w	r1, r1, #1
 80029b2:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	07c9      	lsls	r1, r1, #31
 80029b8:	d5fc      	bpl.n	80029b4 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x54>
  return spip->spi->DR;
 80029ba:	68d9      	ldr	r1, [r3, #12]
  spip->spi->DR = frame;
 80029bc:	60de      	str	r6, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	07cc      	lsls	r4, r1, #31
 80029c2:	d5fc      	bpl.n	80029be <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x5e>
  return spip->spi->DR;
 80029c4:	68d9      	ldr	r1, [r3, #12]
  spip->spi->DR = frame;
 80029c6:	f647 71e1 	movw	r1, #32737	; 0x7fe1
 80029ca:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	07c9      	lsls	r1, r1, #31
 80029d0:	d5fc      	bpl.n	80029cc <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x6c>
  return spip->spi->DR;
 80029d2:	68d9      	ldr	r1, [r3, #12]
  spip->spi->DR = frame;
 80029d4:	60df      	str	r7, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	07cc      	lsls	r4, r1, #31
 80029da:	d5fc      	bpl.n	80029d6 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x76>
  spip->spi->DR = frame;
 80029dc:	2100      	movs	r1, #0
  return spip->spi->DR;
 80029de:	68dc      	ldr	r4, [r3, #12]
  spip->spi->DR = frame;
 80029e0:	60d9      	str	r1, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	07c9      	lsls	r1, r1, #31
 80029e6:	d5fc      	bpl.n	80029e2 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x82>
 80029e8:	2720      	movs	r7, #32
  return spip->spi->DR;
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f387 8811 	msr	BASEPRI, r7
  spiStartSendI(spip, n, txbuf);
 80029f0:	f04f 0c03 	mov.w	ip, #3
  *trp = tp;
 80029f4:	4614      	mov	r4, r2
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80029f6:	6a11      	ldr	r1, [r2, #32]
 80029f8:	f882 c000 	strb.w	ip, [r2]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80029fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80029fe:	6849      	ldr	r1, [r1, #4]
 8002a00:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002a74 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x114>
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a04:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002a06:	f8c1 e00c 	str.w	lr, [r1, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a0a:	e9d2 e20a 	ldrd	lr, r2, [r2, #40]	; 0x28
 8002a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002a12:	604e      	str	r6, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002a14:	f8c1 e000 	str.w	lr, [r1]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a18:	60d8      	str	r0, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002a1a:	605e      	str	r6, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a1c:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 8002a1e:	680a      	ldr	r2, [r1, #0]
 8002a20:	4813      	ldr	r0, [pc, #76]	; (8002a70 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x110>)
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	600a      	str	r2, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	6981      	ldr	r1, [r0, #24]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f844 1f08 	str.w	r1, [r4, #8]!
 8002a36:	4660      	mov	r0, ip
  tp->u.wttrp = trp;
 8002a38:	624c      	str	r4, [r1, #36]	; 0x24
 8002a3a:	f7fe ff79 	bl	8001930 <chSchGoSleepS>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f382 8811 	msr	BASEPRI, r2
		spiUnselect(driver);
 8002a44:	6929      	ldr	r1, [r5, #16]
 8002a46:	f387 8811 	msr	BASEPRI, r7
  spiUnselectI(spip);
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	6849      	ldr	r1, [r1, #4]
 8002a4e:	68c8      	ldr	r0, [r1, #12]
 8002a50:	6889      	ldr	r1, [r1, #8]
 8002a52:	4083      	lsls	r3, r0
 8002a54:	610b      	str	r3, [r1, #16]
 8002a56:	f382 8811 	msr	BASEPRI, r2
	command = start_address << 5;
	send(command);           // sends start address command

	sendLarge(RAM_ptr, size);
	deselect();
}
 8002a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a5c:	69d3      	ldr	r3, [r2, #28]
 8002a5e:	e7b2      	b.n	80029c6 <_ZN10Pt2001Base11downloadRamEi.constprop.0+0x66>
 8002a60:	08004fd4 	.word	0x08004fd4
 8002a64:	08004fe4 	.word	0x08004fe4
 8002a68:	08004fec 	.word	0x08004fec
 8002a6c:	08004fdc 	.word	0x08004fdc
 8002a70:	200010d0 	.word	0x200010d0
 8002a74:	2000131c 	.word	0x2000131c
	...

08002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>:

void Pt2001Base::downloadRegister(int r_target) {
 8002a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x158>)
 8002a86:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x15c>)
 8002a88:	f833 6011 	ldrh.w	r6, [r3, r1, lsl #1]
 8002a8c:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x160>)
	// if location = max xfer
	//
	// retrieve data, send it, increase pointer
	// increase

	if (r_size > MAX_SPI_MODE_A_TRANSFER_SIZE)   //if size is too large, split into two sections ... MULTIPLE sections..
 8002a8e:	2e1f      	cmp	r6, #31
void Pt2001Base::downloadRegister(int r_target) {
 8002a90:	4604      	mov	r4, r0
 8002a92:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
 8002a96:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
	if (r_size > MAX_SPI_MODE_A_TRANSFER_SIZE)   //if size is too large, split into two sections ... MULTIPLE sections..
 8002a9a:	f240 8099 	bls.w	8002bd0 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x150>
	{
		remainder_size = r_size - MAX_SPI_MODE_A_TRANSFER_SIZE;  // creates remaining size
 8002a9e:	f1a6 071f 	sub.w	r7, r6, #31
 8002aa2:	261f      	movs	r6, #31
		r_size = MAX_SPI_MODE_A_TRANSFER_SIZE;                   // sets first size
 8002aa4:	46b1      	mov	r9, r6
		remainder_size = r_size - MAX_SPI_MODE_A_TRANSFER_SIZE;  // creates remaining size
 8002aa6:	b2bf      	uxth	r7, r7
	}

	r_command = r_start_address << 5;      // start address
 8002aa8:	016a      	lsls	r2, r5, #5
 8002aaa:	b292      	uxth	r2, r2
		spiSelect(driver);
 8002aac:	6921      	ldr	r1, [r4, #16]
 8002aae:	2320      	movs	r3, #32
 8002ab0:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6849      	ldr	r1, [r1, #4]
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002abe:	6889      	ldr	r1, [r1, #8]
 8002ac0:	fa03 f30c 	lsl.w	r3, r3, ip
 8002ac4:	614b      	str	r3, [r1, #20]
 8002ac6:	f380 8811 	msr	BASEPRI, r0
		return spiPolledExchange(driver, tx);
 8002aca:	6923      	ldr	r3, [r4, #16]
	r_command += r_size;                   // number of words to follow
 8002acc:	4432      	add	r2, r6
  spip->spi->DR = frame;
 8002ace:	69d9      	ldr	r1, [r3, #28]
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	60ca      	str	r2, [r1, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002ad4:	688a      	ldr	r2, [r1, #8]
 8002ad6:	07d0      	lsls	r0, r2, #31
 8002ad8:	d5fc      	bpl.n	8002ad4 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x54>
  return spip->spi->DR;
 8002ada:	68ca      	ldr	r2, [r1, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f382 8811 	msr	BASEPRI, r2
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002ae2:	e9d3 2b08 	ldrd	r2, fp, [r3, #32]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002ae6:	e9d3 ec0a 	ldrd	lr, ip, [r3, #40]	; 0x28
  spiStartSendI(spip, n, txbuf);
 8002aea:	2003      	movs	r0, #3
  *trp = tp;
 8002aec:	4619      	mov	r1, r3
 8002aee:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002af0:	f8db 3004 	ldr.w	r3, [fp, #4]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002af4:	6852      	ldr	r2, [r2, #4]
 8002af6:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8002be4 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x164>
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002afa:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002afe:	f8c2 a00c 	str.w	sl, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002b02:	f8c2 9004 	str.w	r9, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002b06:	f8c2 e000 	str.w	lr, [r2]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002b0a:	f8c3 800c 	str.w	r8, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002b0e:	f8c3 9004 	str.w	r9, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002b12:	f8c3 c000 	str.w	ip, [r3]
  dmaStreamEnable(spip->dmarx);
 8002b16:	f8d2 c000 	ldr.w	ip, [r2]
 8002b1a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8002be8 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x168>
 8002b1e:	f04c 0c01 	orr.w	ip, ip, #1
 8002b22:	f8c2 c000 	str.w	ip, [r2]
  dmaStreamEnable(spip->dmatx);
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	f8db c018 	ldr.w	ip, [fp, #24]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f841 cf08 	str.w	ip, [r1, #8]!
  tp->u.wttrp = trp;
 8002b36:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
 8002b3a:	f7fe fef9 	bl	8001930 <chSchGoSleepS>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f383 8811 	msr	BASEPRI, r3

	send(r_command);             // sends address and number of words to be sent

	sendLarge(reg_ptr, r_size);

	if (remainder_size > 0)                 // if remainder size is greater than 0, download the rest
 8002b44:	2f00      	cmp	r7, #0
 8002b46:	d034      	beq.n	8002bb2 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x132>
 8002b48:	6923      	ldr	r3, [r4, #16]
	{
		r_start_address += r_size;          // new start address
 8002b4a:	4435      	add	r5, r6
  spip->spi->DR = frame;
 8002b4c:	69da      	ldr	r2, [r3, #28]
		r_command = r_start_address << 5;   // start address
		r_command += remainder_size;        // number of words to follow
 8002b4e:	eb07 1545 	add.w	r5, r7, r5, lsl #5
 8002b52:	b2ad      	uxth	r5, r5
 8002b54:	60d5      	str	r5, [r2, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002b56:	6891      	ldr	r1, [r2, #8]
 8002b58:	07c9      	lsls	r1, r1, #31
 8002b5a:	d5fc      	bpl.n	8002b56 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0xd6>
  return spip->spi->DR;
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f382 8811 	msr	BASEPRI, r2
 8002b64:	2003      	movs	r0, #3
  *trp = tp;
 8002b66:	461e      	mov	r6, r3
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002b68:	6a1a      	ldr	r2, [r3, #32]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002b6a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002b6c:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002b6e:	6851      	ldr	r1, [r2, #4]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002b70:	686a      	ldr	r2, [r5, #4]

		send(r_command);          // sends address and number of words to be sent
		sendLarge(reg_ptr + r_size, remainder_size);
 8002b72:	eb08 0849 	add.w	r8, r8, r9, lsl #1
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002b76:	e9d3 530a 	ldrd	r5, r3, [r3, #40]	; 0x28
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002b7e:	f8c1 a00c 	str.w	sl, [r1, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002b82:	604f      	str	r7, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002b84:	600d      	str	r5, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002b86:	f8c2 800c 	str.w	r8, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002b8a:	6057      	str	r7, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002b8c:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	f8db 5018 	ldr.w	r5, [fp, #24]
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	600b      	str	r3, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	f846 5f08 	str.w	r5, [r6, #8]!
  tp->u.wttrp = trp;
 8002ba6:	626e      	str	r6, [r5, #36]	; 0x24
 8002ba8:	f7fe fec2 	bl	8001930 <chSchGoSleepS>
 8002bac:	2300      	movs	r3, #0
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	2320      	movs	r3, #32
		spiUnselect(driver);
 8002bb4:	6922      	ldr	r2, [r4, #16]
 8002bb6:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8002bba:	2301      	movs	r3, #1
 8002bbc:	6852      	ldr	r2, [r2, #4]
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	68d0      	ldr	r0, [r2, #12]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	4083      	lsls	r3, r0
 8002bc6:	6113      	str	r3, [r2, #16]
 8002bc8:	f381 8811 	msr	BASEPRI, r1
	}
	deselect();
}
 8002bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd0:	46b1      	mov	r9, r6
	uint16_t remainder_size = 0;   // remainder size
 8002bd2:	2700      	movs	r7, #0
 8002bd4:	e768      	b.n	8002aa8 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0+0x28>
 8002bd6:	bf00      	nop
 8002bd8:	08005004 	.word	0x08005004
 8002bdc:	08004ff8 	.word	0x08004ff8
 8002be0:	08005010 	.word	0x08005010
 8002be4:	2000131c 	.word	0x2000131c
 8002be8:	200010d0 	.word	0x200010d0
 8002bec:	00000000 	.word	0x00000000

08002bf0 <_ZN10Pt2001Base7restartEv.constprop.0>:
void Pt2001Base::shutdown() {
	setDriveEN(false); // ensure HV is off
	setResetB(false);  // turn off the chip
}

bool Pt2001Base::restart() {
 8002bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			palClearPad(GPIOB, 4);
 8002bf4:	f04f 0a10 	mov.w	sl, #16
			palClearPad(GPIOB, 5);
 8002bf8:	2720      	movs	r7, #32
			palClearPad(GPIOB, 4);
 8002bfa:	4d44      	ldr	r5, [pc, #272]	; (8002d0c <_ZN10Pt2001Base7restartEv.constprop.0+0x11c>)
		spiUnselect(driver);
 8002bfc:	6903      	ldr	r3, [r0, #16]
 8002bfe:	4604      	mov	r4, r0
			palClearPad(GPIOB, 4);
 8002c00:	f8c5 a014 	str.w	sl, [r5, #20]
			palClearPad(GPIOB, 5);
 8002c04:	616f      	str	r7, [r5, #20]
 8002c06:	f387 8811 	msr	BASEPRI, r7
 8002c0a:	f04f 0901 	mov.w	r9, #1
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	2600      	movs	r6, #0
 8002c12:	68d3      	ldr	r3, [r2, #12]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	fa09 f303 	lsl.w	r3, r9, r3
 8002c1a:	6113      	str	r3, [r2, #16]
 8002c1c:	f386 8811 	msr	BASEPRI, r6
        chThdSleepMilliseconds(durationMs);
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7ff f845 	bl	8001cb0 <chThdSleep>
 8002c26:	2002      	movs	r0, #2
			palSetPad(GPIOB, 5);
 8002c28:	612f      	str	r7, [r5, #16]
        chThdSleepMilliseconds(durationMs);
 8002c2a:	f7ff f841 	bl	8001cb0 <chThdSleep>
	sleepMs(1);

	// Flag0 should be floating - pulldown means it should read low
	flag0before = readFlag0();

	setupSpi();
 8002c2e:	4620      	mov	r0, r4
		return palReadPad(GPIOB, 7);
 8002c30:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002c34:	f7fe f814 	bl	8000c60 <_ZN10Pt2001Base8setupSpiEv.constprop.0>

	clearDriverStatus(); // Initial clear necessary
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7fe f889 	bl	8000d50 <_ZN10Pt2001Base17clearDriverStatusEv.constprop.0>
	return readStatus(0x1D2);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002c44:	f7fe f8b4 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	status = readDriverStatus();
 8002c48:	80e0      	strh	r0, [r4, #6]
	if (checkUndervoltV5(status)) {
 8002c4a:	f010 0002 	ands.w	r0, r0, #2
 8002c4e:	d007      	beq.n	8002c60 <_ZN10Pt2001Base7restartEv.constprop.0+0x70>

	// Disable the PT2001 chip.
	void shutdown();

	void onError(McFault p_fault) {
	    fault = p_fault;
 8002c50:	2305      	movs	r3, #5
 8002c52:	7123      	strb	r3, [r4, #4]
			palClearPad(GPIOB, 4);
 8002c54:	f8c5 a014 	str.w	sl, [r5, #20]
			palClearPad(GPIOB, 5);
 8002c58:	616f      	str	r7, [r5, #20]
		shutdown();
		return false;
	}

	return true;
}
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		spiSelect(driver);
 8002c60:	6923      	ldr	r3, [r4, #16]
 8002c62:	f387 8811 	msr	BASEPRI, r7
  spiSelectI(spip);
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68d3      	ldr	r3, [r2, #12]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c70:	6153      	str	r3, [r2, #20]
 8002c72:	f380 8811 	msr	BASEPRI, r0
  spip->spi->DR = frame;
 8002c76:	f64b 22a1 	movw	r2, #47777	; 0xbaa1
		return spiPolledExchange(driver, tx);
 8002c7a:	6921      	ldr	r1, [r4, #16]
 8002c7c:	69cb      	ldr	r3, [r1, #28]
 8002c7e:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	07d0      	lsls	r0, r2, #31
 8002c84:	d5fc      	bpl.n	8002c80 <_ZN10Pt2001Base7restartEv.constprop.0+0x90>
  spip->spi->DR = frame;
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return spip->spi->DR;
 8002c8a:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002c8c:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	07d2      	lsls	r2, r2, #31
 8002c92:	d5fc      	bpl.n	8002c8e <_ZN10Pt2001Base7restartEv.constprop.0+0x9e>
 8002c94:	2020      	movs	r0, #32
  return spip->spi->DR;
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f380 8811 	msr	BASEPRI, r0
  spiUnselectI(spip);
 8002c9c:	2501      	movs	r5, #1
 8002c9e:	6849      	ldr	r1, [r1, #4]
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	68ca      	ldr	r2, [r1, #12]
 8002ca4:	6889      	ldr	r1, [r1, #8]
 8002ca6:	fa05 f202 	lsl.w	r2, r5, r2
 8002caa:	610a      	str	r2, [r1, #16]
 8002cac:	f386 8811 	msr	BASEPRI, r6
	return (id >> 8) == 0x9D;
 8002cb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
	if (!validateChipId(chipId)) {
 8002cb4:	2b9d      	cmp	r3, #157	; 0x9d
 8002cb6:	d008      	beq.n	8002cca <_ZN10Pt2001Base7restartEv.constprop.0+0xda>
 8002cb8:	2103      	movs	r1, #3
			palClearPad(GPIOB, 4);
 8002cba:	2210      	movs	r2, #16
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_ZN10Pt2001Base7restartEv.constprop.0+0x11c>)
 8002cbe:	7121      	strb	r1, [r4, #4]
 8002cc0:	615a      	str	r2, [r3, #20]
			palClearPad(GPIOB, 5);
 8002cc2:	6158      	str	r0, [r3, #20]
}
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	downloadRam(CODE_RAM1);        // transfers code RAM1
 8002cca:	4631      	mov	r1, r6
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fe47 	bl	8002960 <_ZN10Pt2001Base11downloadRamEi.constprop.0>
	downloadRam(CODE_RAM2);        // transfers code RAM2
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f7ff fe43 	bl	8002960 <_ZN10Pt2001Base11downloadRamEi.constprop.0>
	downloadRam(DATA_RAM);         // transfers data RAM
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fe3f 	bl	8002960 <_ZN10Pt2001Base11downloadRamEi.constprop.0>
	downloadRegister(REG_MAIN);    // download main register configurations
 8002ce2:	4631      	mov	r1, r6
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff fecb 	bl	8002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>
		return palReadPad(GPIOB, 7);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_ZN10Pt2001Base7restartEv.constprop.0+0x11c>)
	if (flag0before || !flag0after) {
 8002cec:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	d101      	bne.n	8002cf8 <_ZN10Pt2001Base7restartEv.constprop.0+0x108>
 8002cf4:	061f      	lsls	r7, r3, #24
 8002cf6:	d40b      	bmi.n	8002d10 <_ZN10Pt2001Base7restartEv.constprop.0+0x120>
 8002cf8:	2004      	movs	r0, #4
			palClearPad(GPIOB, 4);
 8002cfa:	2110      	movs	r1, #16
			palClearPad(GPIOB, 5);
 8002cfc:	2220      	movs	r2, #32
			palClearPad(GPIOB, 4);
 8002cfe:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <_ZN10Pt2001Base7restartEv.constprop.0+0x11c>)
 8002d00:	7120      	strb	r0, [r4, #4]
		return false;
 8002d02:	2600      	movs	r6, #0
 8002d04:	6159      	str	r1, [r3, #20]
			palClearPad(GPIOB, 5);
 8002d06:	615a      	str	r2, [r3, #20]
 8002d08:	e7a7      	b.n	8002c5a <_ZN10Pt2001Base7restartEv.constprop.0+0x6a>
 8002d0a:	bf00      	nop
 8002d0c:	40010c00 	.word	0x40010c00
	downloadRegister(REG_CH1);     // download channel 1 register configurations
 8002d10:	4629      	mov	r1, r5
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff feb4 	bl	8002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>
	downloadRegister(REG_CH2);     // download channel 2 register configurations
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff feb0 	bl	8002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>
		return getConfiguration()->BoostVoltage;
 8002d20:	4dbd      	ldr	r5, [pc, #756]	; (8003018 <_ZN10Pt2001Base7restartEv.constprop.0+0x428>)
	downloadRegister(REG_IO);      // download IO register configurations
 8002d22:	2103      	movs	r1, #3
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff feab 	bl	8002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>
	downloadRegister(REG_DIAG);    // download diag register configuration
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	f7ff fea7 	bl	8002a80 <_ZN10Pt2001Base16downloadRegisterEi.constprop.0>
 8002d32:	8928      	ldrh	r0, [r5, #8]
	if (volts < 10.0f) {
 8002d34:	f1a0 030a 	sub.w	r3, r0, #10
 8002d38:	2b3e      	cmp	r3, #62	; 0x3e
 8002d3a:	d813      	bhi.n	8002d64 <_ZN10Pt2001Base7restartEv.constprop.0+0x174>
 8002d3c:	f7fd fc08 	bl	8000550 <__aeabi_ui2f>
	uint16_t data = volts * 3.2;
 8002d40:	49b6      	ldr	r1, [pc, #728]	; (800301c <_ZN10Pt2001Base7restartEv.constprop.0+0x42c>)
 8002d42:	f7fd fa9b 	bl	800027c <__aeabi_fmul>
 8002d46:	f7fd fcf7 	bl	8000738 <__aeabi_f2uiz>
 8002d4a:	b286      	uxth	r6, r0
	writeDram(MC33816Mem::Vboost_high, data+1);
 8002d4c:	1c72      	adds	r2, r6, #1
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	4620      	mov	r0, r4
 8002d52:	b292      	uxth	r2, r2
 8002d54:	f7fd ffbc 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Vboost_low, data-1);
 8002d58:	1e72      	subs	r2, r6, #1
 8002d5a:	2141      	movs	r1, #65	; 0x41
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f7fd ffb6 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	return ((current * 12.53f * 10) + 250.0f) / 9.77f;
 8002d64:	68e8      	ldr	r0, [r5, #12]
 8002d66:	49ae      	ldr	r1, [pc, #696]	; (8003020 <_ZN10Pt2001Base7restartEv.constprop.0+0x430>)
 8002d68:	f7fd fa88 	bl	800027c <__aeabi_fmul>
 8002d6c:	49ad      	ldr	r1, [pc, #692]	; (8003024 <_ZN10Pt2001Base7restartEv.constprop.0+0x434>)
 8002d6e:	f7fd fb3f 	bl	80003f0 <__addsf3>
 8002d72:	49ad      	ldr	r1, [pc, #692]	; (8003028 <_ZN10Pt2001Base7restartEv.constprop.0+0x438>)
 8002d74:	f7fd fa82 	bl	800027c <__aeabi_fmul>
 8002d78:	f7fd fcde 	bl	8000738 <__aeabi_f2uiz>
	writeDram(MC33816Mem::Iboost, dacEquation(getBoostCurrent()));
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	b282      	uxth	r2, r0
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7fd ffa5 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	return ((current * 12.53f * 10) + 250.0f) / 9.77f;
 8002d86:	6968      	ldr	r0, [r5, #20]
 8002d88:	49a5      	ldr	r1, [pc, #660]	; (8003020 <_ZN10Pt2001Base7restartEv.constprop.0+0x430>)
 8002d8a:	f7fd fa77 	bl	800027c <__aeabi_fmul>
 8002d8e:	49a5      	ldr	r1, [pc, #660]	; (8003024 <_ZN10Pt2001Base7restartEv.constprop.0+0x434>)
 8002d90:	f7fd fb2e 	bl	80003f0 <__addsf3>
 8002d94:	49a4      	ldr	r1, [pc, #656]	; (8003028 <_ZN10Pt2001Base7restartEv.constprop.0+0x438>)
 8002d96:	f7fd fa71 	bl	800027c <__aeabi_fmul>
 8002d9a:	f7fd fccd 	bl	8000738 <__aeabi_f2uiz>
	writeDram(MC33816Mem::Ipeak, dacEquation(getPeakCurrent()));
 8002d9e:	2101      	movs	r1, #1
 8002da0:	b282      	uxth	r2, r0
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7fd ff94 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	return ((current * 12.53f * 10) + 250.0f) / 9.77f;
 8002da8:	6a28      	ldr	r0, [r5, #32]
 8002daa:	499d      	ldr	r1, [pc, #628]	; (8003020 <_ZN10Pt2001Base7restartEv.constprop.0+0x430>)
 8002dac:	f7fd fa66 	bl	800027c <__aeabi_fmul>
 8002db0:	499c      	ldr	r1, [pc, #624]	; (8003024 <_ZN10Pt2001Base7restartEv.constprop.0+0x434>)
 8002db2:	f7fd fb1d 	bl	80003f0 <__addsf3>
 8002db6:	499c      	ldr	r1, [pc, #624]	; (8003028 <_ZN10Pt2001Base7restartEv.constprop.0+0x438>)
 8002db8:	f7fd fa60 	bl	800027c <__aeabi_fmul>
 8002dbc:	f7fd fcbc 	bl	8000738 <__aeabi_f2uiz>
	writeDram(MC33816Mem::Ihold, dacEquation(getHoldCurrent()));
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	b282      	uxth	r2, r0
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7fd ff83 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Tpeak_off, (MC_CK * getTpeakOff()));
 8002dca:	8b6b      	ldrh	r3, [r5, #26]
 8002dcc:	4620      	mov	r0, r4
 8002dce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002dd2:	0052      	lsls	r2, r2, #1
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	f7fd ff7a 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Tpeak_tot, (MC_CK * getTpeakTot()));
 8002ddc:	8b2b      	ldrh	r3, [r5, #24]
 8002dde:	4620      	mov	r0, r4
 8002de0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002de4:	0052      	lsls	r2, r2, #1
 8002de6:	2104      	movs	r1, #4
 8002de8:	b292      	uxth	r2, r2
 8002dea:	f7fd ff71 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Tbypass, (MC_CK * getTbypass()));
 8002dee:	8bab      	ldrh	r3, [r5, #28]
 8002df0:	4620      	mov	r0, r4
 8002df2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002df6:	0052      	lsls	r2, r2, #1
 8002df8:	2105      	movs	r1, #5
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	f7fd ff68 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Thold_off, (MC_CK * getTholdOff()));
 8002e00:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8002e02:	4620      	mov	r0, r4
 8002e04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e08:	0052      	lsls	r2, r2, #1
 8002e0a:	2106      	movs	r1, #6
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	f7fd ff5f 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Thold_tot, (MC_CK * getTHoldTot()));
 8002e12:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002e14:	4620      	mov	r0, r4
 8002e16:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	f7fd ff56 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Tboost_min, (MC_CK * getTBoostMin()));
 8002e24:	8a2b      	ldrh	r3, [r5, #16]
 8002e26:	4620      	mov	r0, r4
 8002e28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	2109      	movs	r1, #9
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f7fd ff4d 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::Tboost_max, (MC_CK * getTBoostMax()));
 8002e36:	8a6b      	ldrh	r3, [r5, #18]
 8002e38:	4620      	mov	r0, r4
 8002e3a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e3e:	0052      	lsls	r2, r2, #1
 8002e40:	b292      	uxth	r2, r2
 8002e42:	2108      	movs	r1, #8
 8002e44:	f7fd ff44 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	return ((current * 12.53f * 10) + 250.0f) / 9.77f;
 8002e48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002e4a:	4975      	ldr	r1, [pc, #468]	; (8003020 <_ZN10Pt2001Base7restartEv.constprop.0+0x430>)
 8002e4c:	f7fd fa16 	bl	800027c <__aeabi_fmul>
 8002e50:	4974      	ldr	r1, [pc, #464]	; (8003024 <_ZN10Pt2001Base7restartEv.constprop.0+0x434>)
 8002e52:	f7fd facd 	bl	80003f0 <__addsf3>
 8002e56:	4974      	ldr	r1, [pc, #464]	; (8003028 <_ZN10Pt2001Base7restartEv.constprop.0+0x438>)
 8002e58:	f7fd fa10 	bl	800027c <__aeabi_fmul>
 8002e5c:	f7fd fc6c 	bl	8000738 <__aeabi_f2uiz>
	writeDram(MC33816Mem::HPFP_Ipeak, dacEquation(getPumpPeakCurrent()));
 8002e60:	2145      	movs	r1, #69	; 0x45
 8002e62:	b282      	uxth	r2, r0
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7fd ff33 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	return ((current * 12.53f * 10) + 250.0f) / 9.77f;
 8002e6a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002e6c:	496c      	ldr	r1, [pc, #432]	; (8003020 <_ZN10Pt2001Base7restartEv.constprop.0+0x430>)
 8002e6e:	f7fd fa05 	bl	800027c <__aeabi_fmul>
 8002e72:	496c      	ldr	r1, [pc, #432]	; (8003024 <_ZN10Pt2001Base7restartEv.constprop.0+0x434>)
 8002e74:	f7fd fabc 	bl	80003f0 <__addsf3>
 8002e78:	496b      	ldr	r1, [pc, #428]	; (8003028 <_ZN10Pt2001Base7restartEv.constprop.0+0x438>)
 8002e7a:	f7fd f9ff 	bl	800027c <__aeabi_fmul>
 8002e7e:	f7fd fc5b 	bl	8000738 <__aeabi_f2uiz>
	writeDram(MC33816Mem::HPFP_Ihold, dacEquation(getPumpHoldCurrent()));
 8002e82:	2146      	movs	r1, #70	; 0x46
 8002e84:	b282      	uxth	r2, r0
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7fd ff22 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::HPFP_Thold_off, MC_CK * getPumpTholdOff());
 8002e8c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8002e8e:	4620      	mov	r0, r4
 8002e90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e94:	0052      	lsls	r2, r2, #1
 8002e96:	2147      	movs	r1, #71	; 0x47
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	f7fd ff19 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
	writeDram(MC33816Mem::HPFP_Thold_tot, MC_CK * getPumpTholdTot());
 8002e9e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8002ea0:	2148      	movs	r1, #72	; 0x48
 8002ea2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002ea6:	0052      	lsls	r2, r2, #1
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	f7fd ff10 	bl	8000cd0 <_ZN10Pt2001Base9writeDramE10MC33816Memt.constprop.0>
		spiSelect(driver);
 8002eb0:	6922      	ldr	r2, [r4, #16]
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8002eb8:	2301      	movs	r3, #1
 8002eba:	6852      	ldr	r2, [r2, #4]
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	68d0      	ldr	r0, [r2, #12]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	4083      	lsls	r3, r0
 8002ec4:	6153      	str	r3, [r2, #20]
 8002ec6:	f381 8811 	msr	BASEPRI, r1
  spip->spi->DR = frame;
 8002eca:	f242 0201 	movw	r2, #8193	; 0x2001
		return spiPolledExchange(driver, tx);
 8002ece:	6921      	ldr	r1, [r4, #16]
 8002ed0:	69cb      	ldr	r3, [r1, #28]
 8002ed2:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	07d6      	lsls	r6, r2, #31
 8002ed8:	d5fc      	bpl.n	8002ed4 <_ZN10Pt2001Base7restartEv.constprop.0+0x2e4>
  spip->spi->DR = frame;
 8002eda:	2218      	movs	r2, #24
  return spip->spi->DR;
 8002edc:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002ede:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	07d5      	lsls	r5, r2, #31
 8002ee4:	d5fc      	bpl.n	8002ee0 <_ZN10Pt2001Base7restartEv.constprop.0+0x2f0>
  spip->spi->DR = frame;
 8002ee6:	f242 4201 	movw	r2, #9217	; 0x2401
  return spip->spi->DR;
 8002eea:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002eec:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	07d0      	lsls	r0, r2, #31
 8002ef2:	d5fc      	bpl.n	8002eee <_ZN10Pt2001Base7restartEv.constprop.0+0x2fe>
  spip->spi->DR = frame;
 8002ef4:	2218      	movs	r2, #24
  return spip->spi->DR;
 8002ef6:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002ef8:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	07d2      	lsls	r2, r2, #31
 8002efe:	d5fc      	bpl.n	8002efa <_ZN10Pt2001Base7restartEv.constprop.0+0x30a>
  return spip->spi->DR;
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2720      	movs	r7, #32
 8002f04:	f387 8811 	msr	BASEPRI, r7
  spiUnselectI(spip);
 8002f08:	2501      	movs	r5, #1
 8002f0a:	684a      	ldr	r2, [r1, #4]
 8002f0c:	2600      	movs	r6, #0
 8002f0e:	68d3      	ldr	r3, [r2, #12]
 8002f10:	6892      	ldr	r2, [r2, #8]
 8002f12:	fa05 f303 	lsl.w	r3, r5, r3
 8002f16:	6113      	str	r3, [r2, #16]
 8002f18:	f386 8811 	msr	BASEPRI, r6
        chThdSleepMilliseconds(durationMs);
 8002f1c:	2014      	movs	r0, #20
 8002f1e:	f7fe fec7 	bl	8001cb0 <chThdSleep>
		spiSelect(driver);
 8002f22:	6923      	ldr	r3, [r4, #16]
 8002f24:	f387 8811 	msr	BASEPRI, r7
  spiSelectI(spip);
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4095      	lsls	r5, r2
 8002f30:	615d      	str	r5, [r3, #20]
 8002f32:	f386 8811 	msr	BASEPRI, r6
  spip->spi->DR = frame;
 8002f36:	f24a 0201 	movw	r2, #40961	; 0xa001
		return spiPolledExchange(driver, tx);
 8002f3a:	6921      	ldr	r1, [r4, #16]
 8002f3c:	69cb      	ldr	r3, [r1, #28]
 8002f3e:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	07d7      	lsls	r7, r2, #31
 8002f44:	d5fc      	bpl.n	8002f40 <_ZN10Pt2001Base7restartEv.constprop.0+0x350>
  spip->spi->DR = frame;
 8002f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return spip->spi->DR;
 8002f4a:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002f4c:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	07d6      	lsls	r6, r2, #31
 8002f52:	d5fc      	bpl.n	8002f4e <_ZN10Pt2001Base7restartEv.constprop.0+0x35e>
  return spip->spi->DR;
 8002f54:	68da      	ldr	r2, [r3, #12]
	if (!(recv() & (1<<5))) {
 8002f56:	f012 0220 	ands.w	r2, r2, #32
 8002f5a:	d069      	beq.n	8003030 <_ZN10Pt2001Base7restartEv.constprop.0+0x440>
  spip->spi->DR = frame;
 8002f5c:	f24a 4201 	movw	r2, #41985	; 0xa401
 8002f60:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	07d5      	lsls	r5, r2, #31
 8002f66:	d5fc      	bpl.n	8002f62 <_ZN10Pt2001Base7restartEv.constprop.0+0x372>
  spip->spi->DR = frame;
 8002f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return spip->spi->DR;
 8002f6c:	68d8      	ldr	r0, [r3, #12]
  spip->spi->DR = frame;
 8002f6e:	60da      	str	r2, [r3, #12]
  while ((spip->spi->SR & SPI_SR_RXNE) == 0)
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	07d0      	lsls	r0, r2, #31
 8002f74:	d5fc      	bpl.n	8002f70 <_ZN10Pt2001Base7restartEv.constprop.0+0x380>
  return spip->spi->DR;
 8002f76:	68db      	ldr	r3, [r3, #12]
	if (!(recv() & (1<<5))) {
 8002f78:	f013 0320 	ands.w	r3, r3, #32
 8002f7c:	d065      	beq.n	800304a <_ZN10Pt2001Base7restartEv.constprop.0+0x45a>
 8002f7e:	2520      	movs	r5, #32
 8002f80:	f385 8811 	msr	BASEPRI, r5
  spiUnselectI(spip);
 8002f84:	2701      	movs	r7, #1
 8002f86:	684a      	ldr	r2, [r1, #4]
 8002f88:	f04f 0800 	mov.w	r8, #0
 8002f8c:	68d3      	ldr	r3, [r2, #12]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	fa07 f303 	lsl.w	r3, r7, r3
 8002f94:	6113      	str	r3, [r2, #16]
 8002f96:	f388 8811 	msr	BASEPRI, r8
    clearDriverStatus();
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7fd fed8 	bl	8000d50 <_ZN10Pt2001Base17clearDriverStatusEv.constprop.0>
        chThdSleepMilliseconds(durationMs);
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	f7fe fe85 	bl	8001cb0 <chThdSleep>
	return readStatus(0x1D2);
 8002fa6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fd ff00 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	status5 = readStatus(0x1A5);
 8002fb0:	f240 11a5 	movw	r1, #421	; 0x1a5
	status = readDriverStatus();
 8002fb4:	80e0      	strh	r0, [r4, #6]
	status5 = readStatus(0x1A5);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7fd fefa 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	status6 = readStatus(0x1A6);
 8002fbc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
	status5 = readStatus(0x1A5);
 8002fc0:	8120      	strh	r0, [r4, #8]
	status6 = readStatus(0x1A6);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7fd fef4 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	status7 = readStatus(0x1A7);
 8002fc8:	f240 11a7 	movw	r1, #423	; 0x1a7
	status6 = readStatus(0x1A6);
 8002fcc:	8160      	strh	r0, [r4, #10]
	status7 = readStatus(0x1A7);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7fd feee 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	status8 = readStatus(0x1A8);
 8002fd4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
	status7 = readStatus(0x1A7);
 8002fd8:	81a0      	strh	r0, [r4, #12]
	status8 = readStatus(0x1A8);
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7fd fee8 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	return (driverStatus  & (1<<0));
 8002fe0:	79a6      	ldrb	r6, [r4, #6]
	status8 = readStatus(0x1A8);
 8002fe2:	81e0      	strh	r0, [r4, #14]
	if (checkUndervoltVccP(status)) {
 8002fe4:	403e      	ands	r6, r7
 8002fe6:	d13c      	bne.n	8003062 <_ZN10Pt2001Base7restartEv.constprop.0+0x472>
			palSetPad(GPIOB, 4);
 8002fe8:	f04f 0910 	mov.w	r9, #16
 8002fec:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800302c <_ZN10Pt2001Base7restartEv.constprop.0+0x43c>
        chThdSleepMilliseconds(durationMs);
 8002ff0:	2014      	movs	r0, #20
			palSetPad(GPIOB, 4);
 8002ff2:	f8c8 9010 	str.w	r9, [r8, #16]
        chThdSleepMilliseconds(durationMs);
 8002ff6:	f7fe fe5b 	bl	8001cb0 <chThdSleep>
	return readStatus(0x1D2);
 8002ffa:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7fd fed6 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	if (!checkDrivenEnabled(status)) {
 8003004:	06c2      	lsls	r2, r0, #27
	status = readDriverStatus();
 8003006:	80e0      	strh	r0, [r4, #6]
	if (!checkDrivenEnabled(status)) {
 8003008:	d433      	bmi.n	8003072 <_ZN10Pt2001Base7restartEv.constprop.0+0x482>
 800300a:	2306      	movs	r3, #6
 800300c:	7123      	strb	r3, [r4, #4]
			palClearPad(GPIOB, 4);
 800300e:	f8c8 9014 	str.w	r9, [r8, #20]
			palClearPad(GPIOB, 5);
 8003012:	f8c8 5014 	str.w	r5, [r8, #20]
 8003016:	e620      	b.n	8002c5a <_ZN10Pt2001Base7restartEv.constprop.0+0x6a>
 8003018:	20001284 	.word	0x20001284
 800301c:	404ccccd 	.word	0x404ccccd
 8003020:	42fa9999 	.word	0x42fa9999
 8003024:	437a0000 	.word	0x437a0000
 8003028:	3dd19f0c 	.word	0x3dd19f0c
 800302c:	40010c00 	.word	0x40010c00
 8003030:	2320      	movs	r3, #32
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6849      	ldr	r1, [r1, #4]
 800303a:	68c8      	ldr	r0, [r1, #12]
 800303c:	6889      	ldr	r1, [r1, #8]
 800303e:	4083      	lsls	r3, r0
 8003040:	610b      	str	r3, [r1, #16]
 8003042:	f382 8811 	msr	BASEPRI, r2
 8003046:	2001      	movs	r0, #1
 8003048:	e657      	b.n	8002cfa <_ZN10Pt2001Base7restartEv.constprop.0+0x10a>
 800304a:	2220      	movs	r2, #32
 800304c:	f382 8811 	msr	BASEPRI, r2
 8003050:	2201      	movs	r2, #1
 8003052:	6849      	ldr	r1, [r1, #4]
 8003054:	68c8      	ldr	r0, [r1, #12]
 8003056:	6889      	ldr	r1, [r1, #8]
 8003058:	4082      	lsls	r2, r0
 800305a:	610a      	str	r2, [r1, #16]
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	e7f1      	b.n	8003046 <_ZN10Pt2001Base7restartEv.constprop.0+0x456>
 8003062:	2107      	movs	r1, #7
			palClearPad(GPIOB, 4);
 8003064:	2210      	movs	r2, #16
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_ZN10Pt2001Base7restartEv.constprop.0+0x4a4>)
 8003068:	7121      	strb	r1, [r4, #4]
		return false;
 800306a:	4646      	mov	r6, r8
 800306c:	615a      	str	r2, [r3, #20]
			palClearPad(GPIOB, 5);
 800306e:	615d      	str	r5, [r3, #20]
 8003070:	e5f3      	b.n	8002c5a <_ZN10Pt2001Base7restartEv.constprop.0+0x6a>
	return readStatus(0x1D2);
 8003072:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003076:	4620      	mov	r0, r4
 8003078:	f7fd fe9a 	bl	8000db0 <_ZN10Pt2001Base10readStatusEi.constprop.0>
	if (checkUndervoltVccP(status)) {
 800307c:	07c3      	lsls	r3, r0, #31
	status = readDriverStatus();
 800307e:	80e0      	strh	r0, [r4, #6]
	if (checkUndervoltVccP(status)) {
 8003080:	d401      	bmi.n	8003086 <_ZN10Pt2001Base7restartEv.constprop.0+0x496>
	return true;
 8003082:	463e      	mov	r6, r7
 8003084:	e5e9      	b.n	8002c5a <_ZN10Pt2001Base7restartEv.constprop.0+0x6a>
 8003086:	2302      	movs	r3, #2
 8003088:	7123      	strb	r3, [r4, #4]
			palClearPad(GPIOB, 4);
 800308a:	f8c8 9014 	str.w	r9, [r8, #20]
			palClearPad(GPIOB, 5);
 800308e:	f8c8 5014 	str.w	r5, [r8, #20]
 8003092:	e5e2      	b.n	8002c5a <_ZN10Pt2001Base7restartEv.constprop.0+0x6a>
 8003094:	40010c00 	.word	0x40010c00
	...

080030a0 <_Z11CanRxThreadPv>:
                    withNewValue = true; \
                }

static THD_WORKING_AREA(waCanRxThread, 256);
void CanRxThread(void*)
{
 80030a0:	2500      	movs	r5, #0
 80030a2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80030a6:	462e      	mov	r6, r5
 80030a8:	462f      	mov	r7, r5
 80030aa:	f8df 9348 	ldr.w	r9, [pc, #840]	; 80033f4 <_Z11CanRxThreadPv+0x354>
 80030ae:	4cd0      	ldr	r4, [pc, #832]	; (80033f0 <_Z11CanRxThreadPv+0x350>)
 80030b0:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8003410 <_Z11CanRxThreadPv+0x370>
 80030b4:	b089      	sub	sp, #36	; 0x24
 80030b6:	f109 0b3c 	add.w	fp, r9, #60	; 0x3c
 80030ba:	2320      	movs	r3, #32
 80030bc:	f383 8811 	msr	BASEPRI, r3
  return chThdEnqueueTimeoutS(tqp, timeout);
 80030c0:	f8df 8350 	ldr.w	r8, [pc, #848]	; 8003414 <_Z11CanRxThreadPv+0x374>
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d06b      	beq.n	80031a2 <_Z11CanRxThreadPv+0x102>
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 80030ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	0790      	lsls	r0, r2, #30
 80030d0:	d064      	beq.n	800319c <_Z11CanRxThreadPv+0xfc>
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	0792      	lsls	r2, r2, #30
 80030d6:	d06f      	beq.n	80031b8 <_Z11CanRxThreadPv+0x118>
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 80030d8:	2020      	movs	r0, #32
    rir  = canp->can->sFIFOMailBox[0].RIR;
 80030da:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 80030de:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 80030e2:	f8d3 71b8 	ldr.w	r7, [r3, #440]	; 0x1b8
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 80030e6:	f8d3 51bc 	ldr.w	r5, [r3, #444]	; 0x1bc
    canp->can->RF0R = CAN_RF0R_RFOM0;
 80030ea:	60d8      	str	r0, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 80030ec:	68d8      	ldr	r0, [r3, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 80030ee:	e9cd 7506 	strd	r7, r5, [sp, #24]
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 80030f2:	0787      	lsls	r7, r0, #30
 80030f4:	d103      	bne.n	80030fe <_Z11CanRxThreadPv+0x5e>
      canp->can->IER |= CAN_IER_FMPIE0;
 80030f6:	6958      	ldr	r0, [r3, #20]
 80030f8:	f040 0002 	orr.w	r0, r0, #2
 80030fc:	6158      	str	r0, [r3, #20]
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
 80030fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 8003102:	f3c2 0740 	ubfx	r7, r2, #1, #1
  if (crfp->IDE)
 8003106:	f366 0303 	bfi	r3, r6, #0, #4
 800310a:	f367 1304 	bfi	r3, r7, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 800310e:	f3c2 0580 	ubfx	r5, r2, #2, #1
  if (crfp->IDE)
 8003112:	f365 1345 	bfi	r3, r5, #5, #1
 8003116:	0698      	lsls	r0, r3, #26
 8003118:	f88d 300c 	strb.w	r3, [sp, #12]
 800311c:	d563      	bpl.n	80031e6 <_Z11CanRxThreadPv+0x146>
    crfp->EID = rir >> 3;
 800311e:	9b04      	ldr	r3, [sp, #16]
 8003120:	08d2      	lsrs	r2, r2, #3
 8003122:	f362 031c 	bfi	r3, r2, #0, #29
 8003126:	9304      	str	r3, [sp, #16]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8003128:	f001 060f 	and.w	r6, r1, #15
 800312c:	2200      	movs	r2, #0
 800312e:	f382 8811 	msr	BASEPRI, r2
//                frame.data8[0],
//                frame.DLC);


            // Ignore std frames, only listen to ext
            if (frame.IDE != CAN_IDE_EXT) {
 8003132:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003136:	f366 0303 	bfi	r3, r6, #0, #4
 800313a:	f367 1304 	bfi	r3, r7, #4, #1
 800313e:	f365 1345 	bfi	r3, r5, #5, #1
 8003142:	f88d 300c 	strb.w	r3, [sp, #12]
 8003146:	b2d9      	uxtb	r1, r3
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	d5b6      	bpl.n	80030ba <_Z11CanRxThreadPv+0x1a>
                continue;
            }

            // ignore packets not starting with magic byte or of unexpected length
            if (frame.data8[0] != GDI4_CAN_SET_TAG || frame.DLC != 7) {
 800314c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003150:	2b78      	cmp	r3, #120	; 0x78
 8003152:	d1b2      	bne.n	80030ba <_Z11CanRxThreadPv+0x1a>
 8003154:	f001 010f 	and.w	r1, r1, #15
 8003158:	2907      	cmp	r1, #7
 800315a:	d1ae      	bne.n	80030ba <_Z11CanRxThreadPv+0x1a>
                continue;
            }

            bool withNewValue = false;
            if (frame.EID == configuration.inputCanID) {
 800315c:	9b04      	ldr	r3, [sp, #16]
 800315e:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8003162:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8003166:	428b      	cmp	r3, r1
 8003168:	d045      	beq.n	80031f6 <_Z11CanRxThreadPv+0x156>
                ASSIGN_IF_CHANGED(configuration.BoostVoltage,  getInt(&frame,   1));
                ASSIGN_IF_CHANGED(configuration.BoostCurrent,  getFloat(&frame, 3));
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
            } else if (frame.EID == configuration.inputCanID + 1) {
 800316a:	1c48      	adds	r0, r1, #1
 800316c:	4283      	cmp	r3, r0
 800316e:	f000 8155 	beq.w	800341c <_Z11CanRxThreadPv+0x37c>
                ASSIGN_IF_CHANGED(configuration.TBoostMax,     getInt(&frame,   1));
                ASSIGN_IF_CHANGED(configuration.PeakCurrent,   getFloat(&frame, 3));
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
            } else if (frame.EID == configuration.inputCanID + 2) {
 8003172:	1c88      	adds	r0, r1, #2
 8003174:	4283      	cmp	r3, r0
 8003176:	f000 819a 	beq.w	80034ae <_Z11CanRxThreadPv+0x40e>
                ASSIGN_IF_CHANGED(configuration.TpeakOff,      getInt(&frame,   1));
                ASSIGN_IF_CHANGED(configuration.Tbypass,       getInt(&frame,   3));
                ASSIGN_IF_CHANGED(configuration.HoldCurrent,   getFloat(&frame, 5));
            } else if (frame.EID == configuration.inputCanID + 3) {
 800317a:	1cc8      	adds	r0, r1, #3
 800317c:	4283      	cmp	r3, r0
 800317e:	f000 81d4 	beq.w	800352a <_Z11CanRxThreadPv+0x48a>
                ASSIGN_IF_CHANGED(configuration.TholdOff,      getInt(&frame,   1));
                ASSIGN_IF_CHANGED(configuration.THoldDuration, getInt(&frame,   3));
                ASSIGN_IF_CHANGED(configuration.PumpPeakCurrent,   getFloat(&frame, 5));
            } else if (frame.EID == configuration.inputCanID + 4) {
 8003182:	3104      	adds	r1, #4
 8003184:	428b      	cmp	r3, r1
 8003186:	f000 821a 	beq.w	80035be <_Z11CanRxThreadPv+0x51e>
                chip.restart();
            }
            if (writeCount > 0)
                uartStartSend(&UARTD1, writeCount, printBuffer);

        chThdSleepMilliseconds(100);
 800318a:	20c8      	movs	r0, #200	; 0xc8
 800318c:	f7fe fd90 	bl	8001cb0 <chThdSleep>
 8003190:	2320      	movs	r3, #32
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8003414 <_Z11CanRxThreadPv+0x374>
 800319a:	e793      	b.n	80030c4 <_Z11CanRxThreadPv+0x24>
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 800319c:	691a      	ldr	r2, [r3, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800319e:	0791      	lsls	r1, r2, #30
 80031a0:	d197      	bne.n	80030d2 <_Z11CanRxThreadPv+0x32>
 80031a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031a6:	4640      	mov	r0, r8
 80031a8:	f7fe fc8a 	bl	8001ac0 <chThdEnqueueTimeoutS>
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
    if (msg != MSG_OK) {
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d089      	beq.n	80030c4 <_Z11CanRxThreadPv+0x24>
 80031b0:	2300      	movs	r3, #0
 80031b2:	f383 8811 	msr	BASEPRI, r3
            if (msg != MSG_OK) {
 80031b6:	e780      	b.n	80030ba <_Z11CanRxThreadPv+0x1a>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	0792      	lsls	r2, r2, #30
 80031bc:	d0b6      	beq.n	800312c <_Z11CanRxThreadPv+0x8c>
    canp->can->RF1R = CAN_RF1R_RFOM1;
 80031be:	2020      	movs	r0, #32
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80031c0:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80031c4:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 80031c8:	f8d3 71c8 	ldr.w	r7, [r3, #456]	; 0x1c8
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80031cc:	f8d3 51cc 	ldr.w	r5, [r3, #460]	; 0x1cc
    canp->can->RF1R = CAN_RF1R_RFOM1;
 80031d0:	6118      	str	r0, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 80031d2:	6918      	ldr	r0, [r3, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80031d4:	e9cd 7506 	strd	r7, r5, [sp, #24]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 80031d8:	0785      	lsls	r5, r0, #30
 80031da:	d190      	bne.n	80030fe <_Z11CanRxThreadPv+0x5e>
      canp->can->IER |= CAN_IER_FMPIE1;
 80031dc:	6958      	ldr	r0, [r3, #20]
 80031de:	f040 0010 	orr.w	r0, r0, #16
 80031e2:	6158      	str	r0, [r3, #20]
 80031e4:	e78b      	b.n	80030fe <_Z11CanRxThreadPv+0x5e>
    crfp->SID = rir >> 21;
 80031e6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80031ea:	0d52      	lsrs	r2, r2, #21
 80031ec:	f362 030a 	bfi	r3, r2, #0, #11
 80031f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80031f4:	e798      	b.n	8003128 <_Z11CanRxThreadPv+0x88>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80031f6:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80031fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
                ASSIGN_IF_CHANGED(configuration.BoostVoltage,  getInt(&frame,   1));
 80031fe:	f8b9 1008 	ldrh.w	r1, [r9, #8]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003202:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                ASSIGN_IF_CHANGED(configuration.BoostVoltage,  getInt(&frame,   1));
 8003206:	4299      	cmp	r1, r3
 8003208:	bf1c      	itt	ne
 800320a:	f8a9 3008 	strhne.w	r3, [r9, #8]
 800320e:	2301      	movne	r3, #1
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003210:	f89d 001c 	ldrb.w	r0, [sp, #28]
                ASSIGN_IF_CHANGED(configuration.BoostVoltage,  getInt(&frame,   1));
 8003214:	bf18      	it	ne
 8003216:	9301      	strne	r3, [sp, #4]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003218:	f89d 301b 	ldrb.w	r3, [sp, #27]
            bool withNewValue = false;
 800321c:	bf08      	it	eq
 800321e:	9201      	streq	r2, [sp, #4]
uint16_t float2short128(float value) {
    return FIXED_POINT * value;
}

float short2float128(uint16_t value) {
    return value / 1.0 / FIXED_POINT;
 8003220:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8003224:	f7fd f998 	bl	8000558 <__aeabi_i2f>
 8003228:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 800322c:	f7fd f826 	bl	800027c <__aeabi_fmul>
 8003230:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.BoostCurrent,  getFloat(&frame, 3));
 8003232:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8003236:	4641      	mov	r1, r8
 8003238:	f7fd fa26 	bl	8000688 <__aeabi_fcmpeq>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800323c:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8003240:	f89d 301d 	ldrb.w	r3, [sp, #29]
                ASSIGN_IF_CHANGED(configuration.BoostCurrent,  getFloat(&frame, 3));
 8003244:	2800      	cmp	r0, #0
 8003246:	f000 8166 	beq.w	8003516 <_Z11CanRxThreadPv+0x476>
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
 800324a:	f8b9 2010 	ldrh.w	r2, [r9, #16]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800324e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
 8003252:	429a      	cmp	r2, r3
 8003254:	f000 8126 	beq.w	80034a4 <_Z11CanRxThreadPv+0x404>
 8003258:	f8a9 3010 	strh.w	r3, [r9, #16]
  configuration.updateCounter++;
 800325c:	f8d9 3004 	ldr.w	r3, [r9, #4]

  /* Aligned record size.*/
  asize = ALIGNED_REC_SIZE(n);

  /* Normal mode code path.*/
  if (mfsp->state == MFS_READY) {
 8003260:	f89a 2000 	ldrb.w	r2, [sl]
 8003264:	3301      	adds	r3, #1
 8003266:	2a02      	cmp	r2, #2
 8003268:	f8c9 3004 	str.w	r3, [r9, #4]
 800326c:	d053      	beq.n	8003316 <_Z11CanRxThreadPv+0x276>
    return warning ? MFS_WARN_GC : MFS_NO_ERROR;
  }

#if MFS_CFG_TRANSACTION_MAX > 0
  /* Transaction mode code path.*/
  if (mfsp->state == MFS_TRANSACTION) {
 800326e:	2a03      	cmp	r2, #3
 8003270:	f040 81dd 	bne.w	800362e <_Z11CanRxThreadPv+0x58e>
    mfs_transaction_op_t *top;

    /* Checking if the maximum number of operations in a transaction is
       Exceeded.*/
    if (mfsp->tr_nops >= MFS_CFG_TRANSACTION_MAX) {
 8003274:	f8da 3120 	ldr.w	r3, [sl, #288]	; 0x120
 8003278:	2b0f      	cmp	r3, #15
 800327a:	f200 81f4 	bhi.w	8003666 <_Z11CanRxThreadPv+0x5c6>
    }

    /* If the required space is greater than the space allocated for the
       transaction then error.*/
    rspace = asize;
    if (rspace > mfsp->tr_limit_offet - mfsp->tr_next_offset) {
 800327e:	e9da 0346 	ldrd	r0, r3, [sl, #280]	; 0x118
 8003282:	1a1b      	subs	r3, r3, r0
 8003284:	2b4b      	cmp	r3, #75	; 0x4b
 8003286:	f240 81eb 	bls.w	8003660 <_Z11CanRxThreadPv+0x5c0>
      return MFS_ERR_TRANSACTION_SIZE;
    }

    /* Writing the data header without the magic, it will be written last.*/
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 800328a:	2101      	movs	r1, #1
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 800328c:	223c      	movs	r2, #60	; 0x3c
 800328e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003292:	4684      	mov	ip, r0
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 8003294:	f8aa 11ec 	strh.w	r1, [sl, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 8003298:	4956      	ldr	r1, [pc, #344]	; (80033f4 <_Z11CanRxThreadPv+0x354>)
 800329a:	f8ca 21f0 	str.w	r2, [sl, #496]	; 0x1f0
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 800329e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032a2:	4855      	ldr	r0, [pc, #340]	; (80033f8 <_Z11CanRxThreadPv+0x358>)
 80032a4:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80032a8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
  while (n > 0U) {
 80032ac:	4559      	cmp	r1, fp
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 80032ae:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80032b2:	b29b      	uxth	r3, r3
  while (n > 0U) {
 80032b4:	d1f3      	bne.n	800329e <_Z11CanRxThreadPv+0x1fe>
 80032b6:	4660      	mov	r0, ip
    mfsp->buffer.dhdr.fields.crc    = crc16(0xFFFFU, buffer, n);
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80032b8:	2108      	movs	r1, #8
 80032ba:	4a50      	ldr	r2, [pc, #320]	; (80033fc <_Z11CanRxThreadPv+0x35c>)
 80032bc:	3008      	adds	r0, #8
    mfsp->buffer.dhdr.fields.crc    = crc16(0xFFFFU, buffer, n);
 80032be:	f8aa 31ee 	strh.w	r3, [sl, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80032c2:	f7fe fd75 	bl	8001db0 <mfs_flash_write.constprop.0>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b9f8      	cbnz	r0, 800330a <_Z11CanRxThreadPv+0x26a>
                                 mfsp->tr_next_offset + (sizeof (uint32_t) * 2U),
                                 sizeof (mfs_data_header_t) - (sizeof (uint32_t) * 2U),
                                 mfsp->buffer.data8 + (sizeof (uint32_t) * 2U)));

    /* Writing the data part.*/
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80032ca:	f8da 0118 	ldr.w	r0, [sl, #280]	; 0x118
 80032ce:	213c      	movs	r1, #60	; 0x3c
 80032d0:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <_Z11CanRxThreadPv+0x354>)
 80032d2:	3010      	adds	r0, #16
 80032d4:	f7fe fd6c 	bl	8001db0 <mfs_flash_write.constprop.0>
 80032d8:	4603      	mov	r3, r0
 80032da:	b9b0      	cbnz	r0, 800330a <_Z11CanRxThreadPv+0x26a>

    /* Adding a transaction operation record.*/
    top = &mfsp->tr_ops[mfsp->tr_nops];
    top->offset = mfsp->tr_next_offset;
    top->size   = n;
    top->id     = id;
 80032dc:	f04f 0c01 	mov.w	ip, #1
    top->size   = n;
 80032e0:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    top = &mfsp->tr_ops[mfsp->tr_nops];
 80032e4:	f8da 2120 	ldr.w	r2, [sl, #288]	; 0x120
    top->offset = mfsp->tr_next_offset;
 80032e8:	f8da 0118 	ldr.w	r0, [sl, #280]	; 0x118
 80032ec:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80032f0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2

    /* Number of records and next write position updated.*/
    mfsp->tr_nops++;
 80032f4:	4462      	add	r2, ip
    top->id     = id;
 80032f6:	e9c1 ec4a 	strd	lr, ip, [r1, #296]	; 0x128
    mfsp->tr_nops++;
 80032fa:	f8ca 2120 	str.w	r2, [sl, #288]	; 0x120
    mfsp->tr_next_offset += asize;
 80032fe:	f100 024c 	add.w	r2, r0, #76	; 0x4c
    top->offset = mfsp->tr_next_offset;
 8003302:	f8c1 0124 	str.w	r0, [r1, #292]	; 0x124
    mfsp->tr_next_offset += asize;
 8003306:	f8ca 2118 	str.w	r2, [sl, #280]	; 0x118
  flashState = mfsWriteRecord(&mfs1, MFS_RECORD_ID, GetConfigurationSize(), GetConfigurationPtr());
 800330a:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <_Z11CanRxThreadPv+0x360>)
                chip.restart();
 800330c:	483d      	ldr	r0, [pc, #244]	; (8003404 <_Z11CanRxThreadPv+0x364>)
 800330e:	7013      	strb	r3, [r2, #0]
 8003310:	f7ff fc6e 	bl	8002bf0 <_ZN10Pt2001Base7restartEv.constprop.0>
 8003314:	e739      	b.n	800318a <_Z11CanRxThreadPv+0xea>
    if (rspace > mfsp->config->bank_size - mfsp->used_space) {
 8003316:	f8da 0004 	ldr.w	r0, [sl, #4]
 800331a:	f8da 2014 	ldr.w	r2, [sl, #20]
 800331e:	6883      	ldr	r3, [r0, #8]
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	2b5b      	cmp	r3, #91	; 0x5b
 8003324:	f240 8199 	bls.w	800365a <_Z11CanRxThreadPv+0x5ba>
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8003328:	f89a 1008 	ldrb.w	r1, [sl, #8]
 800332c:	f7fe f9f8 	bl	8001720 <mfs_flash_get_bank_offset.isra.0>
            mfsp->config->bank_size) - mfsp->next_offset;
 8003330:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003334:	f8da c010 	ldr.w	ip, [sl, #16]
    free = (mfs_flash_get_bank_offset(mfsp, mfsp->current_bank) +
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	eba3 030c 	sub.w	r3, r3, ip
 800333e:	4403      	add	r3, r0
    if (rspace > free) {
 8003340:	2b5b      	cmp	r3, #91	; 0x5b
 8003342:	f240 8131 	bls.w	80035a8 <_Z11CanRxThreadPv+0x508>
    bool warning = false;
 8003346:	f04f 0800 	mov.w	r8, #0
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 800334a:	2101      	movs	r1, #1
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 800334c:	223c      	movs	r2, #60	; 0x3c
 800334e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    mfsp->buffer.dhdr.fields.id     = (uint16_t)id;
 8003352:	f8aa 11ec 	strh.w	r1, [sl, #492]	; 0x1ec
    mfsp->buffer.dhdr.fields.size   = (uint32_t)n;
 8003356:	4927      	ldr	r1, [pc, #156]	; (80033f4 <_Z11CanRxThreadPv+0x354>)
 8003358:	f8ca 21f0 	str.w	r2, [sl, #496]	; 0x1f0
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 800335c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003360:	4825      	ldr	r0, [pc, #148]	; (80033f8 <_Z11CanRxThreadPv+0x358>)
 8003362:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8003366:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
  while (n > 0U) {
 800336a:	4559      	cmp	r1, fp
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 800336c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 8003370:	b29b      	uxth	r3, r3
  while (n > 0U) {
 8003372:	d1f3      	bne.n	800335c <_Z11CanRxThreadPv+0x2bc>
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8003374:	2108      	movs	r1, #8
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <_Z11CanRxThreadPv+0x35c>)
 8003378:	f10c 0008 	add.w	r0, ip, #8
    mfsp->buffer.dhdr.fields.crc    = crc16(0xFFFFU, buffer, n);
 800337c:	f8aa 31ee 	strh.w	r3, [sl, #494]	; 0x1ee
    RET_ON_ERROR(mfs_flash_write(mfsp,
 8003380:	f7fe fd16 	bl	8001db0 <mfs_flash_write.constprop.0>
 8003384:	4603      	mov	r3, r0
 8003386:	2800      	cmp	r0, #0
 8003388:	d1bf      	bne.n	800330a <_Z11CanRxThreadPv+0x26a>
    RET_ON_ERROR(mfs_flash_write(mfsp,
 800338a:	f8da 0010 	ldr.w	r0, [sl, #16]
 800338e:	213c      	movs	r1, #60	; 0x3c
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <_Z11CanRxThreadPv+0x354>)
 8003392:	3010      	adds	r0, #16
 8003394:	f7fe fd0c 	bl	8001db0 <mfs_flash_write.constprop.0>
 8003398:	4603      	mov	r3, r0
 800339a:	2800      	cmp	r0, #0
 800339c:	d1b5      	bne.n	800330a <_Z11CanRxThreadPv+0x26a>
    mfsp->buffer.dhdr.fields.magic2 = (uint32_t)MFS_HEADER_MAGIC_2;
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <_Z11CanRxThreadPv+0x368>)
 80033a0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003418 <_Z11CanRxThreadPv+0x378>
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80033a4:	2108      	movs	r1, #8
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <_Z11CanRxThreadPv+0x36c>)
 80033a8:	f8da 0010 	ldr.w	r0, [sl, #16]
    mfsp->buffer.dhdr.fields.magic2 = (uint32_t)MFS_HEADER_MAGIC_2;
 80033ac:	e9ca c379 	strd	ip, r3, [sl, #484]	; 0x1e4
    RET_ON_ERROR(mfs_flash_write(mfsp,
 80033b0:	f7fe fcfe 	bl	8001db0 <mfs_flash_write.constprop.0>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d1a7      	bne.n	800330a <_Z11CanRxThreadPv+0x26a>
    if (mfsp->descriptors[id - 1U].offset != 0U) {
 80033ba:	f8da 2018 	ldr.w	r2, [sl, #24]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	f040 8141 	bne.w	8003646 <_Z11CanRxThreadPv+0x5a6>
 80033c4:	f8da 2014 	ldr.w	r2, [sl, #20]
    mfsp->descriptors[id - 1U].size   = (uint32_t)n;
 80033c8:	203c      	movs	r0, #60	; 0x3c
    mfsp->descriptors[id - 1U].offset = mfsp->next_offset;
 80033ca:	f8da 1010 	ldr.w	r1, [sl, #16]
    mfsp->used_space  += asize;
 80033ce:	324c      	adds	r2, #76	; 0x4c
    return warning ? MFS_WARN_GC : MFS_NO_ERROR;
 80033d0:	f1b8 0f00 	cmp.w	r8, #0
    mfsp->used_space  += asize;
 80033d4:	f8ca 2014 	str.w	r2, [sl, #20]
    mfsp->next_offset += asize;
 80033d8:	f101 024c 	add.w	r2, r1, #76	; 0x4c
    return warning ? MFS_WARN_GC : MFS_NO_ERROR;
 80033dc:	bf18      	it	ne
 80033de:	2302      	movne	r3, #2
    mfsp->descriptors[id - 1U].offset = mfsp->next_offset;
 80033e0:	f8ca 1018 	str.w	r1, [sl, #24]
    mfsp->next_offset += asize;
 80033e4:	f8ca 2010 	str.w	r2, [sl, #16]
    mfsp->descriptors[id - 1U].size   = (uint32_t)n;
 80033e8:	f8ca 001c 	str.w	r0, [sl, #28]
 80033ec:	e78d      	b.n	800330a <_Z11CanRxThreadPv+0x26a>
 80033ee:	bf00      	nop
 80033f0:	20000790 	.word	0x20000790
 80033f4:	20001284 	.word	0x20001284
 80033f8:	080051a8 	.word	0x080051a8
 80033fc:	200010ac 	.word	0x200010ac
 8003400:	2000131e 	.word	0x2000131e
 8003404:	20001270 	.word	0x20001270
 8003408:	f045ae5f 	.word	0xf045ae5f
 800340c:	200010a4 	.word	0x200010a4
 8003410:	20000ec0 	.word	0x20000ec0
 8003414:	200007a0 	.word	0x200007a0
 8003418:	5fae45f0 	.word	0x5fae45f0
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800341c:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8003420:	f89d 3019 	ldrb.w	r3, [sp, #25]
                ASSIGN_IF_CHANGED(configuration.TBoostMax,     getInt(&frame,   1));
 8003424:	f8b9 1012 	ldrh.w	r1, [r9, #18]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003428:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                ASSIGN_IF_CHANGED(configuration.TBoostMax,     getInt(&frame,   1));
 800342c:	4299      	cmp	r1, r3
 800342e:	bf1c      	itt	ne
 8003430:	f8a9 3012 	strhne.w	r3, [r9, #18]
 8003434:	2301      	movne	r3, #1
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003436:	f89d 001c 	ldrb.w	r0, [sp, #28]
                ASSIGN_IF_CHANGED(configuration.TBoostMax,     getInt(&frame,   1));
 800343a:	bf18      	it	ne
 800343c:	9301      	strne	r3, [sp, #4]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800343e:	f89d 301b 	ldrb.w	r3, [sp, #27]
            bool withNewValue = false;
 8003442:	bf08      	it	eq
 8003444:	9201      	streq	r2, [sp, #4]
    return value / 1.0 / FIXED_POINT;
 8003446:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800344a:	f7fd f885 	bl	8000558 <__aeabi_i2f>
 800344e:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 8003452:	f7fc ff13 	bl	800027c <__aeabi_fmul>
 8003456:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.PeakCurrent,   getFloat(&frame, 3));
 8003458:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800345c:	4641      	mov	r1, r8
 800345e:	f7fd f913 	bl	8000688 <__aeabi_fcmpeq>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003462:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8003466:	f89d 301d 	ldrb.w	r3, [sp, #29]
                ASSIGN_IF_CHANGED(configuration.PeakCurrent,   getFloat(&frame, 3));
 800346a:	2800      	cmp	r0, #0
 800346c:	f000 8092 	beq.w	8003594 <_Z11CanRxThreadPv+0x4f4>
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
 8003470:	f8b9 2018 	ldrh.w	r2, [r9, #24]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003474:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
 8003478:	429a      	cmp	r2, r3
 800347a:	d013      	beq.n	80034a4 <_Z11CanRxThreadPv+0x404>
 800347c:	f8a9 3018 	strh.w	r3, [r9, #24]
            if (withNewValue) {
 8003480:	e6ec      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003482:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003486:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800348a:	f7fd f865 	bl	8000558 <__aeabi_i2f>
 800348e:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 8003492:	f7fc fef3 	bl	800027c <__aeabi_fmul>
 8003496:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.HoldCurrent,   getFloat(&frame, 5));
 8003498:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800349c:	4641      	mov	r1, r8
 800349e:	f7fd f8f3 	bl	8000688 <__aeabi_fcmpeq>
 80034a2:	b3a8      	cbz	r0, 8003510 <_Z11CanRxThreadPv+0x470>
            if (withNewValue) {
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f43f ae6f 	beq.w	800318a <_Z11CanRxThreadPv+0xea>
 80034ac:	e6d6      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034ae:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80034b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
                ASSIGN_IF_CHANGED(configuration.TpeakOff,      getInt(&frame,   1));
 80034b6:	f8b9 101a 	ldrh.w	r1, [r9, #26]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034ba:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                ASSIGN_IF_CHANGED(configuration.TpeakOff,      getInt(&frame,   1));
 80034be:	4299      	cmp	r1, r3
 80034c0:	bf1c      	itt	ne
 80034c2:	f8a9 301a 	strhne.w	r3, [r9, #26]
 80034c6:	2301      	movne	r3, #1
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034c8:	f89d 101c 	ldrb.w	r1, [sp, #28]
                ASSIGN_IF_CHANGED(configuration.TpeakOff,      getInt(&frame,   1));
 80034cc:	bf18      	it	ne
 80034ce:	9301      	strne	r3, [sp, #4]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
            bool withNewValue = false;
 80034d4:	bf08      	it	eq
 80034d6:	9201      	streq	r2, [sp, #4]
                ASSIGN_IF_CHANGED(configuration.Tbypass,       getInt(&frame,   3));
 80034d8:	f8b9 201c 	ldrh.w	r2, [r9, #28]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.Tbypass,       getInt(&frame,   3));
 80034e0:	429a      	cmp	r2, r3
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034e2:	f89d 001e 	ldrb.w	r0, [sp, #30]
                ASSIGN_IF_CHANGED(configuration.Tbypass,       getInt(&frame,   3));
 80034e6:	d0cc      	beq.n	8003482 <_Z11CanRxThreadPv+0x3e2>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80034e8:	f89d 201d 	ldrb.w	r2, [sp, #29]
                ASSIGN_IF_CHANGED(configuration.Tbypass,       getInt(&frame,   3));
 80034ec:	f8a9 301c 	strh.w	r3, [r9, #28]
 80034f0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80034f4:	f7fd f830 	bl	8000558 <__aeabi_i2f>
 80034f8:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 80034fc:	f7fc febe 	bl	800027c <__aeabi_fmul>
                ASSIGN_IF_CHANGED(configuration.HoldCurrent,   getFloat(&frame, 5));
 8003500:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8003504:	4680      	mov	r8, r0
 8003506:	f7fd f8bf 	bl	8000688 <__aeabi_fcmpeq>
 800350a:	2800      	cmp	r0, #0
 800350c:	f47f aea6 	bne.w	800325c <_Z11CanRxThreadPv+0x1bc>
 8003510:	f8c9 8020 	str.w	r8, [r9, #32]
            if (withNewValue) {
 8003514:	e6a2      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
 8003516:	f8b9 2010 	ldrh.w	r2, [r9, #16]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800351a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
 800351e:	4293      	cmp	r3, r2
                ASSIGN_IF_CHANGED(configuration.BoostCurrent,  getFloat(&frame, 3));
 8003520:	f8c9 800c 	str.w	r8, [r9, #12]
                ASSIGN_IF_CHANGED(configuration.TBoostMin,     getInt(&frame,   5));
 8003524:	f47f ae98 	bne.w	8003258 <_Z11CanRxThreadPv+0x1b8>
 8003528:	e698      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800352a:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800352e:	f89d 3019 	ldrb.w	r3, [sp, #25]
                ASSIGN_IF_CHANGED(configuration.TholdOff,      getInt(&frame,   1));
 8003532:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003536:	eb03 2300 	add.w	r3, r3, r0, lsl #8
                ASSIGN_IF_CHANGED(configuration.TholdOff,      getInt(&frame,   1));
 800353a:	4299      	cmp	r1, r3
 800353c:	bf1c      	itt	ne
 800353e:	f8a9 3024 	strhne.w	r3, [r9, #36]	; 0x24
 8003542:	2301      	movne	r3, #1
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003544:	f89d 101c 	ldrb.w	r1, [sp, #28]
                ASSIGN_IF_CHANGED(configuration.TholdOff,      getInt(&frame,   1));
 8003548:	bf18      	it	ne
 800354a:	9301      	strne	r3, [sp, #4]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800354c:	f89d 301b 	ldrb.w	r3, [sp, #27]
            bool withNewValue = false;
 8003550:	bf08      	it	eq
 8003552:	9201      	streq	r2, [sp, #4]
                ASSIGN_IF_CHANGED(configuration.THoldDuration, getInt(&frame,   3));
 8003554:	f8b9 2026 	ldrh.w	r2, [r9, #38]	; 0x26
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003558:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.THoldDuration, getInt(&frame,   3));
 800355c:	429a      	cmp	r2, r3
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 800355e:	f89d 001e 	ldrb.w	r0, [sp, #30]
                ASSIGN_IF_CHANGED(configuration.THoldDuration, getInt(&frame,   3));
 8003562:	d04d      	beq.n	8003600 <_Z11CanRxThreadPv+0x560>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003564:	f89d 201d 	ldrb.w	r2, [sp, #29]
                ASSIGN_IF_CHANGED(configuration.THoldDuration, getInt(&frame,   3));
 8003568:	f8a9 3026 	strh.w	r3, [r9, #38]	; 0x26
 800356c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8003570:	f7fc fff2 	bl	8000558 <__aeabi_i2f>
 8003574:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 8003578:	f7fc fe80 	bl	800027c <__aeabi_fmul>
 800357c:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.PumpPeakCurrent,   getFloat(&frame, 5));
 800357e:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8003582:	4641      	mov	r1, r8
 8003584:	f7fd f880 	bl	8000688 <__aeabi_fcmpeq>
 8003588:	2800      	cmp	r0, #0
 800358a:	f47f ae67 	bne.w	800325c <_Z11CanRxThreadPv+0x1bc>
 800358e:	f8c9 8028 	str.w	r8, [r9, #40]	; 0x28
            if (withNewValue) {
 8003592:	e663      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
 8003594:	f8b9 2018 	ldrh.w	r2, [r9, #24]
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003598:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
 800359c:	4293      	cmp	r3, r2
                ASSIGN_IF_CHANGED(configuration.PeakCurrent,   getFloat(&frame, 3));
 800359e:	f8c9 8014 	str.w	r8, [r9, #20]
                ASSIGN_IF_CHANGED(configuration.TpeakDuration, getInt(&frame,   5));
 80035a2:	f47f af6b 	bne.w	800347c <_Z11CanRxThreadPv+0x3dc>
 80035a6:	e659      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      RET_ON_ERROR(mfs_garbage_collect(mfsp));
 80035a8:	f7fe fc82 	bl	8001eb0 <mfs_garbage_collect.constprop.0>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f47f aeab 	bne.w	800330a <_Z11CanRxThreadPv+0x26a>
      warning = true;
 80035b4:	f04f 0801 	mov.w	r8, #1
 80035b8:	f8da c010 	ldr.w	ip, [sl, #16]
 80035bc:	e6c5      	b.n	800334a <_Z11CanRxThreadPv+0x2aa>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80035be:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80035c2:	f89d 001a 	ldrb.w	r0, [sp, #26]
 80035c6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80035ca:	f7fc ffc5 	bl	8000558 <__aeabi_i2f>
 80035ce:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 80035d2:	f7fc fe53 	bl	800027c <__aeabi_fmul>
 80035d6:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.PumpHoldCurrent,   getFloat(&frame, 1));
 80035d8:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80035dc:	4641      	mov	r1, r8
 80035de:	f7fd f853 	bl	8000688 <__aeabi_fcmpeq>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80035e2:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80035e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
                ASSIGN_IF_CHANGED(configuration.PumpHoldCurrent,   getFloat(&frame, 1));
 80035ea:	b318      	cbz	r0, 8003634 <_Z11CanRxThreadPv+0x594>
                ASSIGN_IF_CHANGED(configuration.outputCanID, getInt(&frame,   3));
 80035ec:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 80035f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.outputCanID, getInt(&frame,   3));
 80035f4:	4293      	cmp	r3, r2
 80035f6:	f43f adc8 	beq.w	800318a <_Z11CanRxThreadPv+0xea>
 80035fa:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            if (withNewValue) {
 80035fe:	e62d      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003600:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003604:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8003608:	f7fc ffa6 	bl	8000558 <__aeabi_i2f>
 800360c:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 8003610:	f7fc fe34 	bl	800027c <__aeabi_fmul>
 8003614:	4680      	mov	r8, r0
                ASSIGN_IF_CHANGED(configuration.PumpPeakCurrent,   getFloat(&frame, 5));
 8003616:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 800361a:	4641      	mov	r1, r8
 800361c:	f7fd f834 	bl	8000688 <__aeabi_fcmpeq>
 8003620:	2800      	cmp	r0, #0
 8003622:	d0b4      	beq.n	800358e <_Z11CanRxThreadPv+0x4ee>
            if (withNewValue) {
 8003624:	9b01      	ldr	r3, [sp, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f43f adaf 	beq.w	800318a <_Z11CanRxThreadPv+0xea>
 800362c:	e616      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
    return MFS_NO_ERROR;
  }
#endif /* MFS_CFG_TRANSACTION_MAX > 0 */

  /* Invalid state.*/
  return MFS_ERR_INV_STATE;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003632:	e66a      	b.n	800330a <_Z11CanRxThreadPv+0x26a>
                ASSIGN_IF_CHANGED(configuration.outputCanID, getInt(&frame,   3));
 8003634:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
      return frame->data8[offset + 1] * 256 + frame->data8[offset];
 8003638:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                ASSIGN_IF_CHANGED(configuration.outputCanID, getInt(&frame,   3));
 800363c:	4293      	cmp	r3, r2
                ASSIGN_IF_CHANGED(configuration.PumpHoldCurrent,   getFloat(&frame, 1));
 800363e:	f8c9 802c 	str.w	r8, [r9, #44]	; 0x2c
                ASSIGN_IF_CHANGED(configuration.outputCanID, getInt(&frame,   3));
 8003642:	d1da      	bne.n	80035fa <_Z11CanRxThreadPv+0x55a>
 8003644:	e60a      	b.n	800325c <_Z11CanRxThreadPv+0x1bc>
      mfsp->used_space -= ALIGNED_REC_SIZE(mfsp->descriptors[id - 1U].size);
 8003646:	f8da 201c 	ldr.w	r2, [sl, #28]
 800364a:	f8da 1014 	ldr.w	r1, [sl, #20]
 800364e:	320f      	adds	r2, #15
 8003650:	43d2      	mvns	r2, r2
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	440a      	add	r2, r1
 8003658:	e6b6      	b.n	80033c8 <_Z11CanRxThreadPv+0x328>
      return MFS_ERR_OUT_OF_MEM;
 800365a:	f06f 0303 	mvn.w	r3, #3
 800365e:	e654      	b.n	800330a <_Z11CanRxThreadPv+0x26a>
      return MFS_ERR_TRANSACTION_SIZE;
 8003660:	f06f 0305 	mvn.w	r3, #5
 8003664:	e651      	b.n	800330a <_Z11CanRxThreadPv+0x26a>
      return MFS_ERR_TRANSACTION_NUM;
 8003666:	f06f 0304 	mvn.w	r3, #4
 800366a:	e64e      	b.n	800330a <_Z11CanRxThreadPv+0x26a>
 800366c:	0000      	movs	r0, r0
	...

08003670 <_Z11CanTxThreadPv>:
{
 8003670:	b580      	push	{r7, lr}
    return FIXED_POINT * value;
 8003672:	f04f 4786 	mov.w	r7, #1124073472	; 0x43000000
 8003676:	4d87      	ldr	r5, [pc, #540]	; (8003894 <_Z11CanTxThreadPv+0x224>)
 8003678:	4c87      	ldr	r4, [pc, #540]	; (8003898 <_Z11CanTxThreadPv+0x228>)
 800367a:	4e88      	ldr	r6, [pc, #544]	; (800389c <_Z11CanTxThreadPv+0x22c>)
 800367c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80038a8 <_Z11CanTxThreadPv+0x238>
        if (configuration.outputCanID == 0) {
 8003680:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80038ac <_Z11CanTxThreadPv+0x23c>
	    memcpy(m_frame.data8, VERSION, sizeof(VERSION));
 8003684:	f8df a228 	ldr.w	sl, [pc, #552]	; 80038b0 <_Z11CanTxThreadPv+0x240>
{
 8003688:	b086      	sub	sp, #24
        intTxCounter++;
 800368a:	682b      	ldr	r3, [r5, #0]
        chThdSleepMilliseconds(1000 / CAN_TX_PERIOD_MS);
 800368c:	2014      	movs	r0, #20
        intTxCounter++;
 800368e:	3301      	adds	r3, #1
 8003690:	602b      	str	r3, [r5, #0]
        chThdSleepMilliseconds(1000 / CAN_TX_PERIOD_MS);
 8003692:	f7fe fb0d 	bl	8001cb0 <chThdSleep>
        if (configuration.outputCanID == 0) {
 8003696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f6      	beq.n	800368a <_Z11CanTxThreadPv+0x1a>
 800369c:	682a      	ldr	r2, [r5, #0]
 800369e:	4880      	ldr	r0, [pc, #512]	; (80038a0 <_Z11CanTxThreadPv+0x230>)
        if (intTxCounter % (1000 / CAN_TX_PERIOD_MS) == 0) {
 80036a0:	4980      	ldr	r1, [pc, #512]	; (80038a4 <_Z11CanTxThreadPv+0x234>)
        if (configuration.outputCanID == 0) {
 80036a2:	fb00 8202 	mla	r2, r0, r2, r8
        if (intTxCounter % (1000 / CAN_TX_PERIOD_MS) == 0) {
 80036a6:	ebb1 0f72 	cmp.w	r1, r2, ror #1
 80036aa:	d82b      	bhi.n	8003704 <_Z11CanTxThreadPv+0x94>
	    memset(m_frame.data8, 0, sizeof(m_frame.data8));
 80036ac:	2100      	movs	r1, #0
	    m_frame.data8[7] = GDI4_MAGIC;
 80036ae:	f04f 0c67 	mov.w	ip, #103	; 0x67
	    m_frame.DLC = 8;
 80036b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    m_frame.EID = configuration.outputCanID;
 80036b6:	9803      	ldr	r0, [sp, #12]
	    m_frame.DLC = 8;
 80036b8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036bc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	    m_frame.EID = configuration.outputCanID;
 80036c0:	f363 001c 	bfi	r0, r3, #0, #29
	    m_frame.data8[6] = (int)chip.fault;
 80036c4:	f899 e004 	ldrb.w	lr, [r9, #4]
	    m_frame.data8[0] = configuration.inputCanID;
 80036c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	    m_frame.DLC = 8;
 80036ca:	f88d 2008 	strb.w	r2, [sp, #8]
	    m_frame.data8[1] = configuration.updateCounter;
 80036ce:	6862      	ldr	r2, [r4, #4]
	    m_frame.EID = configuration.outputCanID;
 80036d0:	9003      	str	r0, [sp, #12]
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 80036d2:	a802      	add	r0, sp, #8
	    memset(m_frame.data8, 0, sizeof(m_frame.data8));
 80036d4:	f8ad 1013 	strh.w	r1, [sp, #19]
 80036d8:	f88d 1015 	strb.w	r1, [sp, #21]
	    m_frame.data8[2] = isOverallHappyStatus;
 80036dc:	f88d 1012 	strb.w	r1, [sp, #18]
	    m_frame.data8[7] = GDI4_MAGIC;
 80036e0:	f88d c017 	strb.w	ip, [sp, #23]
	    m_frame.data8[0] = configuration.inputCanID;
 80036e4:	f88d 3010 	strb.w	r3, [sp, #16]
	    m_frame.data8[1] = configuration.updateCounter;
 80036e8:	f88d 2011 	strb.w	r2, [sp, #17]
	    m_frame.data8[6] = (int)chip.fault;
 80036ec:	f88d e016 	strb.w	lr, [sp, #22]
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 80036f0:	f7fe f9fe 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 80036f4:	b910      	cbnz	r0, 80036fc <_Z11CanTxThreadPv+0x8c>
 80036f6:	f7fd fca3 	bl	8001040 <_ZL13countTxResultl.part.0>
 80036fa:	e7c6      	b.n	800368a <_Z11CanTxThreadPv+0x1a>
		canWriteNotOk++;
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	e7c2      	b.n	800368a <_Z11CanTxThreadPv+0x1a>
	    m_frame.DLC = 8;
 8003704:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    m_frame.data16[0] =                configuration.BoostVoltage;
 8003708:	f8b4 c008 	ldrh.w	ip, [r4, #8]
	    m_frame.DLC = 8;
 800370c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003710:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003714:	4639      	mov	r1, r7
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	f88d 2008 	strb.w	r2, [sp, #8]
	    m_frame.data16[0] =                configuration.BoostVoltage;
 800371e:	f8ad c010 	strh.w	ip, [sp, #16]
 8003722:	f7fc fdab 	bl	800027c <__aeabi_fmul>
 8003726:	f7fd f807 	bl	8000738 <__aeabi_f2uiz>
 800372a:	4684      	mov	ip, r0
	    m_frame.EID = configuration.outputCanID + 1;
 800372c:	9b01      	ldr	r3, [sp, #4]
 800372e:	9a03      	ldr	r2, [sp, #12]
	    m_frame.data16[2] =                configuration.TBoostMin;
 8003730:	6921      	ldr	r1, [r4, #16]
	    m_frame.EID = configuration.outputCanID + 1;
 8003732:	3301      	adds	r3, #1
 8003734:	f363 021c 	bfi	r2, r3, #0, #29
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003738:	a802      	add	r0, sp, #8
 800373a:	f8ad c012 	strh.w	ip, [sp, #18]
	    m_frame.EID = configuration.outputCanID + 1;
 800373e:	9203      	str	r2, [sp, #12]
	    m_frame.data16[2] =                configuration.TBoostMin;
 8003740:	9105      	str	r1, [sp, #20]
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003742:	f7fe f9d5 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 8003746:	2800      	cmp	r0, #0
 8003748:	f040 809b 	bne.w	8003882 <_Z11CanTxThreadPv+0x212>
 800374c:	f7fd fc78 	bl	8001040 <_ZL13countTxResultl.part.0>
	    m_frame.DLC = 8;
 8003750:	2208      	movs	r2, #8
 8003752:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003756:	4639      	mov	r1, r7
 8003758:	f362 0303 	bfi	r3, r2, #0, #4
 800375c:	6960      	ldr	r0, [r4, #20]
 800375e:	f88d 3008 	strb.w	r3, [sp, #8]
 8003762:	f7fc fd8b 	bl	800027c <__aeabi_fmul>
 8003766:	f7fc ffe7 	bl	8000738 <__aeabi_f2uiz>
	    m_frame.EID = configuration.outputCanID + 2;
 800376a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800376c:	9a03      	ldr	r2, [sp, #12]
 800376e:	3302      	adds	r3, #2
 8003770:	f363 021c 	bfi	r2, r3, #0, #29
	    m_frame.data16[1] =                configuration.TpeakDuration;
 8003774:	f8b4 c018 	ldrh.w	ip, [r4, #24]
	    m_frame.data16[2] =                configuration.TpeakOff;
 8003778:	8b61      	ldrh	r1, [r4, #26]
	    m_frame.data16[3] =                configuration.Tbypass;
 800377a:	8ba3      	ldrh	r3, [r4, #28]
 800377c:	f8ad 0010 	strh.w	r0, [sp, #16]
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003780:	a802      	add	r0, sp, #8
	    m_frame.EID = configuration.outputCanID + 2;
 8003782:	9203      	str	r2, [sp, #12]
	    m_frame.data16[1] =                configuration.TpeakDuration;
 8003784:	f8ad c012 	strh.w	ip, [sp, #18]
	    m_frame.data16[2] =                configuration.TpeakOff;
 8003788:	f8ad 1014 	strh.w	r1, [sp, #20]
	    m_frame.data16[3] =                configuration.Tbypass;
 800378c:	f8ad 3016 	strh.w	r3, [sp, #22]
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003790:	f7fe f9ae 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 8003794:	2800      	cmp	r0, #0
 8003796:	d170      	bne.n	800387a <_Z11CanTxThreadPv+0x20a>
 8003798:	f7fd fc52 	bl	8001040 <_ZL13countTxResultl.part.0>
	    m_frame.DLC = 8;
 800379c:	2208      	movs	r2, #8
 800379e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80037a2:	4639      	mov	r1, r7
 80037a4:	f362 0303 	bfi	r3, r2, #0, #4
 80037a8:	6a20      	ldr	r0, [r4, #32]
 80037aa:	f88d 3008 	strb.w	r3, [sp, #8]
 80037ae:	f7fc fd65 	bl	800027c <__aeabi_fmul>
 80037b2:	f7fc ffc1 	bl	8000738 <__aeabi_f2uiz>
 80037b6:	4684      	mov	ip, r0
	    m_frame.data16[1] =                configuration.TholdOff;
 80037b8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	    m_frame.data16[2] =                configuration.THoldDuration;
 80037ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80037bc:	4639      	mov	r1, r7
 80037be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	    m_frame.data16[1] =                configuration.TholdOff;
 80037c0:	f8ad 2012 	strh.w	r2, [sp, #18]
	    m_frame.data16[2] =                configuration.THoldDuration;
 80037c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037c8:	f8ad c010 	strh.w	ip, [sp, #16]
 80037cc:	f7fc fd56 	bl	800027c <__aeabi_fmul>
 80037d0:	f7fc ffb2 	bl	8000738 <__aeabi_f2uiz>
 80037d4:	4601      	mov	r1, r0
	    m_frame.EID = configuration.outputCanID + 3;
 80037d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037d8:	9a03      	ldr	r2, [sp, #12]
 80037da:	3303      	adds	r3, #3
 80037dc:	f363 021c 	bfi	r2, r3, #0, #29
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 80037e0:	a802      	add	r0, sp, #8
 80037e2:	f8ad 1016 	strh.w	r1, [sp, #22]
	    m_frame.EID = configuration.outputCanID + 3;
 80037e6:	9203      	str	r2, [sp, #12]
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 80037e8:	f7fe f982 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d140      	bne.n	8003872 <_Z11CanTxThreadPv+0x202>
 80037f0:	f7fd fc26 	bl	8001040 <_ZL13countTxResultl.part.0>
	    m_frame.DLC = 2;
 80037f4:	2202      	movs	r2, #2
 80037f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80037fa:	4639      	mov	r1, r7
 80037fc:	f362 0303 	bfi	r3, r2, #0, #4
 8003800:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003802:	f88d 3008 	strb.w	r3, [sp, #8]
 8003806:	f7fc fd39 	bl	800027c <__aeabi_fmul>
 800380a:	f7fc ff95 	bl	8000738 <__aeabi_f2uiz>
 800380e:	4601      	mov	r1, r0
	    m_frame.EID = configuration.outputCanID + 4;
 8003810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003812:	9a03      	ldr	r2, [sp, #12]
 8003814:	3304      	adds	r3, #4
 8003816:	f363 021c 	bfi	r2, r3, #0, #29
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 800381a:	a802      	add	r0, sp, #8
 800381c:	f8ad 1010 	strh.w	r1, [sp, #16]
	    m_frame.EID = configuration.outputCanID + 4;
 8003820:	9203      	str	r2, [sp, #12]
    	msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003822:	f7fe f965 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 8003826:	bb00      	cbnz	r0, 800386a <_Z11CanTxThreadPv+0x1fa>
 8003828:	f7fd fc0a 	bl	8001040 <_ZL13countTxResultl.part.0>
        if (intTxCounter % (1000 / CAN_TX_PERIOD_MS) == 0) {
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	491c      	ldr	r1, [pc, #112]	; (80038a0 <_Z11CanTxThreadPv+0x230>)
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <_Z11CanTxThreadPv+0x234>)
 8003832:	fb01 8303 	mla	r3, r1, r3, r8
 8003836:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 800383a:	d914      	bls.n	8003866 <_Z11CanTxThreadPv+0x1f6>
	    m_frame.DLC = sizeof(VERSION);
 800383c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    m_frame.EID = configuration.outputCanID + 5;
 8003840:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003842:	9903      	ldr	r1, [sp, #12]
 8003844:	3205      	adds	r2, #5
	    m_frame.DLC = sizeof(VERSION);
 8003846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	    m_frame.EID = configuration.outputCanID + 5;
 800384a:	f362 011c 	bfi	r1, r2, #0, #29
	    m_frame.DLC = sizeof(VERSION);
 800384e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 8003852:	a802      	add	r0, sp, #8
	    m_frame.EID = configuration.outputCanID + 5;
 8003854:	e9cd 1a03 	strd	r1, sl, [sp, #12]
	    m_frame.DLC = sizeof(VERSION);
 8003858:	f88d 3008 	strb.w	r3, [sp, #8]
    	msg_t msg = canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, CAN_TX_TIMEOUT_100_MS);
 800385c:	f7fe f948 	bl	8001af0 <canTransmitTimeout.constprop.0>
	if (msg == MSG_OK) {
 8003860:	b998      	cbnz	r0, 800388a <_Z11CanTxThreadPv+0x21a>
 8003862:	f7fd fbed 	bl	8001040 <_ZL13countTxResultl.part.0>
 8003866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003868:	e720      	b.n	80036ac <_Z11CanTxThreadPv+0x3c>
		canWriteNotOk++;
 800386a:	6833      	ldr	r3, [r6, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	e7dc      	b.n	800382c <_Z11CanTxThreadPv+0x1bc>
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	6033      	str	r3, [r6, #0]
 8003878:	e7bc      	b.n	80037f4 <_Z11CanTxThreadPv+0x184>
 800387a:	6833      	ldr	r3, [r6, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	e78c      	b.n	800379c <_Z11CanTxThreadPv+0x12c>
 8003882:	6833      	ldr	r3, [r6, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	e762      	b.n	8003750 <_Z11CanTxThreadPv+0xe0>
 800388a:	6833      	ldr	r3, [r6, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	6033      	str	r3, [r6, #0]
 8003890:	e7e9      	b.n	8003866 <_Z11CanTxThreadPv+0x1f6>
 8003892:	bf00      	nop
 8003894:	20000964 	.word	0x20000964
 8003898:	20001284 	.word	0x20001284
 800389c:	200010c8 	.word	0x200010c8
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	19999999 	.word	0x19999999
 80038a8:	20001270 	.word	0x20001270
 80038ac:	19999998 	.word	0x19999998
 80038b0:	05051814 	.word	0x05051814
	...

080038c0 <_reads>:
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 80038c0:	b570      	push	{r4, r5, r6, lr}
  if (msp->eos - msp->offset < n)
 80038c2:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
 80038c6:	1b9d      	subs	r5, r3, r6
 80038c8:	4295      	cmp	r5, r2
 80038ca:	bf28      	it	cs
 80038cc:	4615      	movcs	r5, r2
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 80038ce:	4604      	mov	r4, r0
  memcpy(bp, msp->buffer + msp->offset, n);
 80038d0:	6843      	ldr	r3, [r0, #4]
 80038d2:	462a      	mov	r2, r5
 80038d4:	4608      	mov	r0, r1
 80038d6:	1999      	adds	r1, r3, r6
 80038d8:	f7fd f8ca 	bl	8000a70 <memcpy>
  msp->offset += n;
 80038dc:	6922      	ldr	r2, [r4, #16]
}
 80038de:	4628      	mov	r0, r5
  msp->offset += n;
 80038e0:	442a      	add	r2, r5
 80038e2:	6122      	str	r2, [r4, #16]
}
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	bf00      	nop
	...

080038f0 <_writes>:
static size_t _writes(void *ip, const uint8_t *bp, size_t n) {
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4604      	mov	r4, r0
  if (msp->size - msp->eos < n)
 80038f4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 80038f8:	1a1d      	subs	r5, r3, r0
 80038fa:	4295      	cmp	r5, r2
 80038fc:	bf28      	it	cs
 80038fe:	4615      	movcs	r5, r2
  memcpy(msp->buffer + msp->eos, bp, n);
 8003900:	6866      	ldr	r6, [r4, #4]
 8003902:	462a      	mov	r2, r5
 8003904:	4430      	add	r0, r6
 8003906:	f7fd f8b3 	bl	8000a70 <memcpy>
  msp->eos += n;
 800390a:	68e2      	ldr	r2, [r4, #12]
}
 800390c:	4628      	mov	r0, r5
  msp->eos += n;
 800390e:	442a      	add	r2, r5
 8003910:	60e2      	str	r2, [r4, #12]
}
 8003912:	bd70      	pop	{r4, r5, r6, pc}
	...

08003920 <efl_lld_read>:
                           size_t n, uint8_t *rp) {
 8003920:	b570      	push	{r4, r5, r6, lr}
  if (devp->state == FLASH_ERASE) {
 8003922:	7905      	ldrb	r5, [r0, #4]
 8003924:	2d05      	cmp	r5, #5
 8003926:	d00e      	beq.n	8003946 <efl_lld_read+0x26>
 8003928:	4604      	mov	r4, r0
  devp->state = FLASH_READ;
 800392a:	2603      	movs	r6, #3
  eflp->flash->SR = 0x0000001FU;
 800392c:	251f      	movs	r5, #31
 800392e:	4618      	mov	r0, r3
  stm32_flash_clear_status(devp);
 8003930:	68e3      	ldr	r3, [r4, #12]
  devp->state = FLASH_READ;
 8003932:	7126      	strb	r6, [r4, #4]
  memcpy((void *)rp, (const void *)efl_lld_descriptor.address + offset, n);
 8003934:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
  eflp->flash->SR = 0x0000001FU;
 8003938:	60dd      	str	r5, [r3, #12]
  memcpy((void *)rp, (const void *)efl_lld_descriptor.address + offset, n);
 800393a:	f7fd f899 	bl	8000a70 <memcpy>
  devp->state = FLASH_READY;
 800393e:	2302      	movs	r3, #2
 8003940:	7123      	strb	r3, [r4, #4]
 8003942:	2000      	movs	r0, #0
}
 8003944:	bd70      	pop	{r4, r5, r6, pc}
    return FLASH_BUSY_ERASING;
 8003946:	2001      	movs	r0, #1
}
 8003948:	bd70      	pop	{r4, r5, r6, pc}
 800394a:	bf00      	nop
 800394c:	0000      	movs	r0, r0
	...

08003950 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	b085      	sub	sp, #20
 8003956:	f04f 0920 	mov.w	r9, #32
 800395a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800395e:	69c7      	ldr	r7, [r0, #28]
 8003960:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8003964:	b3aa      	cbz	r2, 80039d2 <oqWriteTimeout+0x82>
 8003966:	4604      	mov	r4, r0
 8003968:	460e      	mov	r6, r1
 800396a:	f04f 0a00 	mov.w	sl, #0
 800396e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8003972:	68a2      	ldr	r2, [r4, #8]
 8003974:	4593      	cmp	fp, r2
 8003976:	bf98      	it	ls
 8003978:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800397a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800397e:	bf88      	it	hi
 8003980:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003982:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8003986:	45a8      	cmp	r8, r5
 8003988:	d844      	bhi.n	8003a14 <oqWriteTimeout+0xc4>
  else if (n > s1) {
 800398a:	d229      	bcs.n	80039e0 <oqWriteTimeout+0x90>
    s2 = n - s1;
 800398c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003990:	4642      	mov	r2, r8
 8003992:	4631      	mov	r1, r6
    s2 = n - s1;
 8003994:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003996:	f7fd f86b 	bl	8000a70 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800399a:	eb06 0108 	add.w	r1, r6, r8
 800399e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80039a2:	68e0      	ldr	r0, [r4, #12]
 80039a4:	4642      	mov	r2, r8
 80039a6:	f7fd f863 	bl	8000a70 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80039aa:	4643      	mov	r3, r8
  oqp->q_counter -= n;
 80039ac:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80039ae:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 80039b0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80039b2:	18cb      	adds	r3, r1, r3
 80039b4:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80039b6:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80039b8:	b10f      	cbz	r7, 80039be <oqWriteTimeout+0x6e>
        nfy(oqp);
 80039ba:	4620      	mov	r0, r4
 80039bc:	47b8      	blx	r7
 80039be:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80039c2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80039c6:	442e      	add	r6, r5
 80039c8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80039cc:	f1bb 0f00 	cmp.w	fp, #0
 80039d0:	d1cf      	bne.n	8003972 <oqWriteTimeout+0x22>
 80039d2:	2300      	movs	r3, #0
  if (n > oqGetEmptyI(oqp)) {
 80039d4:	9803      	ldr	r0, [sp, #12]
 80039d6:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80039da:	b005      	add	sp, #20
 80039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80039e0:	462a      	mov	r2, r5
 80039e2:	4631      	mov	r1, r6
 80039e4:	f7fd f844 	bl	8000a70 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80039e8:	68e2      	ldr	r2, [r4, #12]
 80039ea:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80039ec:	68a2      	ldr	r2, [r4, #8]
 80039ee:	1b52      	subs	r2, r2, r5
 80039f0:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	d1e0      	bne.n	80039b8 <oqWriteTimeout+0x68>
 80039f6:	4620      	mov	r0, r4
 80039f8:	9902      	ldr	r1, [sp, #8]
 80039fa:	f7fe f861 	bl	8001ac0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d0b7      	beq.n	8003972 <oqWriteTimeout+0x22>
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	eba3 000b 	sub.w	r0, r3, fp
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f383 8811 	msr	BASEPRI, r3
}
 8003a0e:	b005      	add	sp, #20
 8003a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003a14:	462a      	mov	r2, r5
 8003a16:	4631      	mov	r1, r6
 8003a18:	f7fd f82a 	bl	8000a70 <memcpy>
    oqp->q_wrptr += n;
 8003a1c:	6962      	ldr	r2, [r4, #20]
 8003a1e:	442a      	add	r2, r5
 8003a20:	6162      	str	r2, [r4, #20]
 8003a22:	e7e3      	b.n	80039ec <oqWriteTimeout+0x9c>
	...

08003a30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003a30:	3030      	adds	r0, #48	; 0x30
 8003a32:	f7ff bf8d 	b.w	8003950 <oqWriteTimeout>
 8003a36:	bf00      	nop
	...

08003a40 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a44:	3030      	adds	r0, #48	; 0x30
 8003a46:	f7ff bf83 	b.w	8003950 <oqWriteTimeout>
 8003a4a:	bf00      	nop
 8003a4c:	0000      	movs	r0, r0
	...

08003a50 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	b085      	sub	sp, #20
 8003a56:	f04f 0920 	mov.w	r9, #32
 8003a5a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8003a5e:	69c7      	ldr	r7, [r0, #28]
 8003a60:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d035      	beq.n	8003ad4 <iqReadTimeout+0x84>
 8003a68:	4604      	mov	r4, r0
 8003a6a:	460e      	mov	r6, r1
 8003a6c:	f04f 0a00 	mov.w	sl, #0
 8003a70:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8003a74:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003a76:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8003a78:	4593      	cmp	fp, r2
 8003a7a:	bf98      	it	ls
 8003a7c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003a7e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8003a80:	bf88      	it	hi
 8003a82:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003a84:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8003a88:	45a8      	cmp	r8, r5
 8003a8a:	d844      	bhi.n	8003b16 <iqReadTimeout+0xc6>
  else if (n > s1) {
 8003a8c:	d229      	bcs.n	8003ae2 <iqReadTimeout+0x92>
    s2 = n - s1;
 8003a8e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003a92:	4642      	mov	r2, r8
 8003a94:	4630      	mov	r0, r6
    s2 = n - s1;
 8003a96:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003a98:	f7fc ffea 	bl	8000a70 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003a9c:	eb06 0008 	add.w	r0, r6, r8
 8003aa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003aa4:	68e1      	ldr	r1, [r4, #12]
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	f7fc ffe2 	bl	8000a70 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003aac:	4643      	mov	r3, r8
  iqp->q_counter -= n;
 8003aae:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003ab0:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8003ab2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003ab4:	18cb      	adds	r3, r1, r3
 8003ab6:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8003ab8:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8003aba:	b10f      	cbz	r7, 8003ac0 <iqReadTimeout+0x70>
        nfy(iqp);
 8003abc:	4620      	mov	r0, r4
 8003abe:	47b8      	blx	r7
 8003ac0:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8003ac4:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8003ac8:	442e      	add	r6, r5
 8003aca:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8003ace:	f1bb 0f00 	cmp.w	fp, #0
 8003ad2:	d1cf      	bne.n	8003a74 <iqReadTimeout+0x24>
 8003ad4:	2300      	movs	r3, #0
  if (n > iqGetFullI(iqp)) {
 8003ad6:	9803      	ldr	r0, [sp, #12]
 8003ad8:	f383 8811 	msr	BASEPRI, r3
}
 8003adc:	b005      	add	sp, #20
 8003ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7fc ffc3 	bl	8000a70 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003aea:	68e2      	ldr	r2, [r4, #12]
 8003aec:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8003aee:	68a2      	ldr	r2, [r4, #8]
 8003af0:	1b52      	subs	r2, r2, r5
 8003af2:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	d1e0      	bne.n	8003aba <iqReadTimeout+0x6a>
 8003af8:	4620      	mov	r0, r4
 8003afa:	9902      	ldr	r1, [sp, #8]
 8003afc:	f7fd ffe0 	bl	8001ac0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d0b7      	beq.n	8003a74 <iqReadTimeout+0x24>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	eba3 000b 	sub.w	r0, r3, fp
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f383 8811 	msr	BASEPRI, r3
}
 8003b10:	b005      	add	sp, #20
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003b16:	462a      	mov	r2, r5
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7fc ffa9 	bl	8000a70 <memcpy>
    iqp->q_rdptr += n;
 8003b1e:	69a2      	ldr	r2, [r4, #24]
 8003b20:	442a      	add	r2, r5
 8003b22:	61a2      	str	r2, [r4, #24]
 8003b24:	e7e3      	b.n	8003aee <iqReadTimeout+0x9e>
 8003b26:	bf00      	nop
	...

08003b30 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003b30:	300c      	adds	r0, #12
 8003b32:	f7ff bf8d 	b.w	8003a50 <iqReadTimeout>
 8003b36:	bf00      	nop
	...

08003b40 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b44:	300c      	adds	r0, #12
 8003b46:	f7ff bf83 	b.w	8003a50 <iqReadTimeout>
 8003b4a:	bf00      	nop
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <_GLOBAL__sub_I_isOverallHappyStatus>:
class Pt2001Base {
 8003b50:	2200      	movs	r2, #0
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <_GLOBAL__sub_I_isOverallHappyStatus+0x14>)
class Pt2001 : public Pt2001Base {
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <_GLOBAL__sub_I_isOverallHappyStatus+0x18>)
 8003b56:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8003b5a:	711a      	strb	r2, [r3, #4]
 8003b5c:	80da      	strh	r2, [r3, #6]
 8003b5e:	6019      	str	r1, [r3, #0]
        //auto fault = GetCurrentFault();

        //palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
        chThdSleepMilliseconds(100);
    }
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20001270 	.word	0x20001270
 8003b68:	080050a8 	.word	0x080050a8
 8003b6c:	00000000 	.word	0x00000000

08003b70 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8003b70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b74:	2000      	movs	r0, #0
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <main+0x50>)
int main() {
 8003b78:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003b7c:	691e      	ldr	r6, [r3, #16]
 8003b7e:	611c      	str	r4, [r3, #16]
 8003b80:	691e      	ldr	r6, [r3, #16]
 8003b82:	6118      	str	r0, [r3, #16]
 8003b84:	691e      	ldr	r6, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8003b86:	68de      	ldr	r6, [r3, #12]
 8003b88:	60dc      	str	r4, [r3, #12]
 8003b8a:	68dc      	ldr	r4, [r3, #12]
 8003b8c:	60d8      	str	r0, [r3, #12]
 8003b8e:	68dc      	ldr	r4, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8003b90:	69dc      	ldr	r4, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8003b92:	4d0c      	ldr	r5, [pc, #48]	; (8003bc4 <main+0x54>)
  rccEnablePWRInterface(true);
 8003b94:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003b98:	61dc      	str	r4, [r3, #28]
 8003b9a:	69dc      	ldr	r4, [r3, #28]
  rccEnableBKPInterface(true);
 8003b9c:	69dc      	ldr	r4, [r3, #28]
  dma.isr_mask       = 0U;
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8003ba4:	61dc      	str	r4, [r3, #28]
 8003ba6:	69db      	ldr	r3, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8003ba8:	682c      	ldr	r4, [r5, #0]
  dma.allocated_mask = 0U;
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <main+0x58>)
 8003bac:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003bb0:	602c      	str	r4, [r5, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8003bb2:	4601      	mov	r1, r0
  dma.isr_mask       = 0U;
 8003bb4:	e9c3 0000 	strd	r0, r0, [r3]
 8003bb8:	4c04      	ldr	r4, [pc, #16]	; (8003bcc <main+0x5c>)
 8003bba:	4d05      	ldr	r5, [pc, #20]	; (8003bd0 <main+0x60>)
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	e00a      	b.n	8003bd6 <main+0x66>
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	200012dc 	.word	0x200012dc
 8003bcc:	40020008 	.word	0x40020008
 8003bd0:	0800510c 	.word	0x0800510c
 8003bd4:	6844      	ldr	r4, [r0, #4]
    dma.streams[i].func = NULL;
 8003bd6:	1898      	adds	r0, r3, r2
 8003bd8:	3208      	adds	r2, #8
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8003bda:	2a38      	cmp	r2, #56	; 0x38
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8003bdc:	6021      	str	r1, [r4, #0]
    dma.streams[i].func = NULL;
 8003bde:	6081      	str	r1, [r0, #8]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8003be0:	eb05 0042 	add.w	r0, r5, r2, lsl #1
 8003be4:	d1f6      	bne.n	8003bd4 <main+0x64>
  DMA1->IFCR = 0xFFFFFFFFU;
 8003be6:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003bea:	2460      	movs	r4, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003bec:	f44f 7780 	mov.w	r7, #256	; 0x100
 8003bf0:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8003bf4:	f04f 0940 	mov.w	r9, #64	; 0x40
 8003bf8:	f44f 7800 	mov.w	r8, #512	; 0x200
 8003bfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c00:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  GPIOB->CRL = config->PBData.crl;
 8003c04:	f04f 3688 	mov.w	r6, #2290649224	; 0x88888888
 8003c08:	4bdd      	ldr	r3, [pc, #884]	; (8003f80 <main+0x410>)
  canp->state       = CAN_STOP;
 8003c0a:	f04f 0c01 	mov.w	ip, #1
 8003c0e:	f8c3 e004 	str.w	lr, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c12:	4bdc      	ldr	r3, [pc, #880]	; (8003f84 <main+0x414>)
 8003c14:	25b0      	movs	r5, #176	; 0xb0
 8003c16:	f883 4306 	strb.w	r4, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c1a:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c1e:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c22:	f883 4307 	strb.w	r4, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c26:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c2a:	f8c3 a000 	str.w	sl, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c2e:	f883 4308 	strb.w	r4, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c32:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c36:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c38:	f883 4309 	strb.w	r4, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c3c:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c40:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c44:	f883 430a 	strb.w	r4, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c48:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c4c:	6018      	str	r0, [r3, #0]
  rccEnableAPB2(APB2_EN_MASK, true);
 8003c4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c52:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
 8003c56:	f500 3003 	add.w	r0, r0, #134144	; 0x20c00
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c5a:	f8c3 b180 	str.w	fp, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c5e:	f8c3 b000 	str.w	fp, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c62:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c66:	f8c3 7184 	str.w	r7, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c6a:	605f      	str	r7, [r3, #4]
 8003c6c:	6987      	ldr	r7, [r0, #24]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8003c6e:	4ac6      	ldr	r2, [pc, #792]	; (8003f88 <main+0x418>)
 8003c70:	f047 087d 	orr.w	r8, r7, #125	; 0x7d
 8003c74:	f8c0 8018 	str.w	r8, [r0, #24]
  GPIOA->ODR = config->PAData.odr;
 8003c78:	4fc4      	ldr	r7, [pc, #784]	; (8003f8c <main+0x41c>)
  GPIOA->CRH = config->PAData.crh;
 8003c7a:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8003fc4 <main+0x454>
  rccEnableAPB2(APB2_EN_MASK, true);
 8003c7e:	f8d0 9018 	ldr.w	r9, [r0, #24]
  GPIOA->ODR = config->PAData.odr;
 8003c82:	f8c7 e00c 	str.w	lr, [r7, #12]
  GPIOA->CRH = config->PAData.crh;
 8003c86:	f8c7 8004 	str.w	r8, [r7, #4]
  GPIOA->CRL = config->PAData.crl;
 8003c8a:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
 8003c8e:	f508 783f 	add.w	r8, r8, #764	; 0x2fc
 8003c92:	f8c7 8000 	str.w	r8, [r7]
  GPIOB->CRH = config->PBData.crh;
 8003c96:	f107 47e9 	add.w	r7, r7, #1954545664	; 0x74800000
  GPIOB->ODR = config->PBData.odr;
 8003c9a:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8003fc8 <main+0x458>
  GPIOB->CRH = config->PBData.crh;
 8003c9e:	f507 175e 	add.w	r7, r7, #3637248	; 0x378000
 8003ca2:	3788      	adds	r7, #136	; 0x88
  GPIOB->ODR = config->PBData.odr;
 8003ca4:	f8c8 e00c 	str.w	lr, [r8, #12]
  GPIOB->CRH = config->PBData.crh;
 8003ca8:	f8c8 7004 	str.w	r7, [r8, #4]
  GPIOB->CRL = config->PBData.crl;
 8003cac:	f8c8 6000 	str.w	r6, [r8]
  GPIOC->CRH = config->PCData.crh;
 8003cb0:	f108 4891 	add.w	r8, r8, #1216348160	; 0x48800000
  GPIOC->ODR = config->PCData.odr;
 8003cb4:	4fb6      	ldr	r7, [pc, #728]	; (8003f90 <main+0x420>)
  GPIOC->CRH = config->PCData.crh;
 8003cb6:	f508 3809 	add.w	r8, r8, #140288	; 0x22400
 8003cba:	f508 7862 	add.w	r8, r8, #904	; 0x388
  GPIOC->ODR = config->PCData.odr;
 8003cbe:	f8c7 e00c 	str.w	lr, [r7, #12]
  GPIOC->CRH = config->PCData.crh;
 8003cc2:	f8c7 8004 	str.w	r8, [r7, #4]
  GPIOC->CRL = config->PCData.crl;
 8003cc6:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8003fcc <main+0x45c>
 8003cca:	4614      	mov	r4, r2
 8003ccc:	f8c7 8000 	str.w	r8, [r7]
  GPIOD->CRL = config->PDData.crl;
 8003cd0:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8003fd0 <main+0x460>
  GPIOD->ODR = config->PDData.odr;
 8003cd4:	f8c7 e40c 	str.w	lr, [r7, #1036]	; 0x40c
  GPIOD->CRH = config->PDData.crh;
 8003cd8:	f8c7 6404 	str.w	r6, [r7, #1028]	; 0x404
  GPIOD->CRL = config->PDData.crl;
 8003cdc:	f8c7 8400 	str.w	r8, [r7, #1024]	; 0x400
  GPIOE->ODR = config->PEData.odr;
 8003ce0:	f8c7 e80c 	str.w	lr, [r7, #2060]	; 0x80c
  GPIOE->CRH = config->PEData.crh;
 8003ce4:	f8c7 6804 	str.w	r6, [r7, #2052]	; 0x804
  GPIOE->CRL = config->PEData.crl;
 8003ce8:	f8c7 6800 	str.w	r6, [r7, #2048]	; 0x800
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003cec:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8003cf0:	4ea8      	ldr	r6, [pc, #672]	; (8003f94 <main+0x424>)
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8003cf2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8003fd4 <main+0x464>
 8003cf6:	f886 c000 	strb.w	ip, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003cfa:	f883 5313 	strb.w	r5, [r3, #787]	; 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003cfe:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003d02:	601f      	str	r7, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d04:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003d08:	f883 5314 	strb.w	r5, [r3, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d0c:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003d10:	601f      	str	r7, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d12:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003d16:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d1a:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003d1e:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003d20:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d24:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003d28:	f106 0818 	add.w	r8, r6, #24
 8003d2c:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003d30:	601d      	str	r5, [r3, #0]
    rccEnableCAN1(true);
 8003d32:	69c7      	ldr	r7, [r0, #28]
 8003d34:	f8c6 8018 	str.w	r8, [r6, #24]
 8003d38:	f106 081c 	add.w	r8, r6, #28
 8003d3c:	f8c6 801c 	str.w	r8, [r6, #28]
 8003d40:	f106 0820 	add.w	r8, r6, #32
 8003d44:	f8c6 8020 	str.w	r8, [r6, #32]
 8003d48:	f106 0824 	add.w	r8, r6, #36	; 0x24
 8003d4c:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
 8003d50:	f106 0828 	add.w	r8, r6, #40	; 0x28
  CAND1.can = CAN1;
 8003d54:	4d90      	ldr	r5, [pc, #576]	; (8003f98 <main+0x428>)
 8003d56:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  qp->next = qp;
 8003d5a:	f106 0808 	add.w	r8, r6, #8
  qp->prev = qp;
 8003d5e:	e9c6 8802 	strd	r8, r8, [r6, #8]
    rccEnableCAN1(true);
 8003d62:	f047 7700 	orr.w	r7, r7, #33554432	; 0x2000000
  qp->next = qp;
 8003d66:	f106 0810 	add.w	r8, r6, #16
  qp->prev = qp;
 8003d6a:	e9c6 8804 	strd	r8, r8, [r6, #16]
  canp->config      = NULL;
 8003d6e:	6071      	str	r1, [r6, #4]
  CAND1.can = CAN1;
 8003d70:	62f5      	str	r5, [r6, #44]	; 0x2c
    rccEnableCAN1(true);
 8003d72:	61c7      	str	r7, [r0, #28]
 8003d74:	69c7      	ldr	r7, [r0, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8003d76:	f8d5 7200 	ldr.w	r7, [r5, #512]	; 0x200

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003d7a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8003d7e:	ea07 0709 	and.w	r7, r7, r9
 8003d82:	ea47 070c 	orr.w	r7, r7, ip
 8003d86:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8003d8a:	f8d5 7200 	ldr.w	r7, [r5, #512]	; 0x200
 8003d8e:	ea07 0709 	and.w	r7, r7, r9
 8003d92:	f447 6760 	orr.w	r7, r7, #3584	; 0xe00
 8003d96:	ea47 070c 	orr.w	r7, r7, ip
 8003d9a:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
 8003d9e:	f8c5 1240 	str.w	r1, [r5, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 8003da2:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
    canp->can->FM1R = 0;
 8003da6:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
    canp->can->FFA1R = 0;
 8003daa:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    canp->can->FS1R = 1;
 8003dae:	f8c5 c20c 	str.w	ip, [r5, #524]	; 0x20c
    canp->can->FA1R = 1;
 8003db2:	f8c5 c21c 	str.w	ip, [r5, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8003db6:	f8d5 9200 	ldr.w	r9, [r5, #512]	; 0x200
  tmp->cumulative = (rttime_t)0;
 8003dba:	2704      	movs	r7, #4
 8003dbc:	f029 0901 	bic.w	r9, r9, #1
 8003dc0:	f8c5 9200 	str.w	r9, [r5, #512]	; 0x200
    rccDisableCAN1();
 8003dc4:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8003dc8:	4d74      	ldr	r5, [pc, #464]	; (8003f9c <main+0x42c>)
 8003dca:	f029 7900 	bic.w	r9, r9, #33554432	; 0x2000000
 8003dce:	f8c0 901c 	str.w	r9, [r0, #28]
 8003dd2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 *
 * @init
 */
void eflObjectInit(EFlashDriver *eflp) {

  eflp->vmt = &vmt;
 8003dd6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8003fd8 <main+0x468>
 8003dda:	f844 5b04 	str.w	r5, [r4], #4
 8003dde:	4d70      	ldr	r5, [pc, #448]	; (8003fa0 <main+0x430>)
  iqp->q_top     = bp + size;
 8003de0:	f102 0b64 	add.w	fp, r2, #100	; 0x64
 8003de4:	f8c9 5000 	str.w	r5, [r9]
  EFLD1.flash = FLASH;
 8003de8:	4d6e      	ldr	r5, [pc, #440]	; (8003fa4 <main+0x434>)
 8003dea:	6054      	str	r4, [r2, #4]
 8003dec:	f8c9 500c 	str.w	r5, [r9, #12]
  qp->next = qp;
 8003df0:	f102 050c 	add.w	r5, r2, #12
  qp->prev = qp;
 8003df4:	e9c2 5503 	strd	r5, r5, [r2, #12]
  iqp->q_buffer  = bp;
 8003df8:	f102 0554 	add.w	r5, r2, #84	; 0x54
  iqp->q_wrptr   = bp;
 8003dfc:	e9c2 5508 	strd	r5, r5, [r2, #32]
  iqp->q_buffer  = bp;
 8003e00:	6195      	str	r5, [r2, #24]
  oqp->q_counter = size;
 8003e02:	2510      	movs	r5, #16
  qp->next = qp;
 8003e04:	f102 0430 	add.w	r4, r2, #48	; 0x30
  iqp->q_link    = link;
 8003e08:	e9c2 120a 	strd	r1, r2, [r2, #40]	; 0x28
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003e0c:	f882 c008 	strb.w	ip, [r2, #8]
  iqp->q_counter = 0;
 8003e10:	6151      	str	r1, [r2, #20]
 8003e12:	6314      	str	r4, [r2, #48]	; 0x30
  iqp->q_top     = bp + size;
 8003e14:	f8c2 b01c 	str.w	fp, [r2, #28]
  eflp->state = FLASH_STOP;
 8003e18:	f889 c004 	strb.w	ip, [r9, #4]
  qp->prev = qp;
 8003e1c:	6354      	str	r4, [r2, #52]	; 0x34
  spip->state = SPI_STOP;
 8003e1e:	4c62      	ldr	r4, [pc, #392]	; (8003fa8 <main+0x438>)
  oqp->q_counter = size;
 8003e20:	6395      	str	r5, [r2, #56]	; 0x38
  uartp->state      = UART_STOP;
 8003e22:	4d62      	ldr	r5, [pc, #392]	; (8003fac <main+0x43c>)
 8003e24:	f884 c000 	strb.w	ip, [r4]
 8003e28:	f8a5 c000 	strh.w	ip, [r5]
  uartp->rxstate    = UART_RX_IDLE;
 8003e2c:	70a9      	strb	r1, [r5, #2]
  oqp->q_wrptr   = bp;
 8003e2e:	e9c2 bb11 	strd	fp, fp, [r2, #68]	; 0x44
  oqp->q_buffer  = bp;
 8003e32:	f8c2 b03c 	str.w	fp, [r2, #60]	; 0x3c
  ST_ENABLE_CLOCK();
 8003e36:	f8d0 b01c 	ldr.w	fp, [r0, #28]
  oqp->q_link    = link;
 8003e3a:	6512      	str	r2, [r2, #80]	; 0x50
 8003e3c:	ea4b 0b0c 	orr.w	fp, fp, ip
 8003e40:	f8c0 b01c 	str.w	fp, [r0, #28]
 8003e44:	69c0      	ldr	r0, [r0, #28]
  oqp->q_top     = bp + size;
 8003e46:	f102 0074 	add.w	r0, r2, #116	; 0x74
 8003e4a:	6410      	str	r0, [r2, #64]	; 0x40
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003e4c:	f241 000a 	movw	r0, #4106	; 0x100a
  oqp->q_notify  = onfy;
 8003e50:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003fdc <main+0x46c>
 8003e54:	62a0      	str	r0, [r4, #40]	; 0x28
 8003e56:	f8c2 b04c 	str.w	fp, [r2, #76]	; 0x4c
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8003e5a:	f241 0018 	movw	r0, #4120	; 0x1018
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8003e5e:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003fe0 <main+0x470>
 8003e62:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003e64:	f8c2 b074 	str.w	fp, [r2, #116]	; 0x74
  UARTD1.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8003e68:	2208      	movs	r2, #8
  SPID1.spi       = SPI1;
 8003e6a:	4851      	ldr	r0, [pc, #324]	; (8003fb0 <main+0x440>)
  ST_ENABLE_STOP();
 8003e6c:	f8df b174 	ldr.w	fp, [pc, #372]	; 8003fe4 <main+0x474>
 8003e70:	60ea      	str	r2, [r5, #12]
  UARTD1.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8003e72:	612a      	str	r2, [r5, #16]
 8003e74:	61e0      	str	r0, [r4, #28]
  UARTD1.usart   = USART1;
 8003e76:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003e7a:	60a8      	str	r0, [r5, #8]
 8003e7c:	f8db 0004 	ldr.w	r0, [fp, #4]
  qp->next = qp;
 8003e80:	f104 020c 	add.w	r2, r4, #12
 8003e84:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  spip->thread = NULL;
 8003e88:	e9c4 1101 	strd	r1, r1, [r4, #4]
  SPID1.dmatx     = NULL;
 8003e8c:	e9c4 1108 	strd	r1, r1, [r4, #32]
  UARTD1.dmatx   = NULL;
 8003e90:	e9c5 1105 	strd	r1, r1, [r5, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8003e94:	6161      	str	r1, [r4, #20]
  uartp->config     = NULL;
 8003e96:	6069      	str	r1, [r5, #4]
 8003e98:	f8cb 0004 	str.w	r0, [fp, #4]
  qp->prev = qp;
 8003e9c:	e9c4 2203 	strd	r2, r2, [r4, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003ea0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8003ea4:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003eac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003eb0:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
  pqp->next = pqp;
 8003eb4:	4a3f      	ldr	r2, [pc, #252]	; (8003fb4 <main+0x444>)
  STM32_ST_TIM->CCMR1  = 0;
 8003eb6:	f8c8 1018 	str.w	r1, [r8, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003eba:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8003ebe:	f8c8 100c 	str.w	r1, [r8, #12]
  STM32_ST_TIM->CR2    = 0;
 8003ec2:	f8c8 1004 	str.w	r1, [r8, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003ec6:	f8c8 c014 	str.w	ip, [r8, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003eca:	f8c8 c000 	str.w	ip, [r8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003ece:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8003fe8 <main+0x478>
 8003ed2:	f8df c118 	ldr.w	ip, [pc, #280]	; 8003fec <main+0x47c>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003ed6:	f883 a31c 	strb.w	sl, [r3, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003eda:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  pqp->prev = pqp;
 8003ede:	6052      	str	r2, [r2, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003ee0:	6018      	str	r0, [r3, #0]
  qp->next = qp;
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <main+0x448>)
 8003ee4:	f8c8 c000 	str.w	ip, [r8]
 8003ee8:	f108 0c0c 	add.w	ip, r8, #12
  qp->prev = qp;
 8003eec:	e9c8 cc03 	strd	ip, ip, [r8, #12]
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8003ef0:	f103 0c10 	add.w	ip, r3, #16
 8003ef4:	e9c3 c104 	strd	ip, r1, [r3, #16]
  dlhp->next  = dlhp;
 8003ef8:	f102 0c1c 	add.w	ip, r2, #28
  ch_memcore.basemem = __heap_base__;
 8003efc:	482f      	ldr	r0, [pc, #188]	; (8003fbc <main+0x44c>)
  dlhp->prev  = dlhp;
 8003efe:	e9c2 cc07 	strd	ip, ip, [r2, #28]
 8003f02:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003ff0 <main+0x480>
 8003f06:	f04f 0a00 	mov.w	sl, #0
 8003f0a:	f8c0 c000 	str.w	ip, [r0]
  ch_memcore.topmem  = __heap_end__;
 8003f0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003ff4 <main+0x484>
 8003f12:	f04f 0b00 	mov.w	fp, #0
 8003f16:	f8c0 c004 	str.w	ip, [r0, #4]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8003f1a:	2014      	movs	r0, #20
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8003f1c:	e9c8 1101 	strd	r1, r1, [r8, #4]
 8003f20:	f8c8 1014 	str.w	r1, [r8, #20]
  pqp->prio = (tprio_t)0;
 8003f24:	6091      	str	r1, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 8003f26:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 8003f2a:	8511      	strh	r1, [r2, #40]	; 0x28
 8003f2c:	6099      	str	r1, [r3, #8]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003f2e:	e9c2 2204 	strd	r2, r2, [r2, #16]
  qp->prev = qp;
 8003f32:	e9c3 3300 	strd	r3, r3, [r3]
  pqp->next = pqp;
 8003f36:	6012      	str	r2, [r2, #0]
 8003f38:	6198      	str	r0, [r3, #24]
  tmp->last       = (rtcnt_t)0;
 8003f3a:	e9cd 1101 	strd	r1, r1, [sp, #4]
  mp->next = NULL;
 8003f3e:	62d9      	str	r1, [r3, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 8003f40:	6751      	str	r1, [r2, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 8003f42:	9103      	str	r1, [sp, #12]
  mp->object_size = size;
 8003f44:	211c      	movs	r1, #28
 8003f46:	f103 0824 	add.w	r8, r3, #36	; 0x24
 8003f4a:	f103 0c3c 	add.w	ip, r3, #60	; 0x3c
 8003f4e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 8003f52:	f103 0840 	add.w	r8, r3, #64	; 0x40
  mp->align = align;
  mp->provider = provider;
 8003f56:	481a      	ldr	r0, [pc, #104]	; (8003fc0 <main+0x450>)
  tmp->best       = (rtcnt_t)-1;
 8003f58:	f8cd e000 	str.w	lr, [sp]
  tmp->cumulative = (rttime_t)0;
 8003f5c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003f60:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8003f64:	e9c3 c80f 	strd	ip, r8, [r3, #60]	; 0x3c
 8003f68:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 8003f6c:	f103 0e44 	add.w	lr, r3, #68	; 0x44
  mp->object_size = size;
 8003f70:	6319      	str	r1, [r3, #48]	; 0x30
 8003f72:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
  mp->align = align;
 8003f76:	61df      	str	r7, [r3, #28]
 8003f78:	635f      	str	r7, [r3, #52]	; 0x34
  mp->provider = provider;
 8003f7a:	6218      	str	r0, [r3, #32]
 8003f7c:	6398      	str	r0, [r3, #56]	; 0x38
 8003f7e:	e03b      	b.n	8003ff8 <main+0x488>
 8003f80:	40020000 	.word	0x40020000
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	200007d0 	.word	0x200007d0
 8003f8c:	40010800 	.word	0x40010800
 8003f90:	40011000 	.word	0x40011000
 8003f94:	20000790 	.word	0x20000790
 8003f98:	40006400 	.word	0x40006400
 8003f9c:	08005464 	.word	0x08005464
 8003fa0:	08005444 	.word	0x08005444
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	2000084c 	.word	0x2000084c
 8003fac:	2000087c 	.word	0x2000087c
 8003fb0:	40013000 	.word	0x40013000
 8003fb4:	200010d0 	.word	0x200010d0
 8003fb8:	20001148 	.word	0x20001148
 8003fbc:	20001268 	.word	0x20001268
 8003fc0:	080010f1 	.word	0x080010f1
 8003fc4:	88844888 	.word	0x88844888
 8003fc8:	40010c00 	.word	0x40010c00
 8003fcc:	44848888 	.word	0x44848888
 8003fd0:	88888844 	.word	0x88888844
 8003fd4:	ffff0000 	.word	0xffff0000
 8003fd8:	200007c0 	.word	0x200007c0
 8003fdc:	08001031 	.word	0x08001031
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	e0042000 	.word	0xe0042000
 8003fe8:	200012c0 	.word	0x200012c0
 8003fec:	08000ff1 	.word	0x08000ff1
 8003ff0:	20001320 	.word	0x20001320
 8003ff4:	20005000 	.word	0x20005000
    chTMStartMeasurementX(&tm);
 8003ff8:	4668      	mov	r0, sp
 8003ffa:	f7fd f8b9 	bl	8001170 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8003ffe:	4668      	mov	r0, sp
 8004000:	f7fd f88e 	bl	8001120 <chTMStopMeasurementX>
  } while (i > 0U);
 8004004:	3f01      	subs	r7, #1
 8004006:	4ac4      	ldr	r2, [pc, #784]	; (8004318 <main+0x7a8>)
 8004008:	d1f6      	bne.n	8003ff8 <main+0x488>
  tp->hdr.pqueue.prio = prio;
 800400a:	2080      	movs	r0, #128	; 0x80
  tp->refs            = (trefs_t)1;
 800400c:	f04f 0801 	mov.w	r8, #1
  REG_INSERT(tp);
 8004010:	f8d2 e014 	ldr.w	lr, [r2, #20]
  tp->hdr.pqueue.prio = prio;
 8004014:	6390      	str	r0, [r2, #56]	; 0x38
  tp->realprio        = prio;
 8004016:	66d0      	str	r0, [r2, #108]	; 0x6c
  tp->name            = name;
 8004018:	f8df a378 	ldr.w	sl, [pc, #888]	; 8004394 <main+0x824>
  ch.tm.offset = tm.best;
 800401c:	9800      	ldr	r0, [sp, #0]
  REG_INSERT(tp);
 800401e:	f102 0330 	add.w	r3, r2, #48	; 0x30
  qp->next = qp;
 8004022:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  lp->next = lp;
 8004026:	f102 0b58 	add.w	fp, r2, #88	; 0x58
 800402a:	e9c2 ea11 	strd	lr, sl, [r2, #68]	; 0x44
  tp->epending        = (eventmask_t)0;
 800402e:	e9c2 7719 	strd	r7, r7, [r2, #100]	; 0x64
  tp->flags           = CH_FLAG_MODE_STATIC;
 8004032:	f882 7051 	strb.w	r7, [r2, #81]	; 0x51
  REG_INSERT(tp);
 8004036:	6412      	str	r2, [r2, #64]	; 0x40
  tp->refs            = (trefs_t)1;
 8004038:	f882 8052 	strb.w	r8, [r2, #82]	; 0x52
 800403c:	6750      	str	r0, [r2, #116]	; 0x74
 800403e:	f04f 0a20 	mov.w	sl, #32
  REG_INSERT(tp);
 8004042:	f8ce 3010 	str.w	r3, [lr, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004046:	e9c2 3305 	strd	r3, r3, [r2, #20]
  qp->next = qp;
 800404a:	e9c2 b116 	strd	fp, r1, [r2, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 800404e:	f882 8050 	strb.w	r8, [r2, #80]	; 0x50
  currp->wabase = NULL;
 8004052:	64d7      	str	r7, [r2, #76]	; 0x4c
  qp->prev = qp;
 8004054:	6611      	str	r1, [r2, #96]	; 0x60
 8004056:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 800405a:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405c:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	f04f 0b10 	mov.w	fp, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004064:	4bad      	ldr	r3, [pc, #692]	; (800431c <main+0x7ac>)
  reg_value  =  (reg_value                                   |
 8004066:	48ae      	ldr	r0, [pc, #696]	; (8004320 <main+0x7b0>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	68d9      	ldr	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800406a:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8004398 <main+0x828>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406e:	ea01 010e 	and.w	r1, r1, lr
  reg_value  =  (reg_value                                   |
 8004072:	4308      	orrs	r0, r1
  SCB->AIRCR =  reg_value;
 8004074:	60d8      	str	r0, [r3, #12]
 8004076:	f8dc 100c 	ldr.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800407a:	48aa      	ldr	r0, [pc, #680]	; (8004324 <main+0x7b4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800407c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004080:	f8cc 100c 	str.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004084:	6801      	ldr	r1, [r0, #0]
 8004086:	ea41 0108 	orr.w	r1, r1, r8
 800408a:	6001      	str	r1, [r0, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	f883 b01f 	strb.w	fp, [r3, #31]
 8004090:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004094:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8004098:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800409a:	f38a 8811 	msr	BASEPRI, sl
  tp->state           = CH_STATE_WTSTART;
 800409e:	2302      	movs	r3, #2
  tp->wabase = tdp->wbase;
 80040a0:	49a1      	ldr	r1, [pc, #644]	; (8004328 <main+0x7b8>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80040a2:	f8df e2f8 	ldr.w	lr, [pc, #760]	; 800439c <main+0x82c>
 80040a6:	f101 006c 	add.w	r0, r1, #108	; 0x6c
 80040aa:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
 80040ae:	489f      	ldr	r0, [pc, #636]	; (800432c <main+0x7bc>)
  REG_INSERT(tp);
 80040b0:	f8d2 c014 	ldr.w	ip, [r2, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80040b4:	f8c1 e06c 	str.w	lr, [r1, #108]	; 0x6c
  tp->name            = name;
 80040b8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 80043a0 <main+0x830>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80040bc:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
  REG_INSERT(tp);
 80040c0:	f101 0090 	add.w	r0, r1, #144	; 0x90
 80040c4:	f8c1 c0a4 	str.w	ip, [r1, #164]	; 0xa4
 80040c8:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
  tp->mtxlist         = NULL;
 80040cc:	e9c1 7832 	strd	r7, r8, [r1, #200]	; 0xc8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80040d0:	670f      	str	r7, [r1, #112]	; 0x70
  tp->hdr.pqueue.prio = prio;
 80040d2:	f8c1 8098 	str.w	r8, [r1, #152]	; 0x98
  tp->epending        = (eventmask_t)0;
 80040d6:	f8c1 70c4 	str.w	r7, [r1, #196]	; 0xc4
  tp->refs            = (trefs_t)1;
 80040da:	f881 80b2 	strb.w	r8, [r1, #178]	; 0xb2
  tp->wabase = tdp->wbase;
 80040de:	f8c1 10ac 	str.w	r1, [r1, #172]	; 0xac
  tp->name            = name;
 80040e2:	f8c1 e0a8 	str.w	lr, [r1, #168]	; 0xa8
  tp->state           = CH_STATE_WTSTART;
 80040e6:	f8a1 30b0 	strh.w	r3, [r1, #176]	; 0xb0
  REG_INSERT(tp);
 80040ea:	f8cc 0010 	str.w	r0, [ip, #16]
  lp->next = lp;
 80040ee:	f101 0cb8 	add.w	ip, r1, #184	; 0xb8
 80040f2:	6150      	str	r0, [r2, #20]
  qp->next = qp;
 80040f4:	f101 02bc 	add.w	r2, r1, #188	; 0xbc
 80040f8:	e9c1 c22e 	strd	ip, r2, [r1, #184]	; 0xb8
  qp->prev = qp;
 80040fc:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
  chSchWakeupS(tp, MSG_OK);
 8004100:	f7fd fba6 	bl	8001850 <chSchWakeupS.constprop.0>
 8004104:	f387 8811 	msr	BASEPRI, r7
    palSetPadMode(GPIOA, 9, PAL_MODE_STM32_ALTERNATE_PUSHPULL );
 8004108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800410c:	465a      	mov	r2, fp
 800410e:	4888      	ldr	r0, [pc, #544]	; (8004330 <main+0x7c0>)
 8004110:	f7fd f9ae 	bl	8001470 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10, PAL_MODE_INPUT_PULLUP );
 8004114:	2203      	movs	r2, #3
 8004116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800411a:	4885      	ldr	r0, [pc, #532]	; (8004330 <main+0x7c0>)
 800411c:	f7fd f9a8 	bl	8001470 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,12, PAL_MODE_STM32_ALTERNATE_PUSHPULL );
 8004120:	465a      	mov	r2, fp
 8004122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004126:	4882      	ldr	r0, [pc, #520]	; (8004330 <main+0x7c0>)
 8004128:	f7fd f9a2 	bl	8001470 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,11, PAL_MODE_INPUT_PULLUP );
 800412c:	2203      	movs	r2, #3
 800412e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004132:	487f      	ldr	r0, [pc, #508]	; (8004330 <main+0x7c0>)
 8004134:	f7fd f99c 	bl	8001470 <_pal_lld_setgroupmode>
 8004138:	f38a 8811 	msr	BASEPRI, sl

  osalDbgAssert((eflp->state == FLASH_STOP) || (eflp->state == FLASH_READY),
                "invalid state");
  eflp->config = config;
  efl_lld_start(eflp);
  eflp->state = FLASH_READY;
 800413c:	2302      	movs	r3, #2
  stm32_flash_unlock(eflp);
 800413e:	f8d9 200c 	ldr.w	r2, [r9, #12]
  eflp->flash->KEYR |= FLASH_KEY1;
 8004142:	497c      	ldr	r1, [pc, #496]	; (8004334 <main+0x7c4>)
 8004144:	6850      	ldr	r0, [r2, #4]
  eflp->config = config;
 8004146:	f8c9 7008 	str.w	r7, [r9, #8]
 800414a:	4301      	orrs	r1, r0
 800414c:	6051      	str	r1, [r2, #4]
  eflp->flash->KEYR |= FLASH_KEY2;
 800414e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8004152:	4979      	ldr	r1, [pc, #484]	; (8004338 <main+0x7c8>)
  FLASH->CR = 0x00000000U;
 8004154:	4879      	ldr	r0, [pc, #484]	; (800433c <main+0x7cc>)
  eflp->flash->KEYR |= FLASH_KEY2;
 8004156:	ea4c 0101 	orr.w	r1, ip, r1
 800415a:	6051      	str	r1, [r2, #4]
  eflp->state = FLASH_READY;
 800415c:	f889 3004 	strb.w	r3, [r9, #4]
  FLASH->CR = 0x00000000U;
 8004160:	6107      	str	r7, [r0, #16]
 8004162:	f387 8811 	msr	BASEPRI, r7
  mfsp->state = MFS_STOP;
 8004166:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80043a4 <main+0x834>
    int flashSize = (*(uint16_t*)FLASH_SIZE_IN_K_ADDRESS);
 800416a:	4b75      	ldr	r3, [pc, #468]	; (8004340 <main+0x7d0>)
 800416c:	f889 8000 	strb.w	r8, [r9]
  if (flashSize > 128) {
 8004170:	881b      	ldrh	r3, [r3, #0]
    mfsp->descriptors[i].offset = 0U;
 8004172:	463a      	mov	r2, r7
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	464b      	mov	r3, r9
 8004178:	f240 8220 	bls.w	80045bc <main+0xa4c>
  mfsp->config = config;
 800417c:	4971      	ldr	r1, [pc, #452]	; (8004344 <main+0x7d4>)
  mfsp->next_offset     = 0U;
 800417e:	e9c9 7703 	strd	r7, r7, [r9, #12]
  mfsp->config = config;
 8004182:	f8c9 1004 	str.w	r1, [r9, #4]
  mfsp->current_bank    = MFS_BANK_0;
 8004186:	f889 7008 	strb.w	r7, [r9, #8]
  mfsp->used_space      = 0U;
 800418a:	f8c9 7014 	str.w	r7, [r9, #20]
 800418e:	f509 7180 	add.w	r1, r9, #256	; 0x100
    mfsp->descriptors[i].size   = 0U;
 8004192:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8004196:	3308      	adds	r3, #8
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 8004198:	4299      	cmp	r1, r3
 800419a:	d1fa      	bne.n	8004192 <main+0x622>
 800419c:	f7fd ff00 	bl	8001fa0 <mfs_mount.part.0.constprop.0>
  if ((mfsp->state != MFS_READY) && (mfsp->state != MFS_TRANSACTION)) {
 80041a0:	f899 2000 	ldrb.w	r2, [r9]
    flashState = InitFlash();
 80041a4:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80043a8 <main+0x838>
 80041a8:	3a02      	subs	r2, #2
 80041aa:	2a01      	cmp	r2, #1
 80041ac:	f888 0000 	strb.w	r0, [r8]
 80041b0:	f200 8293 	bhi.w	80046da <main+0xb6a>
  if (mfsp->descriptors[id - 1U].offset == 0U) {
 80041b4:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80041b8:	2900      	cmp	r1, #0
 80041ba:	f000 82a0 	beq.w	80046fe <main+0xb8e>
  if (*np < mfsp->descriptors[id - 1U].size) {
 80041be:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80041c2:	2b3c      	cmp	r3, #60	; 0x3c
 80041c4:	f200 8296 	bhi.w	80046f4 <main+0xb84>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 80041c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	4b5e      	ldr	r3, [pc, #376]	; (8004348 <main+0x7d8>)
 80041d0:	6802      	ldr	r2, [r0, #0]
 80041d2:	6897      	ldr	r7, [r2, #8]
 80041d4:	2210      	movs	r2, #16
 80041d6:	47b8      	blx	r7
  if (ferr != FLASH_NO_ERROR) {
 80041d8:	2800      	cmp	r0, #0
 80041da:	f040 8283 	bne.w	80046e4 <main+0xb74>
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 80041de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  *np = mfsp->descriptors[id - 1U].size;
 80041e2:	f8d9 b01c 	ldr.w	fp, [r9, #28]
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4f58      	ldr	r7, [pc, #352]	; (800434c <main+0x7dc>)
 80041ea:	6803      	ldr	r3, [r0, #0]
  RET_ON_ERROR(mfs_flash_read(mfsp,
 80041ec:	f8d9 1018 	ldr.w	r1, [r9, #24]
  ferr = flashRead(mfsp->config->flashp, offset, n, rp);
 80041f0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 80041f4:	465a      	mov	r2, fp
 80041f6:	463b      	mov	r3, r7
 80041f8:	3110      	adds	r1, #16
 80041fa:	47d0      	blx	sl
  if (ferr != FLASH_NO_ERROR) {
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f040 8265 	bne.w	80046cc <main+0xb5c>
  while (n > 0U) {
 8004202:	f1bb 0f00 	cmp.w	fp, #0
 8004206:	f000 8257 	beq.w	80046b8 <main+0xb48>
 800420a:	4639      	mov	r1, r7
 800420c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004210:	f8df c198 	ldr.w	ip, [pc, #408]	; 80043ac <main+0x83c>
 8004214:	eb07 000b 	add.w	r0, r7, fp
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8004218:	f811 2b01 	ldrb.w	r2, [r1], #1
 800421c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8004220:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
  while (n > 0U) {
 8004224:	4288      	cmp	r0, r1
    crc = (crc << 8U) ^ crc16_table[(crc >> 8U) ^ (uint16_t)*data];
 8004226:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 800422a:	b29b      	uxth	r3, r3
  while (n > 0U) {
 800422c:	d1f4      	bne.n	8004218 <main+0x6a8>
  if (crc != mfsp->buffer.dhdr.fields.crc) {
 800422e:	f8b9 21ee 	ldrh.w	r2, [r9, #494]	; 0x1ee
 8004232:	429a      	cmp	r2, r3
 8004234:	f040 824a 	bne.w	80046cc <main+0xb5c>
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 8004238:	2300      	movs	r3, #0
    if (!isMfsOkIsh(flashState) || size != GetConfigurationSize() || !configuration.IsValid()) {
 800423a:	f1bb 0f3c 	cmp.w	fp, #60	; 0x3c
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 800423e:	f888 3000 	strb.w	r3, [r8]
    if (!isMfsOkIsh(flashState) || size != GetConfigurationSize() || !configuration.IsValid()) {
 8004242:	f000 8234 	beq.w	80046ae <main+0xb3e>
    inputCanID = GDI4_BASE_ADDRESS + 0x10;
 8004246:	f64b 3330 	movw	r3, #47920	; 0xbb30
    outputCanID = GDI4_BASE_ADDRESS;
 800424a:	f64b 3220 	movw	r2, #47904	; 0xbb20
    version = PERSISTENCE_VERSION;
 800424e:	f04f 0e07 	mov.w	lr, #7
    updateCounter = 20;
 8004252:	f04f 0c14 	mov.w	ip, #20
	BoostVoltage = 65;
 8004256:	2041      	movs	r0, #65	; 0x41
	Tbypass = 10;
 8004258:	210a      	movs	r1, #10
    inputCanID = GDI4_BASE_ADDRESS + 0x10;
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
	BoostCurrent = 13;
 800425c:	4b3c      	ldr	r3, [pc, #240]	; (8004350 <main+0x7e0>)
    outputCanID = GDI4_BASE_ADDRESS;
 800425e:	63ba      	str	r2, [r7, #56]	; 0x38
	BoostCurrent = 13;
 8004260:	60fb      	str	r3, [r7, #12]
	TBoostMin = 100;
 8004262:	4a3c      	ldr	r2, [pc, #240]	; (8004354 <main+0x7e4>)
	PeakCurrent = 9.4f;
 8004264:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <main+0x7e8>)
	TBoostMin = 100;
 8004266:	613a      	str	r2, [r7, #16]
	PeakCurrent = 9.4f;
 8004268:	617b      	str	r3, [r7, #20]
	TpeakDuration = 700; // 700us = 0.7ms
 800426a:	4a3c      	ldr	r2, [pc, #240]	; (800435c <main+0x7ec>)
	HoldCurrent = 3.7f;
 800426c:	4b3c      	ldr	r3, [pc, #240]	; (8004360 <main+0x7f0>)
	TpeakDuration = 700; // 700us = 0.7ms
 800426e:	61ba      	str	r2, [r7, #24]
	HoldCurrent = 3.7f;
 8004270:	623b      	str	r3, [r7, #32]
	TholdOff = 60;
 8004272:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <main+0x7f4>)
    PumpPeakCurrent = 5;
 8004274:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <main+0x7f8>)
	TholdOff = 60;
 8004276:	627a      	str	r2, [r7, #36]	; 0x24
    PumpPeakCurrent = 5;
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
    PumpHoldCurrent = 3;
 800427a:	4a3c      	ldr	r2, [pc, #240]	; (800436c <main+0x7fc>)
	PumpTholdOff = 10;
 800427c:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <main+0x800>)
    updateCounter = 20;
 800427e:	e9c7 ec00 	strd	lr, ip, [r7]
	BoostVoltage = 65;
 8004282:	8138      	strh	r0, [r7, #8]
	Tbypass = 10;
 8004284:	83b9      	strh	r1, [r7, #28]
    PumpHoldCurrent = 3;
 8004286:	62fa      	str	r2, [r7, #44]	; 0x2c
	PumpTholdOff = 10;
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
 800428a:	2320      	movs	r3, #32
 800428c:	f383 8811 	msr	BASEPRI, r3
  canp->state = CAN_STARTING;
 8004290:	2302      	movs	r3, #2
  canp->can->MCR = CAN_MCR_INRQ;
 8004292:	2101      	movs	r1, #1
    rccEnableCAN1(true);
 8004294:	4a37      	ldr	r2, [pc, #220]	; (8004374 <main+0x804>)
 8004296:	7033      	strb	r3, [r6, #0]
 8004298:	69d3      	ldr	r3, [r2, #28]
  canp->config = config;
 800429a:	4837      	ldr	r0, [pc, #220]	; (8004378 <main+0x808>)
 800429c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042a0:	61d3      	str	r3, [r2, #28]
  canp->can->MCR = CAN_MCR_INRQ;
 80042a2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    rccEnableCAN1(true);
 80042a4:	69d2      	ldr	r2, [r2, #28]
 80042a6:	6070      	str	r0, [r6, #4]
  canp->can->MCR = CAN_MCR_INRQ;
 80042a8:	6019      	str	r1, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	07d0      	lsls	r0, r2, #31
 80042ae:	d407      	bmi.n	80042c0 <main+0x750>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80042b0:	2101      	movs	r1, #1
 80042b2:	2008      	movs	r0, #8
 80042b4:	f7fd fb54 	bl	8001960 <chSchGoSleepTimeoutS>
 80042b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	07d1      	lsls	r1, r2, #31
 80042be:	d5f7      	bpl.n	80042b0 <main+0x740>
  canp->state = CAN_READY;
 80042c0:	2704      	movs	r7, #4
  canp->can->BTR = canp->config->btr;
 80042c2:	6872      	ldr	r2, [r6, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80042c4:	492d      	ldr	r1, [pc, #180]	; (800437c <main+0x80c>)
  canp->can->BTR = canp->config->btr;
 80042c6:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 80042c8:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 80042ca:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 80042cc:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80042ce:	6159      	str	r1, [r3, #20]
 80042d0:	7037      	strb	r7, [r6, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	f383 8811 	msr	BASEPRI, r3
void InitCan()
{
    canStart(&CAND1, &canConfig500);

    // CAN TX
    palSetPadMode(CAN_GPIO_PORT,CAN_TX_PIN, PAL_MODE_STM32_ALTERNATE_PUSHPULL );
 80042d8:	2210      	movs	r2, #16
 80042da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042de:	4814      	ldr	r0, [pc, #80]	; (8004330 <main+0x7c0>)
 80042e0:	f7fd f8c6 	bl	8001470 <_pal_lld_setgroupmode>
    // CAN RX
    palSetPadMode(CAN_GPIO_PORT,CAN_RX_PIN, PAL_MODE_INPUT_PULLUP );
 80042e4:	2203      	movs	r2, #3
 80042e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042ea:	4811      	ldr	r0, [pc, #68]	; (8004330 <main+0x7c0>)
 80042ec:	f7fd f8c0 	bl	8001470 <_pal_lld_setgroupmode>

    chThdCreateStatic(waCanTxThread, sizeof(waCanTxThread), NORMALPRIO, CanTxThread, nullptr);
 80042f0:	2180      	movs	r1, #128	; 0x80
 80042f2:	4a23      	ldr	r2, [pc, #140]	; (8004380 <main+0x810>)
 80042f4:	4823      	ldr	r0, [pc, #140]	; (8004384 <main+0x814>)
 80042f6:	f7fd fadb 	bl	80018b0 <chThdCreateStatic.constprop.0>
    chThdCreateStatic(waCanRxThread, sizeof(waCanRxThread), NORMALPRIO - 4, CanRxThread, nullptr);
 80042fa:	217c      	movs	r1, #124	; 0x7c
 80042fc:	4a22      	ldr	r2, [pc, #136]	; (8004388 <main+0x818>)
 80042fe:	4823      	ldr	r0, [pc, #140]	; (800438c <main+0x81c>)
 8004300:	f7fd fad6 	bl	80018b0 <chThdCreateStatic.constprop.0>
 8004304:	2620      	movs	r6, #32
 8004306:	f386 8811 	msr	BASEPRI, r6
  if (uartp->state == UART_STOP) {
 800430a:	782b      	ldrb	r3, [r5, #0]
  uartp->config = config;
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <main+0x820>)
 800430e:	2b01      	cmp	r3, #1
 8004310:	606a      	str	r2, [r5, #4]
 8004312:	f000 8196 	beq.w	8004642 <main+0xad2>
 8004316:	e04b      	b.n	80043b0 <main+0x840>
 8004318:	200010d0 	.word	0x200010d0
 800431c:	e000ed00 	.word	0xe000ed00
 8004320:	05fa0300 	.word	0x05fa0300
 8004324:	e0001000 	.word	0xe0001000
 8004328:	20001190 	.word	0x20001190
 800432c:	08000261 	.word	0x08000261
 8004330:	40010800 	.word	0x40010800
 8004334:	45670123 	.word	0x45670123
 8004338:	cdef89ab 	.word	0xcdef89ab
 800433c:	40022000 	.word	0x40022000
 8004340:	1ffff7e0 	.word	0x1ffff7e0
 8004344:	08005084 	.word	0x08005084
 8004348:	200010a4 	.word	0x200010a4
 800434c:	20001284 	.word	0x20001284
 8004350:	41500000 	.word	0x41500000
 8004354:	01900064 	.word	0x01900064
 8004358:	41166666 	.word	0x41166666
 800435c:	000a02bc 	.word	0x000a02bc
 8004360:	406ccccd 	.word	0x406ccccd
 8004364:	2710003c 	.word	0x2710003c
 8004368:	40a00000 	.word	0x40a00000
 800436c:	40400000 	.word	0x40400000
 8004370:	2710000a 	.word	0x2710000a
 8004374:	40021000 	.word	0x40021000
 8004378:	08005024 	.word	0x08005024
 800437c:	0001875b 	.word	0x0001875b
 8004380:	08003671 	.word	0x08003671
 8004384:	20000cf8 	.word	0x20000cf8
 8004388:	080030a1 	.word	0x080030a1
 800438c:	20000b30 	.word	0x20000b30
 8004390:	08005040 	.word	0x08005040
 8004394:	08005190 	.word	0x08005190
 8004398:	e000edf0 	.word	0xe000edf0
 800439c:	08001281 	.word	0x08001281
 80043a0:	08004fcc 	.word	0x08004fcc
 80043a4:	20000ec0 	.word	0x20000ec0
 80043a8:	2000131e 	.word	0x2000131e
 80043ac:	080051a8 	.word	0x080051a8
  uartp->rxstate = UART_RX_IDLE;
 80043b0:	2700      	movs	r7, #0
  dmaStreamDisable(uartp->dmarx);
 80043b2:	220e      	movs	r2, #14
 80043b4:	696e      	ldr	r6, [r5, #20]
  uartp->rxstate = UART_RX_IDLE;
 80043b6:	70af      	strb	r7, [r5, #2]
  dmaStreamDisable(uartp->dmarx);
 80043b8:	6871      	ldr	r1, [r6, #4]
  uartp->txstate = UART_TX_IDLE;
 80043ba:	706f      	strb	r7, [r5, #1]
  dmaStreamDisable(uartp->dmarx);
 80043bc:	6808      	ldr	r0, [r1, #0]
  USART_TypeDef *u = uartp->usart;
 80043be:	68ab      	ldr	r3, [r5, #8]
  dmaStreamDisable(uartp->dmarx);
 80043c0:	f020 000f 	bic.w	r0, r0, #15
 80043c4:	6008      	str	r0, [r1, #0]
  dmaStreamDisable(uartp->dmatx);
 80043c6:	f8d5 c018 	ldr.w	ip, [r5, #24]
  dmaStreamDisable(uartp->dmarx);
 80043ca:	7b70      	ldrb	r0, [r6, #13]
 80043cc:	f8d6 e000 	ldr.w	lr, [r6]
 80043d0:	fa02 f000 	lsl.w	r0, r2, r0
  dmaStreamDisable(uartp->dmatx);
 80043d4:	f8dc 6004 	ldr.w	r6, [ip, #4]
  dmaStreamDisable(uartp->dmarx);
 80043d8:	f8ce 0004 	str.w	r0, [lr, #4]
  dmaStreamDisable(uartp->dmatx);
 80043dc:	6830      	ldr	r0, [r6, #0]
 80043de:	f8dc e000 	ldr.w	lr, [ip]
 80043e2:	f020 000f 	bic.w	r0, r0, #15
 80043e6:	6030      	str	r0, [r6, #0]
 80043e8:	f89c 600d 	ldrb.w	r6, [ip, #13]
    cr1 |= USART_CR1_IDLEIE;
 80043ec:	f242 1c1c 	movw	ip, #8476	; 0x211c
  dmaStreamDisable(uartp->dmatx);
 80043f0:	40b2      	lsls	r2, r6
 80043f2:	f8ce 2004 	str.w	r2, [lr, #4]
    cr1 |= USART_CR1_IDLEIE;
 80043f6:	f242 1e0c 	movw	lr, #8460	; 0x210c
    fck = STM32_PCLK2 / uartp->config->speed;
 80043fa:	686a      	ldr	r2, [r5, #4]
  uartp->usart->CR1 = 0;
 80043fc:	60df      	str	r7, [r3, #12]
  uartp->usart->CR2 = 0;
 80043fe:	611f      	str	r7, [r3, #16]
  uartp->usart->CR3 = 0;
 8004400:	615f      	str	r7, [r3, #20]
    fck = STM32_PCLK2 / uartp->config->speed;
 8004402:	6990      	ldr	r0, [r2, #24]
 8004404:	4ec0      	ldr	r6, [pc, #768]	; (8004708 <main+0xb98>)
  if (uartp->config->rxchar_cb == NULL)
 8004406:	68d7      	ldr	r7, [r2, #12]
    fck = STM32_PCLK2 / uartp->config->speed;
 8004408:	fbb6 f0f0 	udiv	r0, r6, r0
  if (uartp->config->timeout_cb != NULL)
 800440c:	6956      	ldr	r6, [r2, #20]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800440e:	f04f 0801 	mov.w	r8, #1
    cr1 |= USART_CR1_IDLEIE;
 8004412:	2e00      	cmp	r6, #0
 8004414:	bf0c      	ite	eq
 8004416:	4676      	moveq	r6, lr
 8004418:	4666      	movne	r6, ip
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 800441a:	2f00      	cmp	r7, #0
 800441c:	bf0c      	ite	eq
 800441e:	f04f 0e20 	moveq.w	lr, #32
 8004422:	f04f 0e22 	movne.w	lr, #34	; 0x22
  u->SR = 0;
 8004426:	f04f 0c00 	mov.w	ip, #0
  uartp->state = UART_READY;
 800442a:	2702      	movs	r7, #2
  u->BRR = fck;
 800442c:	6098      	str	r0, [r3, #8]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800442e:	f8b2 901e 	ldrh.w	r9, [r2, #30]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8004432:	8c10      	ldrh	r0, [r2, #32]
  u->CR1 = uartp->config->cr1 | cr1;
 8004434:	f8b2 a01c 	ldrh.w	sl, [r2, #28]
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8004438:	68ea      	ldr	r2, [r5, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800443a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800443e:	f040 00c1 	orr.w	r0, r0, #193	; 0xc1
  u->CR1 = uartp->config->cr1 | cr1;
 8004442:	ea46 060a 	orr.w	r6, r6, sl
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8004446:	ea4e 0202 	orr.w	r2, lr, r2
  (void)u->SR;  /* SR reset step 1.*/
 800444a:	f8d3 a000 	ldr.w	sl, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 800444e:	f8d3 e004 	ldr.w	lr, [r3, #4]
  u->SR = 0;
 8004452:	f8c3 c000 	str.w	ip, [r3]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004456:	f8c3 9010 	str.w	r9, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800445a:	6158      	str	r0, [r3, #20]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800445c:	48ab      	ldr	r0, [pc, #684]	; (800470c <main+0xb9c>)
  u->CR1 = uartp->config->cr1 | cr1;
 800445e:	60de      	str	r6, [r3, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8004460:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004462:	f8c1 8004 	str.w	r8, [r1, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8004466:	600a      	str	r2, [r1, #0]
  dmaStreamEnable(uartp->dmarx);
 8004468:	680b      	ldr	r3, [r1, #0]
 800446a:	ea43 0308 	orr.w	r3, r3, r8
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	702f      	strb	r7, [r5, #0]
 8004472:	f38c 8811 	msr	BASEPRI, ip
	palSetPadMode(LED_BLUE_PORT, LED_BLUE_PIN, PAL_MODE_OUTPUT_PUSHPULL);
 8004476:	4da6      	ldr	r5, [pc, #664]	; (8004710 <main+0xba0>)

void InitUart()
{
    uartStart(&UARTD1, &uartCfg);

    chThdCreateStatic(waUartThread, sizeof(waUartThread), NORMALPRIO, UartThread, nullptr);
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	4aa6      	ldr	r2, [pc, #664]	; (8004714 <main+0xba4>)
 800447c:	48a6      	ldr	r0, [pc, #664]	; (8004718 <main+0xba8>)
 800447e:	f7fd fa17 	bl	80018b0 <chThdCreateStatic.constprop.0>
 8004482:	4628      	mov	r0, r5
 8004484:	2206      	movs	r2, #6
 8004486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800448a:	f7fc fff1 	bl	8001470 <_pal_lld_setgroupmode>
	palClearPad(LED_BLUE_PORT, LED_BLUE_PIN);
 800448e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	palSetPadMode(LED_GREEN_PORT, LED_GREEN_PIN, PAL_MODE_OUTPUT_PUSHPULL);
 8004492:	48a2      	ldr	r0, [pc, #648]	; (800471c <main+0xbac>)
	palClearPad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004494:	616b      	str	r3, [r5, #20]
	palSetPadMode(LED_GREEN_PORT, LED_GREEN_PIN, PAL_MODE_OUTPUT_PUSHPULL);
 8004496:	2206      	movs	r2, #6
 8004498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800449c:	f7fc ffe8 	bl	8001470 <_pal_lld_setgroupmode>
	palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 80044a0:	f44f 7380 	mov.w	r3, #256	; 0x100
	palSetPadMode(GPIOA, 5, PAL_MODE_STM32_ALTERNATE_PUSHPULL);    // sck
 80044a4:	2210      	movs	r2, #16
	palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 80044a6:	6143      	str	r3, [r0, #20]
	palSetPadMode(GPIOA, 5, PAL_MODE_STM32_ALTERNATE_PUSHPULL);    // sck
 80044a8:	2120      	movs	r1, #32
 80044aa:	f7fc ffe1 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT);    // miso
 80044ae:	463a      	mov	r2, r7
 80044b0:	2140      	movs	r1, #64	; 0x40
 80044b2:	f7fc ffdd 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 7, PAL_MODE_STM32_ALTERNATE_PUSHPULL);    // mosi
 80044b6:	2210      	movs	r2, #16
 80044b8:	2180      	movs	r1, #128	; 0x80
 80044ba:	f7fc ffd9 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT);
 80044be:	4628      	mov	r0, r5
 80044c0:	463a      	mov	r2, r7
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fc ffd4 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 2, PAL_MODE_OUTPUT_PUSHPULL);	// chip select
 80044c8:	2206      	movs	r2, #6
 80044ca:	2104      	movs	r1, #4
 80044cc:	f7fc ffd0 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPad(GPIOB, 2);
 80044d0:	f04f 0904 	mov.w	r9, #4
	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 80044d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d8:	4b91      	ldr	r3, [pc, #580]	; (8004720 <main+0xbb0>)
	palSetPad(GPIOB, 2);
 80044da:	f8c5 9010 	str.w	r9, [r5, #16]
	palSetPadMode(GPIOB, 4, PAL_MODE_OUTPUT_PUSHPULL);	// DRVEN
 80044de:	2110      	movs	r1, #16
	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 80044e0:	605a      	str	r2, [r3, #4]
	palSetPadMode(GPIOB, 4, PAL_MODE_OUTPUT_PUSHPULL);	// DRVEN
 80044e2:	2206      	movs	r2, #6
 80044e4:	f7fc ffc4 	bl	8001470 <_pal_lld_setgroupmode>
	palClearPad(GPIOB, 5);
 80044e8:	f04f 0820 	mov.w	r8, #32
	palClearPad(GPIOB, 4);
 80044ec:	2310      	movs	r3, #16
	palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);	// reset
 80044ee:	4641      	mov	r1, r8
	palClearPad(GPIOB, 4);
 80044f0:	616b      	str	r3, [r5, #20]
	palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);	// reset
 80044f2:	2206      	movs	r2, #6
	driver = &SPID1;
 80044f4:	4e8b      	ldr	r6, [pc, #556]	; (8004724 <main+0xbb4>)
	palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);	// reset
 80044f6:	f7fc ffbb 	bl	8001470 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7, PAL_MODE_INPUT_PULLDOWN);	// flag0
 80044fa:	464a      	mov	r2, r9
 80044fc:	2180      	movs	r1, #128	; 0x80
	palClearPad(GPIOB, 5);
 80044fe:	f8c5 8014 	str.w	r8, [r5, #20]
	palSetPadMode(GPIOB, 7, PAL_MODE_INPUT_PULLDOWN);	// flag0
 8004502:	f7fc ffb5 	bl	8001470 <_pal_lld_setgroupmode>
	driver = &SPID1;
 8004506:	6134      	str	r4, [r6, #16]
 8004508:	f388 8811 	msr	BASEPRI, r8
  if (spip->state == SPI_STOP) {
 800450c:	7820      	ldrb	r0, [r4, #0]
  spip->config = config;
 800450e:	4b86      	ldr	r3, [pc, #536]	; (8004728 <main+0xbb8>)
 8004510:	2801      	cmp	r0, #1
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	d06b      	beq.n	80045ee <main+0xa7e>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004516:	f640 0155 	movw	r1, #2133	; 0x855
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800451a:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	; 0x28
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800451e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004522:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004526:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800452a:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800452e:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
  if (spip->config->circular) {
 8004532:	781a      	ldrb	r2, [r3, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004534:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (spip->config->circular) {
 8004536:	2a00      	cmp	r2, #0
 8004538:	d051      	beq.n	80045de <main+0xa6e>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800453a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800453c:	f040 0024 	orr.w	r0, r0, #36	; 0x24
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004540:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8004544:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
  spip->state = SPI_READY;
 8004548:	2502      	movs	r5, #2
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800454a:	69e2      	ldr	r2, [r4, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 800454c:	8a5b      	ldrh	r3, [r3, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800454e:	6810      	ldr	r0, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004550:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004554:	f441 7141 	orr.w	r1, r1, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004558:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800455c:	6010      	str	r0, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800455e:	6011      	str	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004560:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	2100      	movs	r1, #0
 8004566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	7025      	strb	r5, [r4, #0]
 800456e:	f381 8811 	msr	BASEPRI, r1
 8004572:	2320      	movs	r3, #32
	spiUnselect(driver);
 8004574:	6932      	ldr	r2, [r6, #16]
 8004576:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 800457a:	2301      	movs	r3, #1
 800457c:	6852      	ldr	r2, [r2, #4]
 800457e:	68d0      	ldr	r0, [r2, #12]
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	4083      	lsls	r3, r0
 8004584:	6113      	str	r3, [r2, #16]
 8004586:	f381 8811 	msr	BASEPRI, r1
	chThdSleepMilliseconds(500);
 800458a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800458e:	f7fd fb8f 	bl	8001cb0 <chThdSleep>
	return restart();
 8004592:	4864      	ldr	r0, [pc, #400]	; (8004724 <main+0xbb4>)
 8004594:	f7fe fb2c 	bl	8002bf0 <_ZN10Pt2001Base7restartEv.constprop.0>
 8004598:	4604      	mov	r4, r0
            palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
 800459a:	4e5d      	ldr	r6, [pc, #372]	; (8004710 <main+0xba0>)
            palTogglePad(LED_GREEN_PORT, LED_GREEN_PIN);
 800459c:	4d5f      	ldr	r5, [pc, #380]	; (800471c <main+0xbac>)
        if (isOverallHappyStatus) {
 800459e:	b144      	cbz	r4, 80045b2 <main+0xa42>
            palTogglePad(LED_GREEN_PORT, LED_GREEN_PIN);
 80045a0:	68eb      	ldr	r3, [r5, #12]
 80045a2:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80045a6:	60eb      	str	r3, [r5, #12]
        chThdSleepMilliseconds(100);
 80045a8:	20c8      	movs	r0, #200	; 0xc8
 80045aa:	f7fd fb81 	bl	8001cb0 <chThdSleep>
        if (isOverallHappyStatus) {
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	d1f6      	bne.n	80045a0 <main+0xa30>
            palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
 80045b2:	68f3      	ldr	r3, [r6, #12]
 80045b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045b8:	60f3      	str	r3, [r6, #12]
 80045ba:	e7f5      	b.n	80045a8 <main+0xa38>
  mfsp->config = config;
 80045bc:	495b      	ldr	r1, [pc, #364]	; (800472c <main+0xbbc>)
  mfsp->next_offset     = 0U;
 80045be:	e9c9 7703 	strd	r7, r7, [r9, #12]
  mfsp->config = config;
 80045c2:	f8c9 1004 	str.w	r1, [r9, #4]
  mfsp->current_bank    = MFS_BANK_0;
 80045c6:	f889 7008 	strb.w	r7, [r9, #8]
  mfsp->used_space      = 0U;
 80045ca:	f8c9 7014 	str.w	r7, [r9, #20]
 80045ce:	f509 7180 	add.w	r1, r9, #256	; 0x100
    mfsp->descriptors[i].size   = 0U;
 80045d2:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80045d6:	3308      	adds	r3, #8
  for (i = 0; i < MFS_CFG_MAX_RECORDS; i++) {
 80045d8:	4299      	cmp	r1, r3
 80045da:	d1fa      	bne.n	80045d2 <main+0xa62>
 80045dc:	e5de      	b.n	800419c <main+0x62c>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80045de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80045e0:	f020 0024 	bic.w	r0, r0, #36	; 0x24
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80045e4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80045e8:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
 80045ec:	e7ac      	b.n	8004548 <main+0x9d8>
  if (id < STM32_DMA_STREAMS) {
 80045ee:	210a      	movs	r1, #10
 80045f0:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <main+0xbc0>)
 80045f2:	4a50      	ldr	r2, [pc, #320]	; (8004734 <main+0xbc4>)
 80045f4:	f7fc ff74 	bl	80014e0 <dmaStreamAllocI.part.0>
 80045f8:	4605      	mov	r5, r0
 80045fa:	210a      	movs	r1, #10
 80045fc:	4638      	mov	r0, r7
 80045fe:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <main+0xbc0>)
 8004600:	4a4d      	ldr	r2, [pc, #308]	; (8004738 <main+0xbc8>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 8004602:	6225      	str	r5, [r4, #32]
 8004604:	f7fc ff6c 	bl	80014e0 <dmaStreamAllocI.part.0>
 8004608:	4601      	mov	r1, r0
      rccEnableSPI1(true);
 800460a:	484c      	ldr	r0, [pc, #304]	; (800473c <main+0xbcc>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800460c:	6a27      	ldr	r7, [r4, #32]
      rccEnableSPI1(true);
 800460e:	6985      	ldr	r5, [r0, #24]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004610:	6863      	ldr	r3, [r4, #4]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004612:	69e2      	ldr	r2, [r4, #28]
      rccEnableSPI1(true);
 8004614:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004618:	687f      	ldr	r7, [r7, #4]
      rccEnableSPI1(true);
 800461a:	6185      	str	r5, [r0, #24]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800461c:	684d      	ldr	r5, [r1, #4]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800461e:	6261      	str	r1, [r4, #36]	; 0x24
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004620:	8a19      	ldrh	r1, [r3, #16]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004622:	320c      	adds	r2, #12
      rccEnableSPI1(true);
 8004624:	6980      	ldr	r0, [r0, #24]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004626:	60ba      	str	r2, [r7, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004628:	60aa      	str	r2, [r5, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800462a:	050a      	lsls	r2, r1, #20
 800462c:	f53f af75 	bmi.w	800451a <main+0x9aa>
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004630:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004634:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004638:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800463c:	e9c4 020a 	strd	r0, r2, [r4, #40]	; 0x28
 8004640:	e777      	b.n	8004532 <main+0x9c2>
 8004642:	4638      	mov	r0, r7
 8004644:	210c      	movs	r1, #12
 8004646:	4b3e      	ldr	r3, [pc, #248]	; (8004740 <main+0xbd0>)
 8004648:	4a3e      	ldr	r2, [pc, #248]	; (8004744 <main+0xbd4>)
 800464a:	f7fc ff49 	bl	80014e0 <dmaStreamAllocI.part.0>
 800464e:	4607      	mov	r7, r0
 8004650:	210c      	movs	r1, #12
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <main+0xbd0>)
 8004654:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <main+0xbd8>)
 8004656:	2003      	movs	r0, #3
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8004658:	616f      	str	r7, [r5, #20]
 800465a:	f7fc ff41 	bl	80014e0 <dmaStreamAllocI.part.0>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800465e:	27c0      	movs	r7, #192	; 0xc0
      rccEnableUSART1(true);
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <main+0xbcc>)
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8004662:	61a8      	str	r0, [r5, #24]
 8004664:	4602      	mov	r2, r0
      rccEnableUSART1(true);
 8004666:	6998      	ldr	r0, [r3, #24]
 8004668:	4938      	ldr	r1, [pc, #224]	; (800474c <main+0xbdc>)
 800466a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800466e:	6198      	str	r0, [r3, #24]
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M) {
 8004670:	6868      	ldr	r0, [r5, #4]
      rccEnableUSART1(true);
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f881 7325 	strb.w	r7, [r1, #805]	; 0x325
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M) {
 8004678:	8b83      	ldrh	r3, [r0, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800467a:	f8c1 6184 	str.w	r6, [r1, #388]	; 0x184
 800467e:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004686:	604e      	str	r6, [r1, #4]
 8004688:	d107      	bne.n	800469a <main+0xb2a>
      uartp->dmatxmode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800468a:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
      uartp->dmarxmode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800468e:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
      uartp->dmatxmode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004692:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004696:	e9c5 1303 	strd	r1, r3, [r5, #12]
    uartp->rxbuf = 0;
 800469a:	2100      	movs	r1, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 800469c:	6968      	ldr	r0, [r5, #20]
 800469e:	68ab      	ldr	r3, [r5, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80046a0:	6852      	ldr	r2, [r2, #4]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80046a2:	6840      	ldr	r0, [r0, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80046a8:	6093      	str	r3, [r2, #8]
    uartp->rxbuf = 0;
 80046aa:	83a9      	strh	r1, [r5, #28]
 80046ac:	e680      	b.n	80043b0 <main+0x840>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	f47f adc8 	bne.w	8004246 <main+0x6d6>
 80046b6:	e5e8      	b.n	800428a <main+0x71a>
  if (crc != mfsp->buffer.dhdr.fields.crc) {
 80046b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046bc:	f8b9 21ee 	ldrh.w	r2, [r9, #494]	; 0x1ee
 80046c0:	429a      	cmp	r2, r3
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 80046c2:	bf08      	it	eq
 80046c4:	f888 b000 	strbeq.w	fp, [r8]
 80046c8:	f43f adbd 	beq.w	8004246 <main+0x6d6>
    mfsp->state = MFS_ERROR;
 80046cc:	2304      	movs	r3, #4
 80046ce:	f889 3000 	strb.w	r3, [r9]
 80046d2:	23f8      	movs	r3, #248	; 0xf8
 80046d4:	f888 3000 	strb.w	r3, [r8]
    return state == MFS_NO_ERROR || state == MFS_WARN_REPAIR || state == MFS_WARN_GC;
 80046d8:	e5b5      	b.n	8004246 <main+0x6d6>
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 80046da:	23ff      	movs	r3, #255	; 0xff
 80046dc:	4f1c      	ldr	r7, [pc, #112]	; (8004750 <main+0xbe0>)
 80046de:	f888 3000 	strb.w	r3, [r8]
    return state == MFS_NO_ERROR || state == MFS_WARN_REPAIR || state == MFS_WARN_GC;
 80046e2:	e5b0      	b.n	8004246 <main+0x6d6>
    mfsp->state = MFS_ERROR;
 80046e4:	2204      	movs	r2, #4
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 80046e6:	23f8      	movs	r3, #248	; 0xf8
 80046e8:	4f19      	ldr	r7, [pc, #100]	; (8004750 <main+0xbe0>)
 80046ea:	f889 2000 	strb.w	r2, [r9]
 80046ee:	f888 3000 	strb.w	r3, [r8]
    return state == MFS_NO_ERROR || state == MFS_WARN_REPAIR || state == MFS_WARN_GC;
 80046f2:	e5a8      	b.n	8004246 <main+0x6d6>
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 80046f4:	23fe      	movs	r3, #254	; 0xfe
 80046f6:	4f16      	ldr	r7, [pc, #88]	; (8004750 <main+0xbe0>)
 80046f8:	f888 3000 	strb.w	r3, [r8]
    return state == MFS_NO_ERROR || state == MFS_WARN_REPAIR || state == MFS_WARN_GC;
 80046fc:	e5a3      	b.n	8004246 <main+0x6d6>
    flashState = mfsReadRecord(&mfs1, MFS_RECORD_ID, &size, GetConfigurationPtr());
 80046fe:	23fd      	movs	r3, #253	; 0xfd
 8004700:	4f13      	ldr	r7, [pc, #76]	; (8004750 <main+0xbe0>)
 8004702:	f888 3000 	strb.w	r3, [r8]
    return state == MFS_NO_ERROR || state == MFS_WARN_REPAIR || state == MFS_WARN_GC;
 8004706:	e59e      	b.n	8004246 <main+0x6d6>
 8004708:	016e3600 	.word	0x016e3600
 800470c:	20000898 	.word	0x20000898
 8004710:	40010c00 	.word	0x40010c00
 8004714:	080027d1 	.word	0x080027d1
 8004718:	20000968 	.word	0x20000968
 800471c:	40010800 	.word	0x40010800
 8004720:	40010000 	.word	0x40010000
 8004724:	20001270 	.word	0x20001270
 8004728:	0800502c 	.word	0x0800502c
 800472c:	08005068 	.word	0x08005068
 8004730:	2000084c 	.word	0x2000084c
 8004734:	080013b1 	.word	0x080013b1
 8004738:	08001391 	.word	0x08001391
 800473c:	40021000 	.word	0x40021000
 8004740:	2000087c 	.word	0x2000087c
 8004744:	080012e1 	.word	0x080012e1
 8004748:	08001291 	.word	0x08001291
 800474c:	e000e100 	.word	0xe000e100
 8004750:	20001284 	.word	0x20001284
	...

08004760 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004760:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8004764:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004766:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800476a:	2300      	movs	r3, #0
 800476c:	f383 8811 	msr	BASEPRI, r3
}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
	...

08004780 <chThdExit>:
void chThdExit(msg_t msg) {
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	2220      	movs	r2, #32
 8004784:	4603      	mov	r3, r0
 8004786:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <chThdExit+0x48>)
 800478c:	6994      	ldr	r4, [r2, #24]
  return (bool)(lp->next != lp);
 800478e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (ch_list_notempty(&tp->waiting)) {
 8004790:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004794:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 8004796:	6263      	str	r3, [r4, #36]	; 0x24
  while (ch_list_notempty(&tp->waiting)) {
 8004798:	d006      	beq.n	80047a8 <chThdExit+0x28>
  lp->next = p->next;
 800479a:	6803      	ldr	r3, [r0, #0]
 800479c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI((thread_t *)ch_list_pop(&tp->waiting));
 800479e:	f7fc fcef 	bl	8001180 <chSchReadyI>
  return (bool)(lp->next != lp);
 80047a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (ch_list_notempty(&tp->waiting)) {
 80047a4:	42a8      	cmp	r0, r5
 80047a6:	d1f8      	bne.n	800479a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 80047a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80047ac:	b93b      	cbnz	r3, 80047be <chThdExit+0x3e>
 80047ae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80047b2:	079b      	lsls	r3, r3, #30
 80047b4:	d103      	bne.n	80047be <chThdExit+0x3e>
    REG_REMOVE(tp);
 80047b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80047ba:	6113      	str	r3, [r2, #16]
 80047bc:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80047be:	200f      	movs	r0, #15
}
 80047c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80047c4:	f7fd b8b4 	b.w	8001930 <chSchGoSleepS>
 80047c8:	200010d0 	.word	0x200010d0
 80047cc:	00000000 	.word	0x00000000

080047d0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80047d0:	b430      	push	{r4, r5}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 80047d2:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 80047d4:	2500      	movs	r5, #0
  thread_t *otp = currp;
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <chSchDoReschedule+0x38>)
  ch_priority_queue_t *p = pqp->next;
 80047d8:	6810      	ldr	r0, [r2, #0]
 80047da:	6991      	ldr	r1, [r2, #24]
  pqp->next       = p->next;
 80047dc:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80047de:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80047e0:	f880 4020 	strb.w	r4, [r0, #32]
  } while (pqp->prio > p->prio);
 80047e4:	688c      	ldr	r4, [r1, #8]
  pqp->next       = p->next;
 80047e6:	6013      	str	r3, [r2, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 80047e8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80047ea:	f881 5020 	strb.w	r5, [r1, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 80047ee:	e000      	b.n	80047f2 <chSchDoReschedule+0x22>
 80047f0:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	42a2      	cmp	r2, r4
 80047f6:	d8fb      	bhi.n	80047f0 <chSchDoReschedule+0x20>
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80047f8:	bc30      	pop	{r4, r5}
  p->prev       = pqp->prev;
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8004800:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8004802:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8004804:	f7fb bd24 	b.w	8000250 <_port_switch>
 8004808:	200010d0 	.word	0x200010d0
 800480c:	00000000 	.word	0x00000000

08004810 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <__early_init+0x60>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004812:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	f041 0101 	orr.w	r1, r1, #1
 800481a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	0799      	lsls	r1, r3, #30
 8004820:	d5fc      	bpl.n	800481c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004822:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004824:	6811      	ldr	r1, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <__early_init+0x60>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004828:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800482c:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800482e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	f012 0f0c 	tst.w	r2, #12
 8004836:	d1fb      	bne.n	8004830 <__early_init+0x20>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8004838:	6859      	ldr	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800483a:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <__early_init+0x60>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800483c:	f441 1120 	orr.w	r1, r1, #2621440	; 0x280000
 8004840:	6059      	str	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004848:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	d5fc      	bpl.n	800484a <__early_init+0x3a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004850:	2111      	movs	r1, #17
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <__early_init+0x64>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8004854:	4808      	ldr	r0, [pc, #32]	; (8004878 <__early_init+0x68>)
 8004856:	6050      	str	r0, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8004858:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800485a:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <__early_init+0x60>)
  RCC->CFGR |= STM32_SW;
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004864:	684b      	ldr	r3, [r1, #4]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b08      	cmp	r3, #8
 800486c:	d1fa      	bne.n	8004864 <__early_init+0x54>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800486e:	4770      	bx	lr
 8004870:	40021000 	.word	0x40021000
 8004874:	40022000 	.word	0x40022000
 8004878:	00686400 	.word	0x00686400
 800487c:	00000000 	.word	0x00000000

08004880 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004882:	f240 130f 	movw	r3, #271	; 0x10f
  USART_TypeDef *u = uartp->usart;
 8004886:	4e21      	ldr	r6, [pc, #132]	; (800490c <VectorD4+0x8c>)
 8004888:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 800488a:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800488c:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800488e:	6862      	ldr	r2, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004890:	421d      	tst	r5, r3
 8004892:	d01d      	beq.n	80048d0 <VectorD4+0x50>
    u->SR = ~USART_SR_LBD;
 8004894:	f46f 7280 	mvn.w	r2, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004898:	6873      	ldr	r3, [r6, #4]
    u->SR = ~USART_SR_LBD;
 800489a:	6022      	str	r2, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	b1ba      	cbz	r2, 80048d0 <VectorD4+0x50>
    sts |= UART_OVERRUN_ERROR;
 80048a0:	f015 0f08 	tst.w	r5, #8
 80048a4:	bf0c      	ite	eq
 80048a6:	2100      	moveq	r1, #0
 80048a8:	2110      	movne	r1, #16
  sr = u->SR;   /* SR reset step 1.*/
 80048aa:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_PE)
 80048ac:	07e8      	lsls	r0, r5, #31
    sts |= UART_PARITY_ERROR;
 80048ae:	bf48      	it	mi
 80048b0:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 80048b4:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 80048b6:	bf48      	it	mi
 80048b8:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 80048bc:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 80048be:	bf48      	it	mi
 80048c0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 80048c4:	05db      	lsls	r3, r3, #23
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80048c6:	4811      	ldr	r0, [pc, #68]	; (800490c <VectorD4+0x8c>)
    sts |= UART_BREAK_DETECTED;
 80048c8:	bf48      	it	mi
 80048ca:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80048ce:	4790      	blx	r2
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80048d0:	0668      	lsls	r0, r5, #25
 80048d2:	d501      	bpl.n	80048d8 <VectorD4+0x58>
 80048d4:	0679      	lsls	r1, r7, #25
 80048d6:	d40c      	bmi.n	80048f2 <VectorD4+0x72>
  if ((cr1 & USART_CR1_IDLEIE) && (sr & USART_SR_IDLE)) {
 80048d8:	06fa      	lsls	r2, r7, #27
 80048da:	d506      	bpl.n	80048ea <VectorD4+0x6a>
 80048dc:	06eb      	lsls	r3, r5, #27
 80048de:	d504      	bpl.n	80048ea <VectorD4+0x6a>
    _uart_timeout_isr_code(uartp);
 80048e0:	6873      	ldr	r3, [r6, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	b10b      	cbz	r3, 80048ea <VectorD4+0x6a>
 80048e6:	4809      	ldr	r0, [pc, #36]	; (800490c <VectorD4+0x8c>)
 80048e8:	4798      	blx	r3
}
 80048ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80048ee:	f7fc bbd7 	b.w	80010a0 <_port_irq_epilogue>
    u->SR = ~USART_SR_TC;
 80048f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
    _uart_tx2_isr_code(uartp);
 80048f6:	6873      	ldr	r3, [r6, #4]
    u->SR = ~USART_SR_TC;
 80048f8:	6022      	str	r2, [r4, #0]
    _uart_tx2_isr_code(uartp);
 80048fa:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80048fc:	403a      	ands	r2, r7
 80048fe:	60e2      	str	r2, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0e9      	beq.n	80048d8 <VectorD4+0x58>
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <VectorD4+0x8c>)
 8004906:	4798      	blx	r3
 8004908:	e7e6      	b.n	80048d8 <VectorD4+0x58>
 800490a:	bf00      	nop
 800490c:	2000087c 	.word	0x2000087c

08004910 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8004914:	4c6c      	ldr	r4, [pc, #432]	; (8004ac8 <VectorD8+0x1b8>)
 8004916:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8004918:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800491c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800491e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8004920:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8004922:	f100 8082 	bmi.w	8004a2a <VectorD8+0x11a>
 8004926:	2320      	movs	r3, #32
 8004928:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800492c:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8004930:	d04f      	beq.n	80049d2 <VectorD8+0xc2>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8004932:	4f66      	ldr	r7, [pc, #408]	; (8004acc <VectorD8+0x1bc>)
  tp->u.rdymsg = msg;
 8004934:	f04f 0a00 	mov.w	sl, #0
  if (ch_queue_notempty(&tqp->queue)) {
 8004938:	f107 0908 	add.w	r9, r7, #8
 800493c:	e008      	b.n	8004950 <VectorD8+0x40>
    if (sr & USART_SR_RXNE)
 800493e:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8004940:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8004944:	d41e      	bmi.n	8004984 <VectorD8+0x74>
    sr = u->SR;
 8004946:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004948:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800494c:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800494e:	d040      	beq.n	80049d2 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004950:	072b      	lsls	r3, r5, #28
 8004952:	d0f4      	beq.n	800493e <VectorD8+0x2e>
    sts |= SD_OVERRUN_ERROR;
 8004954:	f015 0f08 	tst.w	r5, #8
 8004958:	bf0c      	ite	eq
 800495a:	2100      	moveq	r1, #0
 800495c:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800495e:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8004960:	bf48      	it	mi
 8004962:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8004966:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8004968:	bf48      	it	mi
 800496a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800496e:	076b      	lsls	r3, r5, #29
 8004970:	4638      	mov	r0, r7
    sts |= SD_NOISE_ERROR;
 8004972:	bf48      	it	mi
 8004974:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8004978:	f7fc fc2a 	bl	80011d0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800497c:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800497e:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8004982:	d5e0      	bpl.n	8004946 <VectorD8+0x36>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8004984:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8004986:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800498a:	2b00      	cmp	r3, #0
 800498c:	d03c      	beq.n	8004a08 <VectorD8+0xf8>
  if (!iqIsFullI(iqp)) {
 800498e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8004992:	4293      	cmp	r3, r2
 8004994:	d040      	beq.n	8004a18 <VectorD8+0x108>
    iqp->q_counter++;
 8004996:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8004998:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800499a:	3201      	adds	r2, #1
 800499c:	ea05 050b 	and.w	r5, r5, fp
 80049a0:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80049a2:	6221      	str	r1, [r4, #32]
 80049a4:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80049a6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d301      	bcc.n	80049b2 <VectorD8+0xa2>
      iqp->q_wrptr = iqp->q_buffer;
 80049ae:	69a3      	ldr	r3, [r4, #24]
 80049b0:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 80049b2:	68e0      	ldr	r0, [r4, #12]
 80049b4:	4548      	cmp	r0, r9
 80049b6:	d0c6      	beq.n	8004946 <VectorD8+0x36>
  qp->next       = p->next;
 80049b8:	6803      	ldr	r3, [r0, #0]
 80049ba:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 80049bc:	f8c3 9004 	str.w	r9, [r3, #4]
 80049c0:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80049c4:	f7fc fbdc 	bl	8001180 <chSchReadyI>
    sr = u->SR;
 80049c8:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80049ca:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80049ce:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80049d0:	d1be      	bne.n	8004950 <VectorD8+0x40>
 80049d2:	2300      	movs	r3, #0
 80049d4:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80049d8:	f018 0f80 	tst.w	r8, #128	; 0x80
 80049dc:	d001      	beq.n	80049e2 <VectorD8+0xd2>
 80049de:	062a      	lsls	r2, r5, #24
 80049e0:	d432      	bmi.n	8004a48 <VectorD8+0x138>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80049e2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80049e6:	d00b      	beq.n	8004a00 <VectorD8+0xf0>
 80049e8:	066b      	lsls	r3, r5, #25
 80049ea:	d509      	bpl.n	8004a00 <VectorD8+0xf0>
 80049ec:	2320      	movs	r3, #32
 80049ee:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80049f2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d04b      	beq.n	8004a92 <VectorD8+0x182>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f383 8811 	msr	BASEPRI, r3
}
 8004a00:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004a04:	f7fc bb4c 	b.w	80010a0 <_port_irq_epilogue>
 8004a08:	2104      	movs	r1, #4
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	f7fc fbe0 	bl	80011d0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8004a10:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d1be      	bne.n	8004996 <VectorD8+0x86>
 8004a18:	6962      	ldr	r2, [r4, #20]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d0bb      	beq.n	8004996 <VectorD8+0x86>
 8004a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a22:	4638      	mov	r0, r7
 8004a24:	f7fc fbd4 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004a28:	e78d      	b.n	8004946 <VectorD8+0x36>
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a34:	1d20      	adds	r0, r4, #4
 8004a36:	f7fc fbcb 	bl	80011d0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8004a3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6032      	str	r2, [r6, #0]
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	e76e      	b.n	8004926 <VectorD8+0x16>
 8004a48:	2320      	movs	r3, #32
 8004a4a:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8004a4e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d02a      	beq.n	8004aac <VectorD8+0x19c>
    oqp->q_counter++;
 8004a56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8004a58:	6c20      	ldr	r0, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8004a5a:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8004a5c:	3201      	adds	r2, #1
 8004a5e:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8004a60:	64a1      	str	r1, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8004a62:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 8004a64:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8004a66:	d301      	bcc.n	8004a6c <VectorD8+0x15c>
      oqp->q_rdptr = oqp->q_buffer;
 8004a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a6a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 8004a6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <VectorD8+0x1c0>)
 8004a70:	4298      	cmp	r0, r3
 8004a72:	d006      	beq.n	8004a82 <VectorD8+0x172>
  tp->u.rdymsg = msg;
 8004a74:	2100      	movs	r1, #0
  qp->next       = p->next;
 8004a76:	6802      	ldr	r2, [r0, #0]
 8004a78:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8004a7a:	6053      	str	r3, [r2, #4]
 8004a7c:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004a7e:	f7fc fb7f 	bl	8001180 <chSchReadyI>
      u->DR = b;
 8004a82:	6077      	str	r7, [r6, #4]
 8004a84:	2300      	movs	r3, #0
 8004a86:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8004a8a:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004a8e:	d0b7      	beq.n	8004a00 <VectorD8+0xf0>
 8004a90:	e7aa      	b.n	80049e8 <VectorD8+0xd8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0b0      	beq.n	80049fa <VectorD8+0xea>
 8004a98:	2110      	movs	r1, #16
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <VectorD8+0x1bc>)
 8004a9c:	f7fc fb98 	bl	80011d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004aa0:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8004aa4:	ea08 0303 	and.w	r3, r8, r3
 8004aa8:	60f3      	str	r3, [r6, #12]
 8004aaa:	e7a6      	b.n	80049fa <VectorD8+0xea>
  if (!oqIsEmptyI(oqp)) {
 8004aac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	d0d1      	beq.n	8004a56 <VectorD8+0x146>
 8004ab2:	2108      	movs	r1, #8
 8004ab4:	4805      	ldr	r0, [pc, #20]	; (8004acc <VectorD8+0x1bc>)
 8004ab6:	f7fc fb8b 	bl	80011d0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8004aba:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8004abe:	ea08 0303 	and.w	r3, r8, r3
 8004ac2:	60f3      	str	r3, [r6, #12]
 8004ac4:	e7de      	b.n	8004a84 <VectorD8+0x174>
 8004ac6:	bf00      	nop
 8004ac8:	200007d0 	.word	0x200007d0
 8004acc:	200007d4 	.word	0x200007d4
 8004ad0:	20000800 	.word	0x20000800
	...

08004ae0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8004ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8004ae4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004ae8:	6923      	ldr	r3, [r4, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004aea:	68e2      	ldr	r2, [r4, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8004af0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8004af2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8004af4:	6122      	str	r2, [r4, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8004af6:	d403      	bmi.n	8004b00 <VectorB0+0x20>
}
 8004af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8004afc:	f7fc bad0 	b.w	80010a0 <_port_irq_epilogue>
 8004b00:	2620      	movs	r6, #32
 8004b02:	f386 8811 	msr	BASEPRI, r6
     than the interval between "now" and "lasttime".*/
  while (true) {
    vtfunc_t fn;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8004b06:	4d1e      	ldr	r5, [pc, #120]	; (8004b80 <VectorB0+0xa0>)
  return (systime_t)STM32_ST_TIM->CNT;
 8004b08:	6a60      	ldr	r0, [r4, #36]	; 0x24

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004b0a:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8004b0e:	69eb      	ldr	r3, [r5, #28]
 8004b10:	b280      	uxth	r0, r0

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	eba0 020c 	sub.w	r2, r0, ip
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	428a      	cmp	r2, r1
 8004b1c:	f105 071c 	add.w	r7, r5, #28
 8004b20:	d320      	bcc.n	8004b64 <VectorB0+0x84>
    /* Removing the timer from the list.*/
    (void) vt_dequeue(&vtp->dlist);

    /* Marking the timer as not armed.*/
    fn = vtp->func;
    vtp->func = NULL;
 8004b22:	f04f 0800 	mov.w	r8, #0
  dlp->prev->next = dlp->next;
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	6858      	ldr	r0, [r3, #4]
  return systime + (systime_t)interval;
 8004b2a:	4461      	add	r1, ip
    vtlp->lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 8004b2c:	8529      	strh	r1, [r5, #40]	; 0x28
  dlp->prev->next = dlp->next;
 8004b2e:	6002      	str	r2, [r0, #0]
  dlp->next->prev = dlp->prev;
 8004b30:	6050      	str	r0, [r2, #4]
    fn = vtp->func;
 8004b32:	68da      	ldr	r2, [r3, #12]
    vtp->func = NULL;
 8004b34:	f8c3 800c 	str.w	r8, [r3, #12]

    /* If the list becomes empty then the alarm is disabled.*/
    if (vt_is_empty(&vtlp->dlist)) {
 8004b38:	69e9      	ldr	r1, [r5, #28]
 8004b3a:	42b9      	cmp	r1, r7
  STM32_ST_TIM->DIER = 0U;
 8004b3c:	bf08      	it	eq
 8004b3e:	f8c4 800c 	streq.w	r8, [r4, #12]
 8004b42:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
    fn(vtp->par);
 8004b46:	6918      	ldr	r0, [r3, #16]
 8004b48:	4790      	blx	r2
 8004b4a:	f386 8811 	msr	BASEPRI, r6
  return (systime_t)STM32_ST_TIM->CNT;
 8004b4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004b50:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8004b54:	69eb      	ldr	r3, [r5, #28]
 8004b56:	b280      	uxth	r0, r0
    if (nowdelta < vtp->dlist.delta) {
 8004b58:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8004b5a:	eba0 020c 	sub.w	r2, r0, ip
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	428a      	cmp	r2, r1
 8004b62:	d2e0      	bcs.n	8004b26 <VectorB0+0x46>
    chSysLockFromISR();
  }

  /* If the list is empty, nothing else to do.*/
  if (vt_is_empty(&vtlp->dlist)) {
 8004b64:	42bb      	cmp	r3, r7
 8004b66:	d004      	beq.n	8004b72 <VectorB0+0x92>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8004b68:	1a89      	subs	r1, r1, r2
  vtlp->lasttime += nowdelta;
 8004b6a:	8528      	strh	r0, [r5, #40]	; 0x28
  vtp->dlist.delta -= nowdelta;
 8004b6c:	6099      	str	r1, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 8004b6e:	f7fc fb5f 	bl	8001230 <vt_set_alarm>
 8004b72:	2300      	movs	r3, #0
 8004b74:	f383 8811 	msr	BASEPRI, r3
}
 8004b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8004b7c:	f7fc ba90 	b.w	80010a0 <_port_irq_epilogue>
 8004b80:	200010d0 	.word	0x200010d0
	...

08004b90 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8004b90:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8004b92:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <Vector84+0x10>)
 8004b94:	f7fc fd04 	bl	80015a0 <dmaServeInterrupt>
}
 8004b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004b9c:	f7fc ba80 	b.w	80010a0 <_port_irq_epilogue>
 8004ba0:	0800516c 	.word	0x0800516c
	...

08004bb0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004bb0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004bb2:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <Vector80+0x10>)
 8004bb4:	f7fc fcf4 	bl	80015a0 <dmaServeInterrupt>
}
 8004bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004bbc:	f7fc ba70 	b.w	80010a0 <_port_irq_epilogue>
 8004bc0:	0800515c 	.word	0x0800515c
	...

08004bd0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004bd0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004bd2:	4803      	ldr	r0, [pc, #12]	; (8004be0 <Vector7C+0x10>)
 8004bd4:	f7fc fce4 	bl	80015a0 <dmaServeInterrupt>
}
 8004bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004bdc:	f7fc ba60 	b.w	80010a0 <_port_irq_epilogue>
 8004be0:	0800514c 	.word	0x0800514c
	...

08004bf0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8004bf0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004bf2:	4803      	ldr	r0, [pc, #12]	; (8004c00 <Vector78+0x10>)
 8004bf4:	f7fc fcd4 	bl	80015a0 <dmaServeInterrupt>
}
 8004bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004bfc:	f7fc ba50 	b.w	80010a0 <_port_irq_epilogue>
 8004c00:	0800513c 	.word	0x0800513c
	...

08004c10 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004c10:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004c12:	4803      	ldr	r0, [pc, #12]	; (8004c20 <Vector74+0x10>)
 8004c14:	f7fc fcc4 	bl	80015a0 <dmaServeInterrupt>
}
 8004c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004c1c:	f7fc ba40 	b.w	80010a0 <_port_irq_epilogue>
 8004c20:	0800512c 	.word	0x0800512c
	...

08004c30 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004c30:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004c32:	4803      	ldr	r0, [pc, #12]	; (8004c40 <Vector70+0x10>)
 8004c34:	f7fc fcb4 	bl	80015a0 <dmaServeInterrupt>
}
 8004c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004c3c:	f7fc ba30 	b.w	80010a0 <_port_irq_epilogue>
 8004c40:	0800511c 	.word	0x0800511c
	...

08004c50 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004c50:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8004c52:	4803      	ldr	r0, [pc, #12]	; (8004c60 <Vector6C+0x10>)
 8004c54:	f7fc fca4 	bl	80015a0 <dmaServeInterrupt>
}
 8004c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004c5c:	f7fc ba20 	b.w	80010a0 <_port_irq_epilogue>
 8004c60:	0800510c 	.word	0x0800510c
	...

08004c70 <Vector98>:
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8004c70:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 8004c72:	4d17      	ldr	r5, [pc, #92]	; (8004cd0 <Vector98+0x60>)
 8004c74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004c76:	685c      	ldr	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8004c78:	0722      	lsls	r2, r4, #28
  canp->can->MSR = msr;
 8004c7a:	605c      	str	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8004c7c:	d405      	bmi.n	8004c8a <Vector98+0x1a>
  if (msr & CAN_MSR_ERRI) {
 8004c7e:	0763      	lsls	r3, r4, #29
 8004c80:	d416      	bmi.n	8004cb0 <Vector98+0x40>
}
 8004c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004c86:	f7fc ba0b 	b.w	80010a0 <_port_irq_epilogue>
    canp->state = CAN_READY;
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f800 2b28 	strb.w	r2, [r0], #40
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2120      	movs	r1, #32
 8004c96:	f022 0202 	bic.w	r2, r2, #2
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f381 8811 	msr	BASEPRI, r1
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f7fc fa95 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f383 8811 	msr	BASEPRI, r3
  if (msr & CAN_MSR_ERRI) {
 8004cac:	0763      	lsls	r3, r4, #29
 8004cae:	d5e8      	bpl.n	8004c82 <Vector98+0x12>
    uint32_t esr = canp->can->ESR;
 8004cb0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	6991      	ldr	r1, [r2, #24]
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <Vector98+0x64>)
 8004cbc:	0409      	lsls	r1, r1, #16
 8004cbe:	f7fc fa87 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f383 8811 	msr	BASEPRI, r3
}
 8004cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004ccc:	f7fc b9e8 	b.w	80010a0 <_port_irq_epilogue>
 8004cd0:	20000790 	.word	0x20000790
 8004cd4:	200007b0 	.word	0x200007b0
	...

08004ce0 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8004ce0:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 8004ce2:	4d18      	ldr	r5, [pc, #96]	; (8004d44 <Vector94+0x64>)
 8004ce4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ce6:	691c      	ldr	r4, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8004ce8:	07a2      	lsls	r2, r4, #30
 8004cea:	d105      	bne.n	8004cf8 <Vector94+0x18>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8004cec:	06e3      	lsls	r3, r4, #27
 8004cee:	d418      	bmi.n	8004d22 <Vector94+0x42>
}
 8004cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004cf4:	f7fc b9d4 	b.w	80010a0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	615a      	str	r2, [r3, #20]
 8004d02:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 8004d06:	f105 0010 	add.w	r0, r5, #16
 8004d0a:	f7fc fa51 	bl	80011b0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8004d0e:	2102      	movs	r1, #2
 8004d10:	f105 0018 	add.w	r0, r5, #24
 8004d14:	f7fc fa5c 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8004d1e:	06e3      	lsls	r3, r4, #27
 8004d20:	d5e6      	bpl.n	8004cf0 <Vector94+0x10>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8004d22:	2110      	movs	r1, #16
 8004d24:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d26:	2320      	movs	r3, #32
 8004d28:	6111      	str	r1, [r2, #16]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	4806      	ldr	r0, [pc, #24]	; (8004d48 <Vector94+0x68>)
 8004d30:	f7fc fa4e 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f383 8811 	msr	BASEPRI, r3
}
 8004d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004d3e:	f7fc b9af 	b.w	80010a0 <_port_irq_epilogue>
 8004d42:	bf00      	nop
 8004d44:	20000790 	.word	0x20000790
 8004d48:	200007b0 	.word	0x200007b0
 8004d4c:	00000000 	.word	0x00000000

08004d50 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8004d50:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 8004d52:	4d18      	ldr	r5, [pc, #96]	; (8004db4 <Vector90+0x64>)
 8004d54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d56:	68dc      	ldr	r4, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8004d58:	07a2      	lsls	r2, r4, #30
 8004d5a:	d105      	bne.n	8004d68 <Vector90+0x18>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8004d5c:	06e3      	lsls	r3, r4, #27
 8004d5e:	d418      	bmi.n	8004d92 <Vector90+0x42>
}
 8004d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004d64:	f7fc b99c 	b.w	80010a0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	2120      	movs	r1, #32
 8004d6c:	f022 0202 	bic.w	r2, r2, #2
 8004d70:	615a      	str	r2, [r3, #20]
 8004d72:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 8004d76:	f105 0010 	add.w	r0, r5, #16
 8004d7a:	f7fc fa19 	bl	80011b0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8004d7e:	2101      	movs	r1, #1
 8004d80:	f105 0018 	add.w	r0, r5, #24
 8004d84:	f7fc fa24 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8004d8e:	06e3      	lsls	r3, r4, #27
 8004d90:	d5e6      	bpl.n	8004d60 <Vector90+0x10>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8004d92:	2110      	movs	r1, #16
 8004d94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d96:	2320      	movs	r3, #32
 8004d98:	60d1      	str	r1, [r2, #12]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	4806      	ldr	r0, [pc, #24]	; (8004db8 <Vector90+0x68>)
 8004da0:	f7fc fa16 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004da4:	2300      	movs	r3, #0
 8004da6:	f383 8811 	msr	BASEPRI, r3
}
 8004daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004dae:	f7fc b977 	b.w	80010a0 <_port_irq_epilogue>
 8004db2:	bf00      	nop
 8004db4:	20000790 	.word	0x20000790
 8004db8:	200007b0 	.word	0x200007b0
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <Vector8C>:
  tsr = canp->can->TSR;
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <Vector8C+0x60>)
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8004dc2:	b510      	push	{r4, lr}
  tsr = canp->can->TSR;
 8004dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc6:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8004dc8:	f013 0401 	ands.w	r4, r3, #1
  canp->can->TSR = tsr;
 8004dcc:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8004dce:	d004      	beq.n	8004dda <Vector8C+0x1a>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 8004dd0:	f013 0f0c 	tst.w	r3, #12
 8004dd4:	bf18      	it	ne
 8004dd6:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8004dda:	05d9      	lsls	r1, r3, #23
 8004ddc:	d506      	bpl.n	8004dec <Vector8C+0x2c>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8004dde:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8004de2:	bf14      	ite	ne
 8004de4:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8004de8:	f044 0402 	orreq.w	r4, r4, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8004dec:	03da      	lsls	r2, r3, #15
 8004dee:	d506      	bpl.n	8004dfe <Vector8C+0x3e>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8004df0:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8004df4:	bf14      	ite	ne
 8004df6:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8004dfa:	f044 0404 	orreq.w	r4, r4, #4
 8004dfe:	2320      	movs	r3, #32
 8004e00:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8004e04:	4807      	ldr	r0, [pc, #28]	; (8004e24 <Vector8C+0x64>)
 8004e06:	f7fc f9d3 	bl	80011b0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4806      	ldr	r0, [pc, #24]	; (8004e28 <Vector8C+0x68>)
 8004e0e:	f7fc f9df 	bl	80011d0 <chEvtBroadcastFlagsI>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f383 8811 	msr	BASEPRI, r3
}
 8004e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004e1c:	f7fc b940 	b.w	80010a0 <_port_irq_epilogue>
 8004e20:	20000790 	.word	0x20000790
 8004e24:	20000798 	.word	0x20000798
 8004e28:	200007ac 	.word	0x200007ac
 8004e2c:	00000000 	.word	0x00000000

08004e30 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004e30:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004e32:	2600      	movs	r6, #0
 8004e34:	4f13      	ldr	r7, [pc, #76]	; (8004e84 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8004e36:	4d14      	ldr	r5, [pc, #80]	; (8004e88 <__init_ram_areas+0x58>)
 8004e38:	4814      	ldr	r0, [pc, #80]	; (8004e8c <__init_ram_areas+0x5c>)
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <__init_ram_areas+0x60>)
 8004e3c:	4915      	ldr	r1, [pc, #84]	; (8004e94 <__init_ram_areas+0x64>)
 8004e3e:	f107 0c70 	add.w	ip, r7, #112	; 0x70
    while (p < rap->clear_area) {
 8004e42:	4298      	cmp	r0, r3
 8004e44:	d911      	bls.n	8004e6a <__init_ram_areas+0x3a>
 8004e46:	461a      	mov	r2, r3
 8004e48:	3904      	subs	r1, #4
      *p = *tp;
 8004e4a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8004e4e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8004e52:	4290      	cmp	r0, r2
 8004e54:	d8f9      	bhi.n	8004e4a <__init_ram_areas+0x1a>
 8004e56:	1e42      	subs	r2, r0, #1
 8004e58:	1ad2      	subs	r2, r2, r3
 8004e5a:	f022 0203 	bic.w	r2, r2, #3
 8004e5e:	3204      	adds	r2, #4
 8004e60:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8004e62:	429d      	cmp	r5, r3
 8004e64:	d903      	bls.n	8004e6e <__init_ram_areas+0x3e>
      *p = 0;
 8004e66:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	d8fb      	bhi.n	8004e66 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004e6e:	4567      	cmp	r7, ip
 8004e70:	d005      	beq.n	8004e7e <__init_ram_areas+0x4e>
 8004e72:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8004e76:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	e7e1      	b.n	8004e42 <__init_ram_areas+0x12>
#endif
}
 8004e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	080053c4 	.word	0x080053c4
 8004e88:	20001320 	.word	0x20001320
 8004e8c:	20001320 	.word	0x20001320
 8004e90:	20001320 	.word	0x20001320
 8004e94:	08005834 	.word	0x08005834
	...

08004ea0 <__default_exit>:
  while (true) {
 8004ea0:	e7fe      	b.n	8004ea0 <__default_exit>
 8004ea2:	bf00      	nop
	...

08004eb0 <__late_init>:
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
	...

08004ec0 <__core_init>:
}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <memcmp>:
 8004ec4:	2a03      	cmp	r2, #3
 8004ec6:	b470      	push	{r4, r5, r6}
 8004ec8:	d912      	bls.n	8004ef0 <memcmp+0x2c>
 8004eca:	ea40 0501 	orr.w	r5, r0, r1
 8004ece:	07ad      	lsls	r5, r5, #30
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	d11d      	bne.n	8004f12 <memcmp+0x4e>
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ede:	f854 6b04 	ldr.w	r6, [r4], #4
 8004ee2:	42ae      	cmp	r6, r5
 8004ee4:	d115      	bne.n	8004f12 <memcmp+0x4e>
 8004ee6:	3a04      	subs	r2, #4
 8004ee8:	2a03      	cmp	r2, #3
 8004eea:	4620      	mov	r0, r4
 8004eec:	4619      	mov	r1, r3
 8004eee:	d8f2      	bhi.n	8004ed6 <memcmp+0x12>
 8004ef0:	1e56      	subs	r6, r2, #1
 8004ef2:	b19a      	cbz	r2, 8004f1c <memcmp+0x58>
 8004ef4:	3901      	subs	r1, #1
 8004ef6:	1e44      	subs	r4, r0, #1
 8004ef8:	e001      	b.n	8004efe <memcmp+0x3a>
 8004efa:	18c3      	adds	r3, r0, r3
 8004efc:	d00b      	beq.n	8004f16 <memcmp+0x52>
 8004efe:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8004f02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004f06:	1b33      	subs	r3, r6, r4
 8004f08:	4295      	cmp	r5, r2
 8004f0a:	d0f6      	beq.n	8004efa <memcmp+0x36>
 8004f0c:	1aa8      	subs	r0, r5, r2
 8004f0e:	bc70      	pop	{r4, r5, r6}
 8004f10:	4770      	bx	lr
 8004f12:	1e56      	subs	r6, r2, #1
 8004f14:	e7ee      	b.n	8004ef4 <memcmp+0x30>
 8004f16:	4618      	mov	r0, r3
 8004f18:	bc70      	pop	{r4, r5, r6}
 8004f1a:	4770      	bx	lr
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	e7f6      	b.n	8004f0e <memcmp+0x4a>
